within FCSys;
package WorkInProgress "Incomplete classes under development"
  extends Modelica.Icons.Package;
  extends FCSys.BaseClasses.Icons.PackageUnderConstruction;

  package Blocks "Imperative models (e.g., controllers and observers)"
    extends Modelica.Icons.Package;

    /* **References:
    <tr>
      <td valign=\"top\">[Rossiter2003]</td>
      <td valign=\"top\">J. A. Rossiter, \"<a href=\"http://www.mathworks.com/matlabcentral/fileexchange/3410-model-based-predictive-control-a-practical-approach\">Model-based Predictive Control: A Practical Approach</a>,\" example files for MATLAB, May 2003.</td>
    </tr>
    <tr>
      <td valign=\"top\">[]</td>
      <td valign=\"top\">Carnegie Mellon University and University of Michigan, \"Controls Tutorials for MATLAB: State Space Tutorial,\" <a href=\"http://www.engin.umich.edu/group/ctm/state/state.html\">http://www.engin.umich.edu/group/ctm/state/state.html</a>.</td>
    </tr>
        <tr>
      <td valign=\"top\">[Ferreau2009]</td>
      <td valign=\"top\">H. J. Ferreau, E. Arnold, H. Diedam, B. Houska, A. Perrin, and T. Wiese, <i><a href=\"http://www.kuleuven.be/optec/index.php/software/qpOASES\">qpOASES User's Manual</a></i>, ver. 2.0, Jun. 2009.</td>
    </tr>
    <tr>
      <td valign=\"top\">[ModelicaTutorial1.4]</td>
      <td valign=\"top\">Modelica Assoc., \"<a href=\"http://www.modelica.org/documents/ModelicaTutorial14.pdf\">Modelica - A Unified Object-Oriented Language for Physical Systems Modeling: Tutorial</a>,\" ver. 1.4, Dec. 15, 2000.</td>
    </tr>
  */
    package Examples "Examples"
      extends Modelica.Icons.ExamplesPackage;
      model MagneticBall "Example from [Carnegie Mellon, 2009]"
        import MPC = FCSys.WorkInProgress.Blocks.Discrete.Controllers;
        extends Modelica.Icons.Example;
        parameter Real A[:, n_x]=[0, 1, 0; 980, 0, -2.8; 0, 0, -100]
          "System gain of state space model (state to derivative of state)";
        parameter Real B[n_x, :]=[0; 0; 100]
          "Input gain of state space model (actuation to derivative of state)";
        parameter Real C[:, n_x]=[1, 0, 0]
          "Output gain of state space model (state to measurement)";
        parameter Real L[n_x, n_sen]=[0.0203e4; 1.1282e4; 0]
          "Observer gain (measurement to derivative of estimated state)"
          annotation (Dialog(group="Controller"));
        parameter Real Nbar[n_act, n_x]=[-35.7143, 0, 0]
          "Reference gain (actuation to measurement)"
          annotation (Dialog(group="Controller"));
        parameter Real K[n_act, n_x]=[-775.7143, -20.6429, 0.4000]
          "Controller gain (estimated state to actuation)";
        parameter Real x_0[n_x]={0.005,0,0} "Initial states of the plant"
          annotation (Dialog(group="Initial Conditions"));
        final parameter Integer n_act=size(B, 2) "Number of actuators";
        final parameter Integer n_x=size(A, 1) "Number of states";
        final parameter Integer n_sen=size(C, 1) "Number of sensors";
        Continuous.Plants.StateSpace plant(
          A=A,
          B=B,
          C=C,
          x_0=x_0,
          initType=Modelica.Blocks.Types.Init.InitialState)
          annotation (Placement(transformation(extent={{-10,30},{10,50}})));
        FCSys.WorkInProgress.Blocks.Continuous.Sources.Constant reference(k={0,
              0,0}) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={-30,-70})));
        FCSys.WorkInProgress.Blocks.Continuous.Controllers.Controller
          controller(
          A=A,
          B=B,
          C=C,
          L=L,
          Nbar=Nbar,
          K=K)
          annotation (Placement(transformation(extent={{-40,-50},{-20,-30}})));
        FCSys.WorkInProgress.Blocks.Continuous.Observers.Observer observer(
          A=A,
          B=B,
          C=C,
          L=L)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));

      equation
        connect(reference.y, controller.ref) annotation (Line(
            points={{-30,-59},{-30,-55.5},{-30,-51},{-30,-51}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        connect(observer.x, controller.x) annotation (Line(
            points={{6.10623e-16,-11},{6.10623e-16,-40},{-19,-40}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        connect(observer.act, controller.act) annotation (Line(
            points={{-11,6.10623e-16},{-60,6.10623e-16},{-60,-40},{-41,-40}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        connect(plant.y, observer.sen) annotation (Line(
            points={{11,40},{30,40},{30,6.10623e-16},{11,6.10623e-16}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        connect(plant.u, controller.act) annotation (Line(
            points={{-11,40},{-60,40},{-60,-40},{-41,-40}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        annotation (
          Documentation(revisions="<html>
<p><ul>
<li>[Carnegie Mellon, 2009]:<br/>Original example for MATLAB</li>
<li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2009/12/9:<br/>Implemented in Modelica</li>
</ul></p>
</html>"),
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                  {100,100}}), graphics),
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                  {100,100}}), graphics),
          experiment(StopTime=2),
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}})));

      end MagneticBall;

      model MaciejowskiAircraftMPC
        "<html>Aircraft model from J. Maciejowski, <i>Predictive Control with Constraints</i>, Prentice Hall, 2000</html>"
        extends Modelica.Icons.Example;
        Continuous.Plants.StateSpace aircraft(
          initType=Modelica.Blocks.Types.Init.InitialState,
          A=[-1.2822, 0, .98, 0; 0, 0, 1, 0; -5.4293, 0, -1.8366, 0; -128.2,
              128.2, 0, 0],
          B=[-.3; 0; -17; 0],
          C=[0, 1, 0, 0; 0, 0, 0, 1; -128.2, 128.2, 0, 0])
          annotation (Placement(transformation(extent={{-40,30},{-20,50}})));
        FCSys.WorkInProgress.Blocks.Discrete.Controllers.MPC controller(
          A=[.24, 0, .1787, 0; -.3722, 1, .2703, 0; -.9901, 0, .1389, 0; -48.9354,
              64.1, 2.3992, 1],
          B=[-1.2346; -1.4383; -4.4828; -1.7999],
          C=[0, 1, 0, 0; 0, 0, 0, 1; -128.2, 128.2, 0, 0],
          samplePeriod=0.5,
          act_min={-Modelica.Constants.inf},
          act_max={Modelica.Constants.inf})
          annotation (Placement(transformation(extent={{-40,-50},{-20,-30}})));
        Modelica.Blocks.Sources.Step reference[3](height={0,40,0}, startTime={0,
              0,0}) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={-30,-70})));

      equation
        controller.x = aircraft.x;
        connect(controller.act, aircraft.u) annotation (Line(
            points={{-41,-40},{-60,-40},{-60,40},{-41,40}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        connect(reference.y, controller.ref) annotation (Line(
            points={{-30,-59},{-30,-55.5},{-30,-51},{-30,-51}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                      extent={{-40,6},{60,0}},
                      lineColor={0,0,255},
                      textString="This example assumes a perfect observer:"),
                Text( extent={{-40,0},{60,-6}},
                      lineColor={0,0,255},
                      textString="controller.x = aircraft.x")}),
          experiment(StopTime=20),
          Documentation(info="<html><p>In this example, the states of the plant are fed directly to the controller.  The plant is not observable with the given output (<b>C</b>) matrix, since there are 4 states and the rank of the observability matrix is only 3.
 <p>The matrices of the controller are the discretized version of the plant model in continuous-time.
 They can be calculated in MATLAB by:
 <table border=\"0\" bgcolor=\"lightgray\"><tr><td><code>
 csys = ss(A,B,C,D); % where A,B,C,D are the matrices of the continuous-time model
<br>T_s = 0.5; % sampling period [s]
<br>dsys = c2d(csys,'zoh',T_s);
<br>[A,B,C,D] = ssdata(dsys) % where A,B,C,D are now the matrices of the discrete-time model</code>
 </td></tr></code></table></html>", revisions="<html><ul><li>Jan Gall, 2009/12/7:<br>Initial version</li>
  <li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2009/12/11:<br>Modified</li></ul></html>"));

      end MaciejowskiAircraftMPC;

      model RossiterExample2MPC "Example2_mimo.m in Rossiter (2003)"
        extends Modelica.Icons.Example;
        import MPC = FCSys.WorkInProgress.Blocks.Discrete.Controllers;
        parameter Modelica.SIunits.Time samplePeriod(
          min=100*Modelica.Constants.eps,
          start=0.1) = 1 "Sample period of discrete species";
        FCSys.WorkInProgress.Blocks.Discrete.Plants.StateSpaceWNoise plant(
          samplePeriod=samplePeriod,
          A=[-0.0893, 0, 0.0993; 0.4083, -2.0003, 0.0001; 0, 0, -2.0003],
          B=[-0.0001, -0.0791; -0.0002, 0.3622; 2.0003, 0],
          C=[1.7993, 13.216, 0; 0.8233, 0, 0])
          annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
        FCSys.WorkInProgress.Blocks.Discrete.Observers.Observer observer(
          samplePeriod=samplePeriod,
          A=[0.9146, 0, 0.0405, 0, 0; 0.1665, 0.1353, 0.0058, 0, 0; 0, 0,
              0.1353, 0, 0; 0, 0, 0, 1, 0; 0, 0, 0, 0, 1],
          B=[0.0544, -0.0757; 0.0053, 0.1477; 0.8647, 0; 0, 0; 0, 0],
          C=[1.7993, 13.216, 0, 1, 0; 0.8233, 0, 0, 0, 1],
          L=[0.0300465946139166, 0.307625044040746; 0.0144539216746499,
              0.0471237564746761; 1.23468336612022e-05, 0.000356017361987146;
              0.0633286232734119, 0.261847186879267; -0.027043834850078,
              0.723173659232941])
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        FCSys.WorkInProgress.Blocks.Discrete.Controllers.MPCWRej controller(
          samplePeriod=samplePeriod,
          K_ff=[0.37916203293428, 1.62844416370545; 0.487563244325183, -0.952185693944061],

          K_fb=[2.02221906314084, 0.1668357018389, 0.0994845626559192,
              0.37916203293428, 1.62844416370545; 1.22064368996494,
              0.730619101772674, 0.0430546102350298, 0.487563244325183, -0.952185693944061],

          K_opt=[2.02221906314084, 0.1668357018389, 0.0994845626559192,
              0.37916203293428, 1.62844416370545, -0.37916203293428, -1.62844416370545;
              1.22064368996494, 0.730619101772674, 0.0430546102350298,
              0.487563244325183, -0.952185693944061, -0.487563244325183,
              0.952185693944061; 1.63586979024534, 0.0835610163426496,
              0.0822675034041723, 0.367121282729176, 1.18547635742844, -0.367121282729176,
              -1.18547635742844; 1.00171907394323, 0.0695854625215153,
              0.0481361342586214, 0.43923960778996, -1.11248283625919, -0.43923960778996,
              1.11248283625919; 1.32146357607087, 0.0659760405719598,
              0.066694151894748, 0.36059896835573, 0.817833209821363, -0.36059896835573,
              -0.817833209821363; 0.812659228286539, 0.0412114714754606,
              0.0407095372120977, 0.434616839788396, -1.33202232729627, -0.434616839788396,
              1.33202232729627; 1.0671057994, 0.0532210066525415,
              0.0538892478609675, 0.355365040818403, 0.520312762184861, -0.355365040818403,
              -0.520312762184861; 0.65675527866826, 0.0327902326530564,
              0.0331244832623013, 0.431450988710252, -1.51447404501116, -0.431450988710252,
              1.51447404501116; 0.861651802155867, 0.0429707577941614,
              0.0435182074705799, 0.351132023975283, 0.280006455217349, -0.351132023975283,
              -0.280006455217349; 0.530380070188078, 0.0264535311501976,
              0.0267813821102224, 0.428856899243221, -1.66230804485899, -0.428856899243221,
              1.66230804485899; 0.695746932608077, 0.0346966977365353,
              0.0351397027466162, 0.347712794384971, 0.0859605131245224, -0.347712794384971,
              -0.0859605131245224; 0.428269185641425, 0.021358082072846,
              0.0216295610585003, 0.426753870611063, -1.78174228481595, -0.426753870611063,
              1.78174228481595; 0.561784790166957, 0.0280159998477831,
              0.028373835838596, 0.34495173752463, -0.0707241859976945, -0.34495173752463,
              0.0707241859976945; 0.345809747499483, 0.0172454611940975,
              0.0174655633001765, 0.425054521953598, -1.87818886697626, -0.425054521953598,
              1.87818886697626; 0.453616155185521, 0.0226216639459541,
              0.0229106182044855, 0.342722282208041, -0.197240255963587, -0.342722282208041,
              0.197240255963587; 0.279226132590071, 0.0139249080950118,
              0.0141027528422942, 0.423682199852987, -1.95606637556781, -0.423682199852987,
              1.95606637556781; 0.366274788014799, 0.0182659825826194,
              0.0184993026683911, 0.340922093145758, -0.299396355347263, -0.340922093145758,
              0.299396355347263; 0.225462658567228, 0.0112437370012064,
              0.0113873554590326, 0.422574087061991, -2.01894915033462, -0.422574087061991,
              2.01894915033462; 0.295750531688632, 0.0147489649727788,
              0.0149373608543456, 0.339468520407865, -0.38188284593517, -0.339468520407865,
              0.38188284593517; 0.182051030097446, 0.00907881481860712,
              0.00919478261348588, 0.421679332177663, -2.06972420490637, -0.421679332177663,
              2.06972420490637; 0.238805344284422, 0.0119091304195276,
              0.0120612517248262, 0.338294825282217, -0.448487003156653, -0.338294825282217,
              0.448487003156653; 0.146998075766575, 0.00733073736604938,
              0.00742437649750615, 0.420956857120112, -2.11072279665194, -0.420956857120112,
              2.11072279665194; 0.192824648928605, 0.00961609087332769,
              0.00973892203894812, 0.337347118884031, -0.502266885202565, -0.337347118884031,
              0.502266885202565; 0.118694380370556, 0.00591924297373401,
              0.00599485243344218, 0.420373490719119, -2.14382732865332, -0.420373490719119,
              2.14382732865332; 0.155697291214872, 0.00776456386315182,
              0.00786374454382391, 0.336581888296952, -0.545691737805683, -0.336581888296952,
              0.545691737805683; 0.0958404105004156, 0.00477952430806122,
              0.00484057557556158, 0.41990244839865, -2.17055775964087, -0.41990244839865,
              2.17055775964087; 0.125718608207778, 0.00626953850380324,
              0.00634962247351441, 0.335963998777864, -0.580755366648988, -0.335963998777864,
              0.580755366648988; 0.0773868506276398, 0.0038592523940673,
              0.00390854856645343, 0.419522102763488, -2.19214138871744, -0.419522102763488,
              2.19214138871744; 0.101512160721329, 0.0050623723036615,
              0.00512703653215143, 0.335465080590121, -0.609067680771582, -0.335465080590121,
              0.609067680771582; 0.0624864252845467, 0.0031161739289978,
              0.00315597838642692, 0.419214990651629, -2.20956920513335, -0.419214990651629,
              2.20956920513335; 0.0819665355925643, 0.00408763951690391,
              0.00413985299308895, 0.33506222643843, -0.631928609814461, -0.33506222643843,
              0.631928609814461; 0.0504549973692387, 0.00251617125917146,
              0.00254831158063644, 0.418967011338895, -2.22364138845031, -0.418967011338895,
              2.22364138845031; 0.0661843163351682, 0.00330058632947074,
              0.00334274637929878, 0.334736939705012, -0.65038778889958, -0.334736939705012,
              0.65038778889958; 0.0407401567290222, 0.00203169590329157,
              0.00205764777728198, 0.41876677912022, -2.23500404792401, -0.41876677912022,
              2.23500404792401; 0.0534408792208483, 0.00266507603550634,
              0.00269911839260191, 0.334474285197187, -0.66529275150444, -0.334474285197187,
              0.66529275150444; 0.0328958568396852, 0.00164050369322314,
              0.00166145867229208, 0.418605100547306, -2.24417888791914, -0.418605100547306,
              2.24417888791914; 0.0431511229553902, 0.00215192985913177,
              0.00217941754193452, 0.334262203413968, -0.677327843055795, -0.334262203413968,
              0.677327843055795; 0.0265619350562332, 0.00132463345676818,
              0.00134155366638144, 0.418474552321289, -2.25158716140749, -0.418474552321289,
              2.25158716140749; 0.0348426043781256, 0.00173758724213775,
              0.00175978231822321, 0.334090956846963, -0.687045641918455, -0.334090956846963,
              0.687045641918455; 0.0214475761300249, 0.00106958234963934,
              0.00108324466313601, 0.418369140459908, -2.25756901134791, -0.418369140459908,
              2.25756901134791; 0.0281338467391826, 0.00140302408613729,
              0.00142094561870058, 0.333952682893087, -0.694892330440278, -0.333952682893087,
              0.694892330440278; 0.0173179597374728, 0.000863639972865511,
              0.000874671680766753, 0.41828402509022, -2.26239908798667, -0.41828402509022,
              2.26239908798667; 0.0227168246022601, 0.00113287928142218,
              0.00114735011847544, 0.333841032851541, -0.70122818093777, -0.333841032851541,
              0.70122818093777; 0.013983478955875, 0.000697350702339699,
              0.000706258313722499, 0.418215298230999, -2.26629915912999, -0.418215298230999,
              2.26629915912999; 0.0183428211859535, 0.000914749418029628,
              0.000926433972588923, 0.333750880430006, -0.706344097214417, -0.333750880430006,
              0.706344097214417; 0.0112910346642215, 0.00056307954394487,
              0.000570272042264922, 0.418159804361965, -2.26944829237582, -0.418159804361965,
              2.26944829237582; 0.0148110087985797, 0.000738619296431209,
              0.00074805405233003, 0.333678086376407, -0.710474971097888, -0.333678086376407,
              0.710474971097888; 0.00911700616069436, 0.000454661580959754,
              0.000460469202089683, 0.418114995541434, -2.27199107681115, -0.418114995541434,
              2.27199107681115; 0.0119592280493684, 0.000596402090351332,
              0.000604020234322385, 0.333619308429579, -0.713810467247234, -0.333619308429579,
              0.713810467247234; 0.00736157525027576, 0.000367118918496997,
              0.000371808313153478, 0.418078814420308, -2.27404426166548, -0.418078814420308,
              2.27404426166548; 0.00965654247336047, 0.000481568048782442,
              0.000487719359763467, 0.333571847862919, -0.716503731402992, -0.333571847862919,
              0.716503731402992; 0.00594414319901537, 0.000296432128780054,
              0.000300218605506456, 0.418049599781082, -2.27570211672683, -0.418049599781082,
              2.27570211672683; 0.00779722672357096, 0.000388844689446872,
              0.0003938115983067, 0.333533525575237, -0.718678421910162, -0.333533525575237,
              0.718678421910162; 0.00479963012930923, 0.000239355703413017,
              0.000242413114241035, 0.418026010264821, -2.27704076063834, -0.418026010264821,
              2.27704076063834; 0.00629591230468765, 0.000313974718408575,
              0.000317985275458599, 0.333502582039655, -0.720434387358954, -0.333502582039655,
              0.720434387358954; 0.00387548694688056, 0.000193269039331592,
              0.000195737762011467, 0.418006962784101, -2.27812165580438, -0.418006962784101,
              2.27812165580438; 0.00508366796985528, 0.000253520560972488,
              0.000256758906652955, 0.333477596516811, -0.721852251026074, -0.333477596516811,
              0.721852251026074; 0.00312928260528343, 0.000156056116614455,
              0.000158049499909326, 0.417991582794204, -2.27899443037119, -0.417991582794204,
              2.27899443037119; 0.00410483481615373, 0.000204706529116676,
              0.000207321348608182, 0.33345742182313, -0.722997112606309, -0.33345742182313,
              0.722997112606309; 0.00252675592975781, 0.000126008343690274,
              0.000127617911663486, 0.417979164139331, -2.27969915685012, -0.417979164139331,
              2.27969915685012; 0.00331447076556172, 0.000165291378743612,
              0.000167402728688246, 0.333441131659114, -0.723921537195422, -0.333441131659114,
              0.723921537195422; 0.00204024255201073, 0.000101746109181955,
              0.000103045763426604, 0.417969136630219, -2.28026819200422, -0.417969136630219,
              2.28026819200422; 0.00267628709748107, 0.000133465405353007,
              0.000135170226126749, 0.333427978079296, -0.724667968760348, -0.333427978079296,
              0.724667968760348; 0.0016474047303153, 8.21554385248641e-05,
              8.32048512764505e-05, 0.417961039864505, -2.28072766247436, -0.417961039864505,
              2.28072766247436; 0.0021609822909178, 0.000107767353393988,
              0.000109143920020459, 0.333417357151117, -0.725270678908562, -0.333417357151117,
              0.725270678908562; 0.00133020573597514, 6.63368470153726e-05,
              6.7184200938715e-05, 0.417954502087844, -2.28109866435608, -0.417954502087844,
              2.28109866435608; 0.0017448966764648, 8.70173242783555e-05,
              8.81288403428579e-05, 0.333408781226012, -0.72575734043231, -0.333408781226012,
              0.72575734043231; 0.00107408171620492, 5.35640409321061e-05,
              5.42482413768963e-05, 0.41794922312521, -2.28139823180422, -0.41794922312521,
              2.28139823180422; 0.00140892612786974, 7.02626025980412e-05,
              7.11601021726277e-05, 0.333401856549545, -0.726150297875284, -0.333401856549545,
              0.726150297875284; 0.000867273010396394, 4.3250570536032e-05,
              4.38030318343813e-05, 0.417944960598676, -2.28164011913797, -0.417944960598676,
              2.28164011913797; 0.00113764491649776, 5.67339132154659e-05,
              5.74586040338064e-05, 0.3333962651826, -0.726467593458464, -0.3333962651826,
              0.726467593458464; 0.000700284217870924, 3.49229038575214e-05,
              3.53689916794422e-05, 0.417941518798892, -2.28183543235573, -0.417941518798892,
              2.28183543235573; 0.000918597455489066, 4.58101008178388e-05,
              4.63952562842679e-05, 0.333391750403538, -0.726723795469408, -0.333391750403538,
              0.726723795469408; 0.000565448226706549, 2.81986849821004e-05,
              2.85588809731331e-05, 0.417938739699299, -2.28199313905511, -0.417938739699299,
              2.28199313905511; 0.000741726414801455, 3.69896102348971e-05,
              3.74620971372093e-05, 0.333388104921104, -0.726930667149605, -0.333388104921104,
              0.726930667149605; 0.000456574186489112, 2.27691785873208e-05,
              2.30600207613961e-05, 0.41793649570051, -2.28212048017066, -0.41793649570051,
              2.28212048017066; 0.000598910949651294, 2.98674580693523e-05,
              3.02489701386472e-05, 0.33338516135687, -0.727097706791137, -0.33338516135687,
              0.727097706791137; 0.000368663262032616, 1.83850946904223e-05,
              1.86199367550948e-05, 0.41793468377172, -2.28222330243359, -0.41793468377172,
              2.28222330243359; 0.000483593840605273, 2.41166383170731e-05,
              2.44246922722312e-05, 0.33338278456023, -0.727232583840603, -0.33338278456023,
              0.727232583840603; 0.000297679117204692, 1.484514276523e-05,
              1.50347672428869e-05, 0.417933220720154, -2.28230632681819, -0.417933220720154,
              2.28230632681819; 0.000390480425858837, 1.94731082359273e-05,
              1.97218480450346e-05, 0.333380865403106, -0.727341491033565, -0.333380865403106,
              0.727341491033565; 0.00024036259086734, 1.19867897027947e-05,
              1.21399029986466e-05, 0.417932039371364, -2.28237336530036, -0.417932039371364,
              2.28237336530036; 0.000315295502498665, 1.57236651055005e-05,
              1.59245113910254e-05, 0.33337931576945, -0.727429428727381, -0.33337931576945,
              0.727429428727381; 0.00019408205597685, 9.67879727742045e-06,
              9.80242942479035e-06, 0.417931085484983, -2.28242749588033, -0.417931085484983,
              2.28242749588033; 0.000254587035130473, 1.26961572520712e-05,
              1.28583316565379e-05, 0.33337806450949, -0.727500434487272, -0.33337806450949,
              0.727500434487272; 0.000156712591240916, 7.81519648380584e-06,
              7.9150239205954e-06, 0.417930315264337, -2.28247120390584, -0.417930315264337,
              2.28247120390584; 0.000205567659363613, 1.02515798885166e-05,
              1.03825284763652e-05, 0.333377054172961, -0.727557768466807, -0.333377054172961,
              0.727557768466807; 0.000126538417628737, 6.31042208343156e-06,
              6.39102827969988e-06, 0.417929693345568, -2.28250649618416, -0.417929693345568,
              2.28250649618416; 0.000165986702954365, 8.2776928580885e-06,
              8.38342799376506e-06, 0.333376238371343, -0.727604063094375, -0.333376238371343,
              0.727604063094375; 0.000102174120210732, 5.09538396809039e-06,
              5.16046987118279e-06, 0.417929191173941, -2.28253499312251, -0.417929191173941,
              2.28253499312251; 0.000134026848595511, 6.68386724758424e-06,
              6.76924364682776e-06, 0.333375579647975, -0.727641443938319, -0.333375579647975,
              0.727641443938319; 8.25010383128598e-05, 4.11429496141629e-06,
              4.16684892100585e-06, 0.417928785692783, -2.28255800312738, -0.417928785692783,
              2.28255800312738; 0.000108220693734623, 5.39692425766634e-06,
              5.46586188659309e-06, 0.333375047758278, -0.727671627300133, -0.333375047758278,
              0.727671627300133; 6.66159034074564e-05, 3.32210941030994e-06,
              3.36454438527863e-06, 0.417928458284859, -2.28257658267853, -0.417928458284859,
              2.28257658267853; 8.73833763543048e-05, 4.35777527650848e-06,
              4.41343933266628e-06, 0.333374618281105, -0.727695999016614, -0.333374618281105,
              0.727695999016614; 5.37893665042498e-05, 2.68245496192395e-06,
              2.71671930879062e-06, 0.417928193917584, -2.28259158483621, -0.417928193917584,
              2.28259158483621; 7.05581732991161e-05, 3.51870888934062e-06,
              3.56365512837113e-06, 0.333374271497472, -0.727715678089073, -0.333374271497472,
              0.727715678089073; 4.34325108710401e-05, 2.1659625659587e-06,
              2.1936294955861e-06, 0.417927980452818, -2.28260369840844, -0.417927980452818,
              2.28260369840844; 5.69725733544839e-05, 2.84120025983644e-06,
              2.87749234026372e-06, 0.333373991485177, -0.72773156806109, -0.333373991485177,
              0.72773156806109; 3.50698125514078e-05, 1.74891802610901e-06,
              1.77125783599905e-06, 0.417927808089555, -2.28261347957694, -0.417927808089555,
              2.28261347957694; 4.60028082199899e-05, 2.29414230343089e-06,
              2.32344653733679e-06, 0.333373765387756, -0.727744398503744, -0.333373765387756,
              0.727744398503744; 2.83173071905209e-05, 1.41217318808795e-06,
              1.4302115867337e-06, 0.417927668913918, -2.28262137743362, -0.417927668913918,
              2.28262137743362; -2.02221906314084, -0.1668357018389, -0.0994845626559192,
              -0.37916203293428, -1.62844416370545, 0.37916203293428,
              1.62844416370545; -1.22064368996494, -0.730619101772674, -0.0430546102350298,
              -0.487563244325183, 0.952185693944061, 0.487563244325183, -0.952185693944061;
              -1.63586979024534, -0.0835610163426496, -0.0822675034041723, -0.367121282729176,
              -1.18547635742844, 0.367121282729176, 1.18547635742844; -1.00171907394323,
              -0.0695854625215153, -0.0481361342586214, -0.43923960778996,
              1.11248283625919, 0.43923960778996, -1.11248283625919; -1.32146357607087,
              -0.0659760405719598, -0.066694151894748, -0.36059896835573, -0.817833209821363,
              0.36059896835573, 0.817833209821363; -0.812659228286539, -0.0412114714754606,
              -0.0407095372120977, -0.434616839788396, 1.33202232729627,
              0.434616839788396, -1.33202232729627; -1.0671057994, -0.0532210066525415,
              -0.0538892478609675, -0.355365040818403, -0.520312762184861,
              0.355365040818403, 0.520312762184861; -0.65675527866826, -0.0327902326530564,
              -0.0331244832623013, -0.431450988710252, 1.51447404501116,
              0.431450988710252, -1.51447404501116; -0.861651802155867, -0.0429707577941614,
              -0.0435182074705799, -0.351132023975283, -0.280006455217349,
              0.351132023975283, 0.280006455217349; -0.530380070188078, -0.0264535311501976,
              -0.0267813821102224, -0.428856899243221, 1.66230804485899,
              0.428856899243221, -1.66230804485899; -0.695746932608077, -0.0346966977365353,
              -0.0351397027466162, -0.347712794384971, -0.0859605131245224,
              0.347712794384971, 0.0859605131245224; -0.428269185641425, -0.021358082072846,
              -0.0216295610585003, -0.426753870611063, 1.78174228481595,
              0.426753870611063, -1.78174228481595; -0.561784790166957, -0.0280159998477831,
              -0.028373835838596, -0.34495173752463, 0.0707241859976945,
              0.34495173752463, -0.0707241859976945; -0.345809747499483, -0.0172454611940975,
              -0.0174655633001765, -0.425054521953598, 1.87818886697626,
              0.425054521953598, -1.87818886697626; -0.453616155185521, -0.0226216639459541,
              -0.0229106182044855, -0.342722282208041, 0.197240255963587,
              0.342722282208041, -0.197240255963587; -0.279226132590071, -0.0139249080950118,
              -0.0141027528422942, -0.423682199852987, 1.95606637556781,
              0.423682199852987, -1.95606637556781; -0.366274788014799, -0.0182659825826194,
              -0.0184993026683911, -0.340922093145758, 0.299396355347263,
              0.340922093145758, -0.299396355347263; -0.225462658567228, -0.0112437370012064,
              -0.0113873554590326, -0.422574087061991, 2.01894915033462,
              0.422574087061991, -2.01894915033462; -0.295750531688632, -0.0147489649727788,
              -0.0149373608543456, -0.339468520407865, 0.38188284593517,
              0.339468520407865, -0.38188284593517; -0.182051030097446, -0.00907881481860712,
              -0.00919478261348588, -0.421679332177663, 2.06972420490637,
              0.421679332177663, -2.06972420490637; -0.238805344284422, -0.0119091304195276,
              -0.0120612517248262, -0.338294825282217, 0.448487003156653,
              0.338294825282217, -0.448487003156653; -0.146998075766575, -0.00733073736604938,
              -0.00742437649750615, -0.420956857120112, 2.11072279665194,
              0.420956857120112, -2.11072279665194; -0.192824648928605, -0.00961609087332769,
              -0.00973892203894812, -0.337347118884031, 0.502266885202565,
              0.337347118884031, -0.502266885202565; -0.118694380370556, -0.00591924297373401,
              -0.00599485243344218, -0.420373490719119, 2.14382732865332,
              0.420373490719119, -2.14382732865332; -0.155697291214872, -0.00776456386315182,
              -0.00786374454382391, -0.336581888296952, 0.545691737805683,
              0.336581888296952, -0.545691737805683; -0.0958404105004156, -0.00477952430806122,
              -0.00484057557556158, -0.41990244839865, 2.17055775964087,
              0.41990244839865, -2.17055775964087; -0.125718608207778, -0.00626953850380324,
              -0.00634962247351441, -0.335963998777864, 0.580755366648988,
              0.335963998777864, -0.580755366648988; -0.0773868506276398, -0.0038592523940673,
              -0.00390854856645343, -0.419522102763488, 2.19214138871744,
              0.419522102763488, -2.19214138871744; -0.101512160721329, -0.0050623723036615,
              -0.00512703653215143, -0.335465080590121, 0.609067680771582,
              0.335465080590121, -0.609067680771582; -0.0624864252845467, -0.0031161739289978,
              -0.00315597838642692, -0.419214990651629, 2.20956920513335,
              0.419214990651629, -2.20956920513335; -0.0819665355925643, -0.00408763951690391,
              -0.00413985299308895, -0.33506222643843, 0.631928609814461,
              0.33506222643843, -0.631928609814461; -0.0504549973692387, -0.00251617125917146,
              -0.00254831158063644, -0.418967011338895, 2.22364138845031,
              0.418967011338895, -2.22364138845031; -0.0661843163351682, -0.00330058632947074,
              -0.00334274637929878, -0.334736939705012, 0.65038778889958,
              0.334736939705012, -0.65038778889958; -0.0407401567290222, -0.00203169590329157,
              -0.00205764777728198, -0.41876677912022, 2.23500404792401,
              0.41876677912022, -2.23500404792401; -0.0534408792208483, -0.00266507603550634,
              -0.00269911839260191, -0.334474285197187, 0.66529275150444,
              0.334474285197187, -0.66529275150444; -0.0328958568396852, -0.00164050369322314,
              -0.00166145867229208, -0.418605100547306, 2.24417888791914,
              0.418605100547306, -2.24417888791914; -0.0431511229553902, -0.00215192985913177,
              -0.00217941754193452, -0.334262203413968, 0.677327843055795,
              0.334262203413968, -0.677327843055795; -0.0265619350562332, -0.00132463345676818,
              -0.00134155366638144, -0.418474552321289, 2.25158716140749,
              0.418474552321289, -2.25158716140749; -0.0348426043781256, -0.00173758724213775,
              -0.00175978231822321, -0.334090956846963, 0.687045641918455,
              0.334090956846963, -0.687045641918455; -0.0214475761300249, -0.00106958234963934,
              -0.00108324466313601, -0.418369140459908, 2.25756901134791,
              0.418369140459908, -2.25756901134791; -0.0281338467391826, -0.00140302408613729,
              -0.00142094561870058, -0.333952682893087, 0.694892330440278,
              0.333952682893087, -0.694892330440278; -0.0173179597374728, -0.000863639972865511,
              -0.000874671680766753, -0.41828402509022, 2.26239908798667,
              0.41828402509022, -2.26239908798667; -0.0227168246022601, -0.00113287928142218,
              -0.00114735011847544, -0.333841032851541, 0.70122818093777,
              0.333841032851541, -0.70122818093777; -0.013983478955875, -0.000697350702339699,
              -0.000706258313722499, -0.418215298230999, 2.26629915912999,
              0.418215298230999, -2.26629915912999; -0.0183428211859535, -0.000914749418029628,
              -0.000926433972588923, -0.333750880430006, 0.706344097214417,
              0.333750880430006, -0.706344097214417; -0.0112910346642215, -0.00056307954394487,
              -0.000570272042264922, -0.418159804361965, 2.26944829237582,
              0.418159804361965, -2.26944829237582; -0.0148110087985797, -0.000738619296431209,
              -0.00074805405233003, -0.333678086376407, 0.710474971097888,
              0.333678086376407, -0.710474971097888; -0.00911700616069436, -0.000454661580959754,
              -0.000460469202089683, -0.418114995541434, 2.27199107681115,
              0.418114995541434, -2.27199107681115; -0.0119592280493684, -0.000596402090351332,
              -0.000604020234322385, -0.333619308429579, 0.713810467247234,
              0.333619308429579, -0.713810467247234; -0.00736157525027576, -0.000367118918496997,
              -0.000371808313153478, -0.418078814420308, 2.27404426166548,
              0.418078814420308, -2.27404426166548; -0.00965654247336047, -0.000481568048782442,
              -0.000487719359763467, -0.333571847862919, 0.716503731402992,
              0.333571847862919, -0.716503731402992; -0.00594414319901537, -0.000296432128780054,
              -0.000300218605506456, -0.418049599781082, 2.27570211672683,
              0.418049599781082, -2.27570211672683; -0.00779722672357096, -0.000388844689446872,
              -0.0003938115983067, -0.333533525575237, 0.718678421910162,
              0.333533525575237, -0.718678421910162; -0.00479963012930923, -0.000239355703413017,
              -0.000242413114241035, -0.418026010264821, 2.27704076063834,
              0.418026010264821, -2.27704076063834; -0.00629591230468765, -0.000313974718408575,
              -0.000317985275458599, -0.333502582039655, 0.720434387358954,
              0.333502582039655, -0.720434387358954; -0.00387548694688056, -0.000193269039331592,
              -0.000195737762011467, -0.418006962784101, 2.27812165580438,
              0.418006962784101, -2.27812165580438; -0.00508366796985528, -0.000253520560972488,
              -0.000256758906652955, -0.333477596516811, 0.721852251026074,
              0.333477596516811, -0.721852251026074; -0.00312928260528343, -0.000156056116614455,
              -0.000158049499909326, -0.417991582794204, 2.27899443037119,
              0.417991582794204, -2.27899443037119; -0.00410483481615373, -0.000204706529116676,
              -0.000207321348608182, -0.33345742182313, 0.722997112606309,
              0.33345742182313, -0.722997112606309; -0.00252675592975781, -0.000126008343690274,
              -0.000127617911663486, -0.417979164139331, 2.27969915685012,
              0.417979164139331, -2.27969915685012; -0.00331447076556172, -0.000165291378743612,
              -0.000167402728688246, -0.333441131659114, 0.723921537195422,
              0.333441131659114, -0.723921537195422; -0.00204024255201073, -0.000101746109181955,
              -0.000103045763426604, -0.417969136630219, 2.28026819200422,
              0.417969136630219, -2.28026819200422; -0.00267628709748107, -0.000133465405353007,
              -0.000135170226126749, -0.333427978079296, 0.724667968760348,
              0.333427978079296, -0.724667968760348; -0.0016474047303153, -8.21554385248641e-05,
              -8.32048512764505e-05, -0.417961039864505, 2.28072766247436,
              0.417961039864505, -2.28072766247436; -0.0021609822909178, -0.000107767353393988,
              -0.000109143920020459, -0.333417357151117, 0.725270678908562,
              0.333417357151117, -0.725270678908562; -0.00133020573597514, -6.63368470153726e-05,
              -6.7184200938715e-05, -0.417954502087844, 2.28109866435608,
              0.417954502087844, -2.28109866435608; -0.0017448966764648, -8.70173242783555e-05,
              -8.81288403428579e-05, -0.333408781226012, 0.72575734043231,
              0.333408781226012, -0.72575734043231; -0.00107408171620492, -5.35640409321061e-05,
              -5.42482413768963e-05, -0.41794922312521, 2.28139823180422,
              0.41794922312521, -2.28139823180422; -0.00140892612786974, -7.02626025980412e-05,
              -7.11601021726277e-05, -0.333401856549545, 0.726150297875284,
              0.333401856549545, -0.726150297875284; -0.000867273010396394, -4.3250570536032e-05,
              -4.38030318343813e-05, -0.417944960598676, 2.28164011913797,
              0.417944960598676, -2.28164011913797; -0.00113764491649776, -5.67339132154659e-05,
              -5.74586040338064e-05, -0.3333962651826, 0.726467593458464,
              0.3333962651826, -0.726467593458464; -0.000700284217870924, -3.49229038575214e-05,
              -3.53689916794422e-05, -0.417941518798892, 2.28183543235573,
              0.417941518798892, -2.28183543235573; -0.000918597455489066, -4.58101008178388e-05,
              -4.63952562842679e-05, -0.333391750403538, 0.726723795469408,
              0.333391750403538, -0.726723795469408; -0.000565448226706549, -2.81986849821004e-05,
              -2.85588809731331e-05, -0.417938739699299, 2.28199313905511,
              0.417938739699299, -2.28199313905511; -0.000741726414801455, -3.69896102348971e-05,
              -3.74620971372093e-05, -0.333388104921104, 0.726930667149605,
              0.333388104921104, -0.726930667149605; -0.000456574186489112, -2.27691785873208e-05,
              -2.30600207613961e-05, -0.41793649570051, 2.28212048017066,
              0.41793649570051, -2.28212048017066; -0.000598910949651294, -2.98674580693523e-05,
              -3.02489701386472e-05, -0.33338516135687, 0.727097706791137,
              0.33338516135687, -0.727097706791137; -0.000368663262032616, -1.83850946904223e-05,
              -1.86199367550948e-05, -0.41793468377172, 2.28222330243359,
              0.41793468377172, -2.28222330243359; -0.000483593840605273, -2.41166383170731e-05,
              -2.44246922722312e-05, -0.33338278456023, 0.727232583840603,
              0.33338278456023, -0.727232583840603; -0.000297679117204692, -1.484514276523e-05,
              -1.50347672428869e-05, -0.417933220720154, 2.28230632681819,
              0.417933220720154, -2.28230632681819; -0.000390480425858837, -1.94731082359273e-05,
              -1.97218480450346e-05, -0.333380865403106, 0.727341491033565,
              0.333380865403106, -0.727341491033565; -0.00024036259086734, -1.19867897027947e-05,
              -1.21399029986466e-05, -0.417932039371364, 2.28237336530036,
              0.417932039371364, -2.28237336530036; -0.000315295502498665, -1.57236651055005e-05,
              -1.59245113910254e-05, -0.33337931576945, 0.727429428727381,
              0.33337931576945, -0.727429428727381; -0.00019408205597685, -9.67879727742045e-06,
              -9.80242942479035e-06, -0.417931085484983, 2.28242749588033,
              0.417931085484983, -2.28242749588033; -0.000254587035130473, -1.26961572520712e-05,
              -1.28583316565379e-05, -0.33337806450949, 0.727500434487272,
              0.33337806450949, -0.727500434487272; -0.000156712591240916, -7.81519648380584e-06,
              -7.9150239205954e-06, -0.417930315264337, 2.28247120390584,
              0.417930315264337, -2.28247120390584; -0.000205567659363613, -1.02515798885166e-05,
              -1.03825284763652e-05, -0.333377054172961, 0.727557768466807,
              0.333377054172961, -0.727557768466807; -0.000126538417628737, -6.31042208343156e-06,
              -6.39102827969988e-06, -0.417929693345568, 2.28250649618416,
              0.417929693345568, -2.28250649618416; -0.000165986702954365, -8.2776928580885e-06,
              -8.38342799376506e-06, -0.333376238371343, 0.727604063094375,
              0.333376238371343, -0.727604063094375; -0.000102174120210732, -5.09538396809039e-06,
              -5.16046987118279e-06, -0.417929191173941, 2.28253499312251,
              0.417929191173941, -2.28253499312251; -0.000134026848595511, -6.68386724758424e-06,
              -6.76924364682776e-06, -0.333375579647975, 0.727641443938319,
              0.333375579647975, -0.727641443938319; -8.25010383128598e-05, -4.11429496141629e-06,
              -4.16684892100585e-06, -0.417928785692783, 2.28255800312738,
              0.417928785692783, -2.28255800312738; -0.000108220693734623, -5.39692425766634e-06,
              -5.46586188659309e-06, -0.333375047758278, 0.727671627300133,
              0.333375047758278, -0.727671627300133; -6.66159034074564e-05, -3.32210941030994e-06,
              -3.36454438527863e-06, -0.417928458284859, 2.28257658267853,
              0.417928458284859, -2.28257658267853; -8.73833763543048e-05, -4.35777527650848e-06,
              -4.41343933266628e-06, -0.333374618281105, 0.727695999016614,
              0.333374618281105, -0.727695999016614; -5.37893665042498e-05, -2.68245496192395e-06,
              -2.71671930879062e-06, -0.417928193917584, 2.28259158483621,
              0.417928193917584, -2.28259158483621; -7.05581732991161e-05, -3.51870888934062e-06,
              -3.56365512837113e-06, -0.333374271497472, 0.727715678089073,
              0.333374271497472, -0.727715678089073; -4.34325108710401e-05, -2.1659625659587e-06,
              -2.1936294955861e-06, -0.417927980452818, 2.28260369840844,
              0.417927980452818, -2.28260369840844; -5.69725733544839e-05, -2.84120025983644e-06,
              -2.87749234026372e-06, -0.333373991485177, 0.72773156806109,
              0.333373991485177, -0.72773156806109; -3.50698125514078e-05, -1.74891802610901e-06,
              -1.77125783599905e-06, -0.417927808089555, 2.28261347957694,
              0.417927808089555, -2.28261347957694; -4.60028082199899e-05, -2.29414230343089e-06,
              -2.32344653733679e-06, -0.333373765387756, 0.727744398503744,
              0.333373765387756, -0.727744398503744; -2.83173071905209e-05, -1.41217318808795e-06,
              -1.4302115867337e-06, -0.417927668913918, 2.28262137743362,
              0.417927668913918, -2.28262137743362; 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0],
          H=[1.24209507539066, 0.172147848655681, 0, 0, 0, 0, 0, 0, 0, 0;
              0.172147848655681, 4.39000872639142, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
              1.24209507539066, 0.172147848655681, 0, 0, 0, 0, 0, 0; 0, 0,
              0.172147848655681, 4.39000872639142, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              1.24209507539066, 0.172147848655681, 0, 0, 0, 0; 0, 0, 0, 0,
              0.172147848655681, 4.39000872639142, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              1.24209507539066, 0.172147848655681, 0, 0; 0, 0, 0, 0, 0, 0,
              0.172147848655681, 4.39000872639142, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0,
              1.24209507539066, 0.172147848655681; 0, 0, 0, 0, 0, 0, 0, 0,
              0.172147848655681, 4.39000872639142],
          J={0,0,0,0,0,0,0,0,0,0},
          G=[1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 1, 0, 0, 0, 0, 0, 0, 0, 0; -0.196917247583181,
              0.128440349918156, 1, 0, 0, 0, 0, 0, 0, 0; -0.107504619443718, -0.015509714001478,
              0, 1, 0, 0, 0, 0, 0, 0; -0.16057090016955, 0.111493381007763, -0.196917247583181,
              0.128440349918156, 1, 0, 0, 0, 0, 0; -0.0964856358673057,
              0.0655523610830748, -0.107504619443718, -0.015509714001478, 0, 1,
              0, 0, 0, 0; -0.129907724696675, 0.0902901315160865, -0.16057090016955,
              0.111493381007763, -0.196917247583181, 0.128440349918156, 1, 0, 0,
              0; -0.0796286196449086, 0.0554313692443655, -0.0964856358673057,
              0.0655523610830748, -0.107504619443718, -0.015509714001478, 0, 1,
              0, 0; -0.104930659447997, 0.0729191663319995, -0.129907724696675,
              0.0902901315160865, -0.16057090016955, 0.111493381007763, -0.196917247583181,
              0.128440349918156, 1, 0; -0.0645440160695264, 0.0448732572323308,
              -0.0796286196449086, 0.0554313692443655, -0.0964856358673057,
              0.0655523610830748, -0.107504619443718, -0.015509714001478, 0, 1;
              -0.0847317970533986, 0.0588802604970015, -0.104930659447997,
              0.0729191663319995, -0.129907724696675, 0.0902901315160865, -0.16057090016955,
              0.111493381007763, -0.196917247583181, 0.128440349918156; -0.0521507406440368,
              0.0362425847623533, -0.0645440160695264, 0.0448732572323308, -0.0796286196449086,
              0.0554313692443655, -0.0964856358673057, 0.0655523610830748, -0.107504619443718,
              -0.015509714001478; -0.068417826596882, 0.0475433405427452, -0.0847317970533986,
              0.0588802604970015, -0.104930659447997, 0.0729191663319995, -0.129907724696675,
              0.0902901315160865, -0.16057090016955, 0.111493381007763; -0.0421141229811648,
              0.0292653886308965, -0.0521507406440368, 0.0362425847623533, -0.0645440160695264,
              0.0448732572323308, -0.0796286196449086, 0.0554313692443655, -0.0964856358673057,
              0.0655523610830748; -0.0552444332339097, 0.0383891454381211, -0.068417826596882,
              0.0475433405427452, -0.0847317970533986, 0.0588802604970015, -0.104930659447997,
              0.0729191663319995, -0.129907724696675, 0.0902901315160865; -0.0340059237939632,
              0.0236306432673426, -0.0421141229811648, 0.0292653886308965, -0.0521507406440368,
              0.0362425847623533, -0.0645440160695264, 0.0448732572323308, -0.0796286196449086,
              0.0554313692443655; -0.0446074252224245, 0.0309975231827265, -0.0552444332339097,
              0.0383891454381211, -0.068417826596882, 0.0475433405427452, -0.0847317970533986,
              0.0588802604970015, -0.104930659447997, 0.0729191663319995; -0.0274583540085353,
              0.0190807093114352, -0.0340059237939632, 0.0236306432673426, -0.0421141229811648,
              0.0292653886308965, -0.0521507406440368, 0.0362425847623533, -0.0645440160695264,
              0.0448732572323308; -0.0360185051930507, 0.0250291158252674, -0.0446074252224245,
              0.0309975231827265, -0.0552444332339097, 0.0383891454381211, -0.068417826596882,
              0.0475433405427452, -0.0847317970533986, 0.0588802604970015; -0.0221714066975891,
              0.015406823298461, -0.0274583540085353, 0.0190807093114352, -0.0340059237939632,
              0.0236306432673426, -0.0421141229811648, 0.0292653886308965, -0.0521507406440368,
              0.0362425847623533; -0.0290833343689699, 0.02020989312235, -0.0360185051930507,
              0.0250291158252674, -0.0446074252224245, 0.0309975231827265, -0.0552444332339097,
              0.0383891454381211, -0.068417826596882, 0.0475433405427452; -0.0179024222817209,
              0.0124403220296684, -0.0221714066975891, 0.015406823298461, -0.0274583540085353,
              0.0190807093114352, -0.0340059237939632, 0.0236306432673426, -0.0421141229811648,
              0.0292653886308965; -0.0234834934867533, 0.0163185859993666, -0.0290833343689699,
              0.02020989312235, -0.0360185051930507, 0.0250291158252674, -0.0446074252224245,
              0.0309975231827265, -0.0552444332339097, 0.0383891454381211; -0.0144554065871353,
              0.0100450044265642, -0.0179024222817209, 0.0124403220296684, -0.0221714066975891,
              0.015406823298461, -0.0274583540085353, 0.0190807093114352, -0.0340059237939632,
              0.0236306432673426; -0.0189618720704232, 0.0131765293019049, -0.0234834934867533,
              0.0163185859993666, -0.0290833343689699, 0.02020989312235, -0.0360185051930507,
              0.0250291158252674, -0.0446074252224245, 0.0309975231827265; -0.0116720951791165,
              0.00811089240683056, -0.0144554065871353, 0.0100450044265642, -0.0179024222817209,
              0.0124403220296684, -0.0221714066975891, 0.015406823298461, -0.0274583540085353,
              0.0190807093114352; -0.0153108647376083, 0.0106394588623783, -0.0189618720704232,
              0.0131765293019049, -0.0234834934867533, 0.0163185859993666, -0.0290833343689699,
              0.02020989312235, -0.0360185051930507, 0.0250291158252674; -0.00942469551024343,
              0.00654918333458082, -0.0116720951791165, 0.00811089240683056, -0.0144554065871353,
              0.0100450044265642, -0.0179024222817209, 0.0124403220296684, -0.0221714066975891,
              0.015406823298461; -0.0123628393934212, 0.00859088780431706, -0.0153108647376083,
              0.0106394588623783, -0.0189618720704232, 0.0131765293019049, -0.0234834934867533,
              0.0163185859993666, -0.0290833343689699, 0.02020989312235; -0.00761002065724444,
              0.0052881730139086, -0.00942469551024343, 0.00654918333458082, -0.0116720951791165,
              0.00811089240683056, -0.0144554065871353, 0.0100450044265642, -0.0179024222817209,
              0.0124403220296684; -0.00998244060580102, 0.00693675817735377, -0.0123628393934212,
              0.00859088780431706, -0.0153108647376083, 0.0106394588623783, -0.0189618720704232,
              0.0131765293019049, -0.0234834934867533, 0.0163185859993666; -0.00614475176804639,
              0.00426996350472721, -0.00761002065724444, 0.0052881730139086, -0.00942469551024343,
              0.00654918333458082, -0.0116720951791165, 0.00811089240683056, -0.0144554065871353,
              0.0100450044265642; -0.0080603749087991, 0.00560112238771041, -0.00998244060580102,
              0.00693675817735377, -0.0123628393934212, 0.00859088780431706, -0.0153108647376083,
              0.0106394588623783, -0.0189618720704232, 0.0131765293019049; -0.00496161258833652,
              0.00344780480587174, -0.00614475176804639, 0.00426996350472721, -0.00761002065724444,
              0.0052881730139086, -0.00942469551024343, 0.00654918333458082, -0.0116720951791165,
              0.00811089240683056; -0.006508392710359, 0.00452265614570941, -0.0080603749087991,
              0.00560112238771041, -0.00998244060580102, 0.00693675817735377, -0.0123628393934212,
              0.00859088780431706, -0.0153108647376083, 0.0106394588623783; -0.00400628054736198,
              0.00278394837947081, -0.00496161258833652, 0.00344780480587174, -0.00614475176804639,
              0.00426996350472721, -0.00761002065724444, 0.0052881730139086, -0.00942469551024343,
              0.00654918333458082; -0.0052552364066852, 0.00365184282657393, -0.006508392710359,
              0.00452265614570941, -0.0080603749087991, 0.00560112238771041, -0.00998244060580102,
              0.00693675817735377, -0.0123628393934212, 0.00859088780431706; -0.00323489259558392,
              0.00224791396727511, -0.00400628054736198, 0.00278394837947081, -0.00496161258833652,
              0.00344780480587174, -0.00614475176804639, 0.00426996350472721, -0.00761002065724444,
              0.0052881730139086; -0.00424336866553741, 0.00294869996752928, -0.0052552364066852,
              0.00365184282657393, -0.006508392710359, 0.00452265614570941, -0.0080603749087991,
              0.00560112238771041, -0.00998244060580102, 0.00693675817735377; -0.00261203127969999,
              0.0018150901221922, -0.00323489259558392, 0.00224791396727511, -0.00400628054736198,
              0.00278394837947081, -0.00496161258833652, 0.00344780480587174, -0.00614475176804639,
              0.00426996350472721; -0.00342633066112097, 0.00238094351576036, -0.00424336866553741,
              0.00294869996752928, -0.0052552364066852, 0.00365184282657393, -0.006508392710359,
              0.00452265614570941, -0.0080603749087991, 0.00560112238771041; -0.00210909858814016,
              0.00146560420000116, -0.00261203127969999, 0.0018150901221922, -0.00323489259558392,
              0.00224791396727511, -0.00400628054736198, 0.00278394837947081, -0.00496161258833652,
              0.00344780480587174; -0.00276660896675846, 0.00192250554063365, -0.00342633066112097,
              0.00238094351576036, -0.00424336866553741, 0.00294869996752928, -0.0052552364066852,
              0.00365184282657393, -0.006508392710359, 0.00452265614570941; -0.00170300290393372,
              0.00118340992813446, -0.00210909858814016, 0.00146560420000116, -0.00261203127969999,
              0.0018150901221922, -0.00323489259558392, 0.00224791396727511, -0.00400628054736198,
              0.00278394837947081; -0.0022339131660002, 0.00155233735252503, -0.00276660896675846,
              0.00192250554063365, -0.00342633066112097, 0.00238094351576036, -0.00424336866553741,
              0.00294869996752928, -0.0052552364066852, 0.00365184282657393; -0.00137509877779784,
              0.000955550658224163, -0.00170300290393372, 0.00118340992813446,
              -0.00210909858814016, 0.00146560420000116, -0.00261203127969999,
              0.0018150901221922, -0.00323489259558392, 0.00224791396727511; -0.00180378510052907,
              0.00125344307473371, -0.0022339131660002, 0.00155233735252503, -0.00276660896675846,
              0.00192250554063365, -0.00342633066112097, 0.00238094351576036, -0.00424336866553741,
              0.00294869996752928; -0.00111033084226304, 0.000771564475440913,
              -0.00137509877779784, 0.000955550658224163, -0.00170300290393372,
              0.00118340992813446, -0.00210909858814016, 0.00146560420000116, -0.00261203127969999,
              0.0018150901221922; -0.0014564758999636, 0.00101209929596959, -0.00180378510052907,
              0.00125344307473371, -0.0022339131660002, 0.00155233735252503, -0.00276660896675846,
              0.00192250554063365, -0.00342633066112097, 0.00238094351576036; -0.000896542560567808,
              0.000623003850856807, -0.00111033084226304, 0.000771564475440913,
              -0.00137509877779784, 0.000955550658224163, -0.00170300290393372,
              0.00118340992813446, -0.00210909858814016, 0.00146560420000116; -0.00117603923358307,
              0.000817224974592298, -0.0014564758999636, 0.00101209929596959, -0.00180378510052907,
              0.00125344307473371, -0.0022339131660002, 0.00155233735252503, -0.00276660896675846,
              0.00192250554063365; -0.000723918072266848, 0.000503047782183868,
              -0.000896542560567808, 0.000623003850856807, -0.00111033084226304,
              0.000771564475440913, -0.00137509877779784, 0.000955550658224163,
              -0.00170300290393372, 0.00118340992813446; -0.000949599151596826,
              0.000659872664428221, -0.00117603923358307, 0.000817224974592298,
              -0.0014564758999636, 0.00101209929596959, -0.00180378510052907,
              0.00125344307473371, -0.0022339131660002, 0.00155233735252503; -0.000584531508490402,
              0.000406188614744649, -0.000723918072266848, 0.000503047782183868,
              -0.000896542560567808, 0.000623003850856807, -0.00111033084226304,
              0.000771564475440913, -0.00137509877779784, 0.000955550658224163;
              -0.000766758899672132, 0.000532817702343018, -0.000949599151596826,
              0.000659872664428221, -0.00117603923358307, 0.000817224974592298,
              -0.0014564758999636, 0.00101209929596959, -0.00180378510052907,
              0.00125344307473371; -0.000471983084146734, 0.000327979163394606,
              -0.000584531508490402, 0.000406188614744649, -0.000723918072266848,
              0.000503047782183868, -0.000896542560567808, 0.000623003850856807,
              -0.00111033084226304, 0.000771564475440913; -0.000619123563071624,
              0.000430226495555908, -0.000766758899672132, 0.000532817702343018,
              -0.000949599151596826, 0.000659872664428221, -0.00117603923358307,
              0.000817224974592298, -0.0014564758999636, 0.00101209929596959; -0.000381105258630076,
              0.000264828524769582, -0.000471983084146734, 0.000327979163394606,
              -0.000584531508490402, 0.000406188614744649, -0.000723918072266848,
              0.000503047782183868, -0.000896542560567808, 0.000623003850856807;
              -0.000499914623116092, 0.000347388678462408, -0.000619123563071624,
              0.000430226495555908, -0.000766758899672132, 0.000532817702343018,
              -0.000949599151596826, 0.000659872664428221, -0.00117603923358307,
              0.000817224974592298; -0.000307725473717069, 0.000213837204796001,
              -0.000381105258630076, 0.000264828524769582, -0.000471983084146734,
              0.000327979163394606, -0.000584531508490402, 0.000406188614744649,
              -0.000723918072266848, 0.000503047782183868; -0.000403658728744577,
              0.000280500841232304, -0.000499914623116092, 0.000347388678462408,
              -0.000619123563071624, 0.000430226495555908, -0.000766758899672132,
              0.000532817702343018, -0.000949599151596826, 0.000659872664428221;
              -0.0002484745750158, 0.000172663991519613, -0.000307725473717069,
              0.000213837204796001, -0.000381105258630076, 0.000264828524769582,
              -0.000471983084146734, 0.000327979163394606, -0.000584531508490402,
              0.000406188614744649; -0.000325936393450625, 0.000226491900312591,
              -0.000403658728744577, 0.000280500841232304, -0.000499914623116092,
              0.000347388678462408, -0.000619123563071624, 0.000430226495555908,
              -0.000766758899672132, 0.000532817702343018; -0.000200632120843032,
              0.000139418460861037, -0.0002484745750158, 0.000172663991519613,
              -0.000307725473717069, 0.000213837204796001, -0.000381105258630076,
              0.000264828524769582, -0.000471983084146734, 0.000327979163394606;
              -0.000263179079283141, 0.000182882092908678, -0.000325936393450625,
              0.000226491900312591, -0.000403658728744577, 0.000280500841232304,
              -0.000499914623116092, 0.000347388678462408, -0.000619123563071624,
              0.000430226495555908; -0.000162001476052081, 0.000112574179814746,
              -0.000200632120843032, 0.000139418460861037, -0.0002484745750158,
              0.000172663991519613, -0.000307725473717069, 0.000213837204796001,
              -0.000381105258630076, 0.000264828524769582; -0.000212505351240607,
              0.000147669121326185, -0.000263179079283141, 0.000182882092908678,
              -0.000325936393450625, 0.000226491900312591, -0.000403658728744577,
              0.000280500841232304, -0.000499914623116092, 0.000347388678462408;
              -0.000130808955877936, 9.08986219091476e-05, -0.000162001476052081,
              0.000112574179814746, -0.000200632120843032, 0.000139418460861037,
              -0.0002484745750158, 0.000172663991519613, -0.000307725473717069,
              0.000213837204796001; -0.00017158857926283, 0.000119236219612472,
              -0.000212505351240607, 0.000147669121326185, -0.000263179079283141,
              0.000182882092908678, -0.000325936393450625, 0.000226491900312591,
              -0.000403658728744577, 0.000280500841232304; -0.00010562238909709,
              7.33965770710405e-05, -0.000130808955877936, 9.08986219091476e-05,
              -0.000162001476052081, 0.000112574179814746, -0.000200632120843032,
              0.000139418460861037, -0.0002484745750158, 0.000172663991519613;
              -0.000138550113498555, 9.62779214760087e-05, -0.00017158857926283,
              0.000119236219612472, -0.000212505351240607, 0.000147669121326185,
              -0.000263179079283141, 0.000182882092908678, -0.000325936393450625,
              0.000226491900312591; -8.52853614165943e-05, 5.92644576188351e-05,
              -0.00010562238909709, 7.33965770710405e-05, -0.000130808955877936,
              9.08986219091476e-05, -0.000162001476052081, 0.000112574179814746,
              -0.000200632120843032, 0.000139418460861037; -0.000111873028105553,
              7.77401211969565e-05, -0.000138550113498555, 9.62779214760087e-05,
              -0.00017158857926283, 0.000119236219612472, -0.000212505351240607,
              0.000147669121326185, -0.000263179079283141, 0.000182882092908678;
              -6.88641199478368e-05, 4.7853402393073e-05, -8.52853614165943e-05,
              5.92644576188351e-05, -0.00010562238909709, 7.33965770710405e-05,
              -0.000130808955877936, 9.08986219091476e-05, -0.000162001476052081,
              0.000112574179814746; -9.03324732219462e-05, 6.27716754897275e-05,
              -0.000111873028105553, 7.77401211969565e-05, -0.000138550113498555,
              9.62779214760087e-05, -0.00017158857926283, 0.000119236219612472,
              -0.000212505351240607, 0.000147669121326185; -5.56047009407096e-05,
              3.86394849898296e-05, -6.88641199478368e-05, 4.7853402393073e-05,
              -8.52853614165943e-05, 5.92644576188351e-05, -0.00010562238909709,
              7.33965770710405e-05, -0.000130808955877936, 9.08986219091476e-05;
              -7.29394372939889e-05, 5.06853241687758e-05, -9.03324732219462e-05,
              6.27716754897275e-05, -0.000111873028105553, 7.77401211969565e-05,
              -0.000138550113498555, 9.62779214760087e-05, -0.00017158857926283,
              0.000119236219612472; -4.48983123438997e-05, 3.11996582398785e-05,
              -5.56047009407096e-05, 3.86394849898296e-05, -6.88641199478368e-05,
              4.7853402393073e-05, -8.52853614165943e-05, 5.92644576188351e-05,
              -0.00010562238909709, 7.33965770710405e-05; -5.88953376676862e-05,
              4.09261353317596e-05, -7.29394372939889e-05, 5.06853241687758e-05,
              -9.03324732219462e-05, 6.27716754897275e-05, -0.000111873028105553,
              7.77401211969565e-05, -0.000138550113498555, 9.62779214760087e-05;
              -3.6253381768564e-05, 2.51923304500936e-05, -4.48983123438997e-05,
              3.11996582398785e-05, -5.56047009407096e-05, 3.86394849898296e-05,
              -6.88641199478368e-05, 4.7853402393073e-05, -8.52853614165943e-05,
              5.92644576188351e-05; -4.75553545198056e-05, 3.30460262543875e-05,
              -5.88953376676862e-05, 4.09261353317596e-05, -7.29394372939889e-05,
              5.06853241687758e-05, -9.03324732219462e-05, 6.27716754897275e-05,
              -0.000111873028105553, 7.77401211969565e-05; -2.92729864675152e-05,
              2.03416815859707e-05, -3.6253381768564e-05, 2.51923304500936e-05,
              -4.48983123438997e-05, 3.11996582398785e-05, -5.56047009407096e-05,
              3.86394849898296e-05, -6.88641199478368e-05, 4.7853402393073e-05;
              -3.83988246449126e-05, 2.66831901510675e-05, -4.75553545198056e-05,
              3.30460262543875e-05, -5.88953376676862e-05, 4.09261353317596e-05,
              -7.29394372939889e-05, 5.06853241687758e-05, -9.03324732219462e-05,
              6.27716754897275e-05; -2.36366290515378e-05, 1.64249992895548e-05,
              -2.92729864675152e-05, 2.03416815859707e-05, -3.6253381768564e-05,
              2.51923304500936e-05, -4.48983123438997e-05, 3.11996582398785e-05,
              -5.56047009407096e-05, 3.86394849898296e-05; -3.10053357608062e-05,
              2.15454842030665e-05, -3.83988246449126e-05, 2.66831901510675e-05,
              -4.75553545198056e-05, 3.30460262543875e-05, -5.88953376676862e-05,
              4.09261353317596e-05, -7.29394372939889e-05, 5.06853241687758e-05;
              -1.90855221943272e-05, 1.32624532795725e-05, -2.36366290515378e-05,
              1.64249992895548e-05, -2.92729864675152e-05, 2.03416815859707e-05,
              -3.6253381768564e-05, 2.51923304500936e-05, -4.48983123438997e-05,
              3.11996582398785e-05; -2.5035423727942e-05, 1.73970161332459e-05,
              -3.10053357608062e-05, 2.15454842030665e-05, -3.83988246449126e-05,
              2.66831901510675e-05, -4.75553545198056e-05, 3.30460262543875e-05,
              -5.88953376676862e-05, 4.09261353317596e-05; -1.54107066890089e-05,
              1.07088386362792e-05, -1.90855221943272e-05, 1.32624532795725e-05,
              -2.36366290515378e-05, 1.64249992895548e-05, -2.92729864675152e-05,
              2.03416815859707e-05, -3.6253381768564e-05, 2.51923304500936e-05;
              -2.02149864163027e-05, 1.40473134642916e-05, -2.5035423727942e-05,
              1.73970161332459e-05, -3.10053357608062e-05, 2.15454842030665e-05,
              -3.83988246449126e-05, 2.66831901510675e-05, -4.75553545198056e-05,
              3.30460262543875e-05; -1.2443457309502e-05, 8.64690887277255e-06,
              -1.54107066890089e-05, 1.07088386362792e-05, -1.90855221943272e-05,
              1.32624532795725e-05, -2.36366290515378e-05, 1.64249992895548e-05,
              -2.92729864675152e-05, 2.03416815859707e-05; -1.6322698599074e-05,
              1.13425781785057e-05, -2.02149864163027e-05, 1.40473134642916e-05,
              -2.5035423727942e-05, 1.73970161332459e-05, -3.10053357608062e-05,
              2.15454842030665e-05, -3.83988246449126e-05, 2.66831901510675e-05;
              -1.00475359721065e-05, 6.98199268786545e-06, -1.2443457309502e-05,
              8.64690887277255e-06, -1.54107066890089e-05, 1.07088386362792e-05,
              -1.90855221943272e-05, 1.32624532795725e-05, -2.36366290515378e-05,
              1.64249992895548e-05; -1.317985004142e-05, 9.15862524621201e-06,
              -1.6322698599074e-05, 1.13425781785057e-05, -2.02149864163027e-05,
              1.40473134642916e-05, -2.5035423727942e-05, 1.73970161332459e-05,
              -3.10053357608062e-05, 2.15454842030665e-05; -8.11293650950883e-06,
              5.6376472344823e-06, -1.00475359721065e-05, 6.98199268786545e-06,
              -1.2443457309502e-05, 8.64690887277255e-06, -1.54107066890089e-05,
              1.07088386362792e-05, -1.90855221943272e-05, 1.32624532795725e-05;
              -1.06421402110661e-05, 7.39518080285361e-06, -1.317985004142e-05,
              9.15862524621201e-06, -1.6322698599074e-05, 1.13425781785057e-05,
              -2.02149864163027e-05, 1.40473134642916e-05, -2.5035423727942e-05,
              1.73970161332459e-05; -6.5508338551907e-06, 4.55214832804167e-06,
              -8.11293650950883e-06, 5.6376472344823e-06, -1.00475359721065e-05,
              6.98199268786545e-06, -1.2443457309502e-05, 8.64690887277255e-06,
              -1.54107066890089e-05, 1.07088386362792e-05; -8.5930528735962e-06,
              5.97127818168057e-06, -1.06421402110661e-05, 7.39518080285361e-06,
              -1.317985004142e-05, 9.15862524621201e-06, -1.6322698599074e-05,
              1.13425781785057e-05, -2.02149864163027e-05, 1.40473134642916e-05;
              -5.28950573544064e-06, 3.67565644649554e-06, -6.5508338551907e-06,
              4.55214832804167e-06, -8.11293650950883e-06, 5.6376472344823e-06,
              -1.00475359721065e-05, 6.98199268786545e-06, -1.2443457309502e-05,
              8.64690887277255e-06; -6.93850637408794e-06, 4.82154041578748e-06,
              -8.5930528735962e-06, 5.97127818168057e-06, -1.06421402110661e-05,
              7.39518080285361e-06, -1.317985004142e-05, 9.15862524621201e-06,
              -1.6322698599074e-05, 1.13425781785057e-05; -4.27103961781746e-06,
              2.96792840194563e-06, -5.28950573544064e-06, 3.67565644649554e-06,
              -6.5508338551907e-06, 4.55214832804167e-06, -8.11293650950883e-06,
              5.6376472344823e-06, -1.00475359721065e-05, 6.98199268786545e-06;
              -5.6025339784871e-06, 3.89317852455659e-06, -6.93850637408794e-06,
              4.82154041578748e-06, -8.5930528735962e-06, 5.97127818168057e-06,
              -1.06421402110661e-05, 7.39518080285361e-06, -1.317985004142e-05,
              9.15862524621201e-06; -3.44867371912334e-06, 2.39646961768527e-06,
              -4.27103961781746e-06, 2.96792840194563e-06, -5.28950573544064e-06,
              3.67565644649554e-06, -6.5508338551907e-06, 4.55214832804167e-06,
              -8.11293650950883e-06, 5.6376472344823e-06; -1, 0, 0, 0, 0, 0, 0,
              0, 0, 0; 0, -1, 0, 0, 0, 0, 0, 0, 0, 0; 0.196917247583181, -0.128440349918156,
              -1, 0, 0, 0, 0, 0, 0, 0; 0.107504619443718, 0.015509714001478, 0,
              -1, 0, 0, 0, 0, 0, 0; 0.16057090016955, -0.111493381007763,
              0.196917247583181, -0.128440349918156, -1, 0, 0, 0, 0, 0;
              0.0964856358673057, -0.0655523610830748, 0.107504619443718,
              0.015509714001478, 0, -1, 0, 0, 0, 0; 0.129907724696675, -0.0902901315160865,
              0.16057090016955, -0.111493381007763, 0.196917247583181, -0.128440349918156,
              -1, 0, 0, 0; 0.0796286196449086, -0.0554313692443655,
              0.0964856358673057, -0.0655523610830748, 0.107504619443718,
              0.015509714001478, 0, -1, 0, 0; 0.104930659447997, -0.0729191663319995,
              0.129907724696675, -0.0902901315160865, 0.16057090016955, -0.111493381007763,
              0.196917247583181, -0.128440349918156, -1, 0; 0.0645440160695264,
              -0.0448732572323308, 0.0796286196449086, -0.0554313692443655,
              0.0964856358673057, -0.0655523610830748, 0.107504619443718,
              0.015509714001478, 0, -1; 0.0847317970533986, -0.0588802604970015,
              0.104930659447997, -0.0729191663319995, 0.129907724696675, -0.0902901315160865,
              0.16057090016955, -0.111493381007763, 0.196917247583181, -0.128440349918156;
              0.0521507406440368, -0.0362425847623533, 0.0645440160695264, -0.0448732572323308,
              0.0796286196449086, -0.0554313692443655, 0.0964856358673057, -0.0655523610830748,
              0.107504619443718, 0.015509714001478; 0.068417826596882, -0.0475433405427452,
              0.0847317970533986, -0.0588802604970015, 0.104930659447997, -0.0729191663319995,
              0.129907724696675, -0.0902901315160865, 0.16057090016955, -0.111493381007763;
              0.0421141229811648, -0.0292653886308965, 0.0521507406440368, -0.0362425847623533,
              0.0645440160695264, -0.0448732572323308, 0.0796286196449086, -0.0554313692443655,
              0.0964856358673057, -0.0655523610830748; 0.0552444332339097, -0.0383891454381211,
              0.068417826596882, -0.0475433405427452, 0.0847317970533986, -0.0588802604970015,
              0.104930659447997, -0.0729191663319995, 0.129907724696675, -0.0902901315160865;
              0.0340059237939632, -0.0236306432673426, 0.0421141229811648, -0.0292653886308965,
              0.0521507406440368, -0.0362425847623533, 0.0645440160695264, -0.0448732572323308,
              0.0796286196449086, -0.0554313692443655; 0.0446074252224245, -0.0309975231827265,
              0.0552444332339097, -0.0383891454381211, 0.068417826596882, -0.0475433405427452,
              0.0847317970533986, -0.0588802604970015, 0.104930659447997, -0.0729191663319995;
              0.0274583540085353, -0.0190807093114352, 0.0340059237939632, -0.0236306432673426,
              0.0421141229811648, -0.0292653886308965, 0.0521507406440368, -0.0362425847623533,
              0.0645440160695264, -0.0448732572323308; 0.0360185051930507, -0.0250291158252674,
              0.0446074252224245, -0.0309975231827265, 0.0552444332339097, -0.0383891454381211,
              0.068417826596882, -0.0475433405427452, 0.0847317970533986, -0.0588802604970015;
              0.0221714066975891, -0.015406823298461, 0.0274583540085353, -0.0190807093114352,
              0.0340059237939632, -0.0236306432673426, 0.0421141229811648, -0.0292653886308965,
              0.0521507406440368, -0.0362425847623533; 0.0290833343689699, -0.02020989312235,
              0.0360185051930507, -0.0250291158252674, 0.0446074252224245, -0.0309975231827265,
              0.0552444332339097, -0.0383891454381211, 0.068417826596882, -0.0475433405427452;
              0.0179024222817209, -0.0124403220296684, 0.0221714066975891, -0.015406823298461,
              0.0274583540085353, -0.0190807093114352, 0.0340059237939632, -0.0236306432673426,
              0.0421141229811648, -0.0292653886308965; 0.0234834934867533, -0.0163185859993666,
              0.0290833343689699, -0.02020989312235, 0.0360185051930507, -0.0250291158252674,
              0.0446074252224245, -0.0309975231827265, 0.0552444332339097, -0.0383891454381211;
              0.0144554065871353, -0.0100450044265642, 0.0179024222817209, -0.0124403220296684,
              0.0221714066975891, -0.015406823298461, 0.0274583540085353, -0.0190807093114352,
              0.0340059237939632, -0.0236306432673426; 0.0189618720704232, -0.0131765293019049,
              0.0234834934867533, -0.0163185859993666, 0.0290833343689699, -0.02020989312235,
              0.0360185051930507, -0.0250291158252674, 0.0446074252224245, -0.0309975231827265;
              0.0116720951791165, -0.00811089240683056, 0.0144554065871353, -0.0100450044265642,
              0.0179024222817209, -0.0124403220296684, 0.0221714066975891, -0.015406823298461,
              0.0274583540085353, -0.0190807093114352; 0.0153108647376083, -0.0106394588623783,
              0.0189618720704232, -0.0131765293019049, 0.0234834934867533, -0.0163185859993666,
              0.0290833343689699, -0.02020989312235, 0.0360185051930507, -0.0250291158252674;
              0.00942469551024343, -0.00654918333458082, 0.0116720951791165, -0.00811089240683056,
              0.0144554065871353, -0.0100450044265642, 0.0179024222817209, -0.0124403220296684,
              0.0221714066975891, -0.015406823298461; 0.0123628393934212, -0.00859088780431706,
              0.0153108647376083, -0.0106394588623783, 0.0189618720704232, -0.0131765293019049,
              0.0234834934867533, -0.0163185859993666, 0.0290833343689699, -0.02020989312235;
              0.00761002065724444, -0.0052881730139086, 0.00942469551024343, -0.00654918333458082,
              0.0116720951791165, -0.00811089240683056, 0.0144554065871353, -0.0100450044265642,
              0.0179024222817209, -0.0124403220296684; 0.00998244060580102, -0.00693675817735377,
              0.0123628393934212, -0.00859088780431706, 0.0153108647376083, -0.0106394588623783,
              0.0189618720704232, -0.0131765293019049, 0.0234834934867533, -0.0163185859993666;
              0.00614475176804639, -0.00426996350472721, 0.00761002065724444, -0.0052881730139086,
              0.00942469551024343, -0.00654918333458082, 0.0116720951791165, -0.00811089240683056,
              0.0144554065871353, -0.0100450044265642; 0.0080603749087991, -0.00560112238771041,
              0.00998244060580102, -0.00693675817735377, 0.0123628393934212, -0.00859088780431706,
              0.0153108647376083, -0.0106394588623783, 0.0189618720704232, -0.0131765293019049;
              0.00496161258833652, -0.00344780480587174, 0.00614475176804639, -0.00426996350472721,
              0.00761002065724444, -0.0052881730139086, 0.00942469551024343, -0.00654918333458082,
              0.0116720951791165, -0.00811089240683056; 0.006508392710359, -0.00452265614570941,
              0.0080603749087991, -0.00560112238771041, 0.00998244060580102, -0.00693675817735377,
              0.0123628393934212, -0.00859088780431706, 0.0153108647376083, -0.0106394588623783;
              0.00400628054736198, -0.00278394837947081, 0.00496161258833652, -0.00344780480587174,
              0.00614475176804639, -0.00426996350472721, 0.00761002065724444, -0.0052881730139086,
              0.00942469551024343, -0.00654918333458082; 0.0052552364066852, -0.00365184282657393,
              0.006508392710359, -0.00452265614570941, 0.0080603749087991, -0.00560112238771041,
              0.00998244060580102, -0.00693675817735377, 0.0123628393934212, -0.00859088780431706;
              0.00323489259558392, -0.00224791396727511, 0.00400628054736198, -0.00278394837947081,
              0.00496161258833652, -0.00344780480587174, 0.00614475176804639, -0.00426996350472721,
              0.00761002065724444, -0.0052881730139086; 0.00424336866553741, -0.00294869996752928,
              0.0052552364066852, -0.00365184282657393, 0.006508392710359, -0.00452265614570941,
              0.0080603749087991, -0.00560112238771041, 0.00998244060580102, -0.00693675817735377;
              0.00261203127969999, -0.0018150901221922, 0.00323489259558392, -0.00224791396727511,
              0.00400628054736198, -0.00278394837947081, 0.00496161258833652, -0.00344780480587174,
              0.00614475176804639, -0.00426996350472721; 0.00342633066112097, -0.00238094351576036,
              0.00424336866553741, -0.00294869996752928, 0.0052552364066852, -0.00365184282657393,
              0.006508392710359, -0.00452265614570941, 0.0080603749087991, -0.00560112238771041;
              0.00210909858814016, -0.00146560420000116, 0.00261203127969999, -0.0018150901221922,
              0.00323489259558392, -0.00224791396727511, 0.00400628054736198, -0.00278394837947081,
              0.00496161258833652, -0.00344780480587174; 0.00276660896675846, -0.00192250554063365,
              0.00342633066112097, -0.00238094351576036, 0.00424336866553741, -0.00294869996752928,
              0.0052552364066852, -0.00365184282657393, 0.006508392710359, -0.00452265614570941;
              0.00170300290393372, -0.00118340992813446, 0.00210909858814016, -0.00146560420000116,
              0.00261203127969999, -0.0018150901221922, 0.00323489259558392, -0.00224791396727511,
              0.00400628054736198, -0.00278394837947081; 0.0022339131660002, -0.00155233735252503,
              0.00276660896675846, -0.00192250554063365, 0.00342633066112097, -0.00238094351576036,
              0.00424336866553741, -0.00294869996752928, 0.0052552364066852, -0.00365184282657393;
              0.00137509877779784, -0.000955550658224163, 0.00170300290393372,
              -0.00118340992813446, 0.00210909858814016, -0.00146560420000116,
              0.00261203127969999, -0.0018150901221922, 0.00323489259558392, -0.00224791396727511;
              0.00180378510052907, -0.00125344307473371, 0.0022339131660002, -0.00155233735252503,
              0.00276660896675846, -0.00192250554063365, 0.00342633066112097, -0.00238094351576036,
              0.00424336866553741, -0.00294869996752928; 0.00111033084226304, -0.000771564475440913,
              0.00137509877779784, -0.000955550658224163, 0.00170300290393372,
              -0.00118340992813446, 0.00210909858814016, -0.00146560420000116,
              0.00261203127969999, -0.0018150901221922; 0.0014564758999636, -0.00101209929596959,
              0.00180378510052907, -0.00125344307473371, 0.0022339131660002, -0.00155233735252503,
              0.00276660896675846, -0.00192250554063365, 0.00342633066112097, -0.00238094351576036;
              0.000896542560567808, -0.000623003850856807, 0.00111033084226304,
              -0.000771564475440913, 0.00137509877779784, -0.000955550658224163,
              0.00170300290393372, -0.00118340992813446, 0.00210909858814016, -0.00146560420000116;
              0.00117603923358307, -0.000817224974592298, 0.0014564758999636, -0.00101209929596959,
              0.00180378510052907, -0.00125344307473371, 0.0022339131660002, -0.00155233735252503,
              0.00276660896675846, -0.00192250554063365; 0.000723918072266848,
              -0.000503047782183868, 0.000896542560567808, -0.000623003850856807,
              0.00111033084226304, -0.000771564475440913, 0.00137509877779784,
              -0.000955550658224163, 0.00170300290393372, -0.00118340992813446;
              0.000949599151596826, -0.000659872664428221, 0.00117603923358307,
              -0.000817224974592298, 0.0014564758999636, -0.00101209929596959,
              0.00180378510052907, -0.00125344307473371, 0.0022339131660002, -0.00155233735252503;
              0.000584531508490402, -0.000406188614744649, 0.000723918072266848,
              -0.000503047782183868, 0.000896542560567808, -0.000623003850856807,
              0.00111033084226304, -0.000771564475440913, 0.00137509877779784,
              -0.000955550658224163; 0.000766758899672132, -0.000532817702343018,
              0.000949599151596826, -0.000659872664428221, 0.00117603923358307,
              -0.000817224974592298, 0.0014564758999636, -0.00101209929596959,
              0.00180378510052907, -0.00125344307473371; 0.000471983084146734,
              -0.000327979163394606, 0.000584531508490402, -0.000406188614744649,
              0.000723918072266848, -0.000503047782183868, 0.000896542560567808,
              -0.000623003850856807, 0.00111033084226304, -0.000771564475440913;
              0.000619123563071624, -0.000430226495555908, 0.000766758899672132,
              -0.000532817702343018, 0.000949599151596826, -0.000659872664428221,
              0.00117603923358307, -0.000817224974592298, 0.0014564758999636, -0.00101209929596959;
              0.000381105258630076, -0.000264828524769582, 0.000471983084146734,
              -0.000327979163394606, 0.000584531508490402, -0.000406188614744649,
              0.000723918072266848, -0.000503047782183868, 0.000896542560567808,
              -0.000623003850856807; 0.000499914623116092, -0.000347388678462408,
              0.000619123563071624, -0.000430226495555908, 0.000766758899672132,
              -0.000532817702343018, 0.000949599151596826, -0.000659872664428221,
              0.00117603923358307, -0.000817224974592298; 0.000307725473717069,
              -0.000213837204796001, 0.000381105258630076, -0.000264828524769582,
              0.000471983084146734, -0.000327979163394606, 0.000584531508490402,
              -0.000406188614744649, 0.000723918072266848, -0.000503047782183868;
              0.000403658728744577, -0.000280500841232304, 0.000499914623116092,
              -0.000347388678462408, 0.000619123563071624, -0.000430226495555908,
              0.000766758899672132, -0.000532817702343018, 0.000949599151596826,
              -0.000659872664428221; 0.0002484745750158, -0.000172663991519613,
              0.000307725473717069, -0.000213837204796001, 0.000381105258630076,
              -0.000264828524769582, 0.000471983084146734, -0.000327979163394606,
              0.000584531508490402, -0.000406188614744649; 0.000325936393450625,
              -0.000226491900312591, 0.000403658728744577, -0.000280500841232304,
              0.000499914623116092, -0.000347388678462408, 0.000619123563071624,
              -0.000430226495555908, 0.000766758899672132, -0.000532817702343018;
              0.000200632120843032, -0.000139418460861037, 0.0002484745750158,
              -0.000172663991519613, 0.000307725473717069, -0.000213837204796001,
              0.000381105258630076, -0.000264828524769582, 0.000471983084146734,
              -0.000327979163394606; 0.000263179079283141, -0.000182882092908678,
              0.000325936393450625, -0.000226491900312591, 0.000403658728744577,
              -0.000280500841232304, 0.000499914623116092, -0.000347388678462408,
              0.000619123563071624, -0.000430226495555908; 0.000162001476052081,
              -0.000112574179814746, 0.000200632120843032, -0.000139418460861037,
              0.0002484745750158, -0.000172663991519613, 0.000307725473717069,
              -0.000213837204796001, 0.000381105258630076, -0.000264828524769582;
              0.000212505351240607, -0.000147669121326185, 0.000263179079283141,
              -0.000182882092908678, 0.000325936393450625, -0.000226491900312591,
              0.000403658728744577, -0.000280500841232304, 0.000499914623116092,
              -0.000347388678462408; 0.000130808955877936, -9.08986219091476e-05,
              0.000162001476052081, -0.000112574179814746, 0.000200632120843032,
              -0.000139418460861037, 0.0002484745750158, -0.000172663991519613,
              0.000307725473717069, -0.000213837204796001; 0.00017158857926283,
              -0.000119236219612472, 0.000212505351240607, -0.000147669121326185,
              0.000263179079283141, -0.000182882092908678, 0.000325936393450625,
              -0.000226491900312591, 0.000403658728744577, -0.000280500841232304;
              0.00010562238909709, -7.33965770710405e-05, 0.000130808955877936,
              -9.08986219091476e-05, 0.000162001476052081, -0.000112574179814746,
              0.000200632120843032, -0.000139418460861037, 0.0002484745750158,
              -0.000172663991519613; 0.000138550113498555, -9.62779214760087e-05,
              0.00017158857926283, -0.000119236219612472, 0.000212505351240607,
              -0.000147669121326185, 0.000263179079283141, -0.000182882092908678,
              0.000325936393450625, -0.000226491900312591; 8.52853614165943e-05,
              -5.92644576188351e-05, 0.00010562238909709, -7.33965770710405e-05,
              0.000130808955877936, -9.08986219091476e-05, 0.000162001476052081,
              -0.000112574179814746, 0.000200632120843032, -0.000139418460861037;
              0.000111873028105553, -7.77401211969565e-05, 0.000138550113498555,
              -9.62779214760087e-05, 0.00017158857926283, -0.000119236219612472,
              0.000212505351240607, -0.000147669121326185, 0.000263179079283141,
              -0.000182882092908678; 6.88641199478368e-05, -4.7853402393073e-05,
              8.52853614165943e-05, -5.92644576188351e-05, 0.00010562238909709,
              -7.33965770710405e-05, 0.000130808955877936, -9.08986219091476e-05,
              0.000162001476052081, -0.000112574179814746; 9.03324732219462e-05,
              -6.27716754897275e-05, 0.000111873028105553, -7.77401211969565e-05,
              0.000138550113498555, -9.62779214760087e-05, 0.00017158857926283,
              -0.000119236219612472, 0.000212505351240607, -0.000147669121326185;
              5.56047009407096e-05, -3.86394849898296e-05, 6.88641199478368e-05,
              -4.7853402393073e-05, 8.52853614165943e-05, -5.92644576188351e-05,
              0.00010562238909709, -7.33965770710405e-05, 0.000130808955877936,
              -9.08986219091476e-05; 7.29394372939889e-05, -5.06853241687758e-05,
              9.03324732219462e-05, -6.27716754897275e-05, 0.000111873028105553,
              -7.77401211969565e-05, 0.000138550113498555, -9.62779214760087e-05,
              0.00017158857926283, -0.000119236219612472; 4.48983123438997e-05,
              -3.11996582398785e-05, 5.56047009407096e-05, -3.86394849898296e-05,
              6.88641199478368e-05, -4.7853402393073e-05, 8.52853614165943e-05,
              -5.92644576188351e-05, 0.00010562238909709, -7.33965770710405e-05;
              5.88953376676862e-05, -4.09261353317596e-05, 7.29394372939889e-05,
              -5.06853241687758e-05, 9.03324732219462e-05, -6.27716754897275e-05,
              0.000111873028105553, -7.77401211969565e-05, 0.000138550113498555,
              -9.62779214760087e-05; 3.6253381768564e-05, -2.51923304500936e-05,
              4.48983123438997e-05, -3.11996582398785e-05, 5.56047009407096e-05,
              -3.86394849898296e-05, 6.88641199478368e-05, -4.7853402393073e-05,
              8.52853614165943e-05, -5.92644576188351e-05; 4.75553545198056e-05,
              -3.30460262543875e-05, 5.88953376676862e-05, -4.09261353317596e-05,
              7.29394372939889e-05, -5.06853241687758e-05, 9.03324732219462e-05,
              -6.27716754897275e-05, 0.000111873028105553, -7.77401211969565e-05;
              2.92729864675152e-05, -2.03416815859707e-05, 3.6253381768564e-05,
              -2.51923304500936e-05, 4.48983123438997e-05, -3.11996582398785e-05,
              5.56047009407096e-05, -3.86394849898296e-05, 6.88641199478368e-05,
              -4.7853402393073e-05; 3.83988246449126e-05, -2.66831901510675e-05,
              4.75553545198056e-05, -3.30460262543875e-05, 5.88953376676862e-05,
              -4.09261353317596e-05, 7.29394372939889e-05, -5.06853241687758e-05,
              9.03324732219462e-05, -6.27716754897275e-05; 2.36366290515378e-05,
              -1.64249992895548e-05, 2.92729864675152e-05, -2.03416815859707e-05,
              3.6253381768564e-05, -2.51923304500936e-05, 4.48983123438997e-05,
              -3.11996582398785e-05, 5.56047009407096e-05, -3.86394849898296e-05;
              3.10053357608062e-05, -2.15454842030665e-05, 3.83988246449126e-05,
              -2.66831901510675e-05, 4.75553545198056e-05, -3.30460262543875e-05,
              5.88953376676862e-05, -4.09261353317596e-05, 7.29394372939889e-05,
              -5.06853241687758e-05; 1.90855221943272e-05, -1.32624532795725e-05,
              2.36366290515378e-05, -1.64249992895548e-05, 2.92729864675152e-05,
              -2.03416815859707e-05, 3.6253381768564e-05, -2.51923304500936e-05,
              4.48983123438997e-05, -3.11996582398785e-05; 2.5035423727942e-05,
              -1.73970161332459e-05, 3.10053357608062e-05, -2.15454842030665e-05,
              3.83988246449126e-05, -2.66831901510675e-05, 4.75553545198056e-05,
              -3.30460262543875e-05, 5.88953376676862e-05, -4.09261353317596e-05;
              1.54107066890089e-05, -1.07088386362792e-05, 1.90855221943272e-05,
              -1.32624532795725e-05, 2.36366290515378e-05, -1.64249992895548e-05,
              2.92729864675152e-05, -2.03416815859707e-05, 3.6253381768564e-05,
              -2.51923304500936e-05; 2.02149864163027e-05, -1.40473134642916e-05,
              2.5035423727942e-05, -1.73970161332459e-05, 3.10053357608062e-05,
              -2.15454842030665e-05, 3.83988246449126e-05, -2.66831901510675e-05,
              4.75553545198056e-05, -3.30460262543875e-05; 1.2443457309502e-05,
              -8.64690887277255e-06, 1.54107066890089e-05, -1.07088386362792e-05,
              1.90855221943272e-05, -1.32624532795725e-05, 2.36366290515378e-05,
              -1.64249992895548e-05, 2.92729864675152e-05, -2.03416815859707e-05;
              1.6322698599074e-05, -1.13425781785057e-05, 2.02149864163027e-05,
              -1.40473134642916e-05, 2.5035423727942e-05, -1.73970161332459e-05,
              3.10053357608062e-05, -2.15454842030665e-05, 3.83988246449126e-05,
              -2.66831901510675e-05; 1.00475359721065e-05, -6.98199268786545e-06,
              1.2443457309502e-05, -8.64690887277255e-06, 1.54107066890089e-05,
              -1.07088386362792e-05, 1.90855221943272e-05, -1.32624532795725e-05,
              2.36366290515378e-05, -1.64249992895548e-05; 1.317985004142e-05,
              -9.15862524621201e-06, 1.6322698599074e-05, -1.13425781785057e-05,
              2.02149864163027e-05, -1.40473134642916e-05, 2.5035423727942e-05,
              -1.73970161332459e-05, 3.10053357608062e-05, -2.15454842030665e-05;
              8.11293650950883e-06, -5.6376472344823e-06, 1.00475359721065e-05,
              -6.98199268786545e-06, 1.2443457309502e-05, -8.64690887277255e-06,
              1.54107066890089e-05, -1.07088386362792e-05, 1.90855221943272e-05,
              -1.32624532795725e-05; 1.06421402110661e-05, -7.39518080285361e-06,
              1.317985004142e-05, -9.15862524621201e-06, 1.6322698599074e-05, -1.13425781785057e-05,
              2.02149864163027e-05, -1.40473134642916e-05, 2.5035423727942e-05,
              -1.73970161332459e-05; 6.5508338551907e-06, -4.55214832804167e-06,
              8.11293650950883e-06, -5.6376472344823e-06, 1.00475359721065e-05,
              -6.98199268786545e-06, 1.2443457309502e-05, -8.64690887277255e-06,
              1.54107066890089e-05, -1.07088386362792e-05; 8.5930528735962e-06,
              -5.97127818168057e-06, 1.06421402110661e-05, -7.39518080285361e-06,
              1.317985004142e-05, -9.15862524621201e-06, 1.6322698599074e-05, -1.13425781785057e-05,
              2.02149864163027e-05, -1.40473134642916e-05; 5.28950573544064e-06,
              -3.67565644649554e-06, 6.5508338551907e-06, -4.55214832804167e-06,
              8.11293650950883e-06, -5.6376472344823e-06, 1.00475359721065e-05,
              -6.98199268786545e-06, 1.2443457309502e-05, -8.64690887277255e-06;
              6.93850637408794e-06, -4.82154041578748e-06, 8.5930528735962e-06,
              -5.97127818168057e-06, 1.06421402110661e-05, -7.39518080285361e-06,
              1.317985004142e-05, -9.15862524621201e-06, 1.6322698599074e-05, -1.13425781785057e-05;
              4.27103961781746e-06, -2.96792840194563e-06, 5.28950573544064e-06,
              -3.67565644649554e-06, 6.5508338551907e-06, -4.55214832804167e-06,
              8.11293650950883e-06, -5.6376472344823e-06, 1.00475359721065e-05,
              -6.98199268786545e-06; 5.6025339784871e-06, -3.89317852455659e-06,
              6.93850637408794e-06, -4.82154041578748e-06, 8.5930528735962e-06,
              -5.97127818168057e-06, 1.06421402110661e-05, -7.39518080285361e-06,
              1.317985004142e-05, -9.15862524621201e-06; 3.44867371912334e-06,
              -2.39646961768527e-06, 4.27103961781746e-06, -2.96792840194563e-06,
              5.28950573544064e-06, -3.67565644649554e-06, 6.5508338551907e-06,
              -4.55214832804167e-06, 8.11293650950883e-06, -5.6376472344823e-06;
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0],
          Gx_max_const={1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
              1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
              2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
              1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
              2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
              1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
              2,1,2,1,2,1,2,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
              1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
              1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
              1,1,1,1,1,1,1,1,1,1,1,1,1,1})
          annotation (Placement(transformation(extent={{-40,-40},{-20,-20}})));

        Modelica.Blocks.Sources.Step reference[2](height={2,1}, each startTime=
              5) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={-30,-60})));

      equation
        connect(observer.x, controller.x) annotation (Line(
            points={{6.10623e-16,-11},{6.10623e-16,-30},{-19,-30}},
            color={0,0,127},
            smooth=Smooth.None,
            thickness=0.5));
        connect(controller.ref, reference.y) annotation (Line(
            points={{-30,-41},{-30,-45},{-30,-49},{-30,-49}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        connect(controller.act, observer.act) annotation (Line(
            points={{-41,-30},{-50,-30},{-50,6.10623e-16},{-11,6.10623e-16}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        connect(plant.u, controller.act) annotation (Line(
            points={{-41,30},{-50,30},{-50,-30},{-41,-30}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        connect(plant.y, observer.sen) annotation (Line(
            points={{-19,30},{20,30},{20,6.10623e-16},{11,6.10623e-16}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        annotation (
          Documentation(info="<html>
    The matrices of the controller are the discretized version of the plant model in
    continuous-time. They can be calculated in MATLAB by:
   <table border=\"0\" bgcolor=\"lightgray\"><tr><td><code>
   %% Read results
 <code>csys = ss(A,B,C,D); % where A, B, C, D are the matrices of the continuous-time model
<br>T_s = 0.5; % sampling period [s]
<br>dsys = c2d(csys,'zoh',T_s);
<br>[A,B,C,D] = ssdata(dsys) % where A, B, C, D are now the matrices of the discrete-time model</code>
</td></tr></code></table>
 <p>The observer gain matrix, L, can be calculated in MATLAB via the following, where A and C are
 the system and output matrices of the plant model in discrete time:
   <table border=\"0\" bgcolor=\"lightgray\"><tr><td><code>
  LT = dlqr(A',C',eye(n_x),eye(n_sen)*1e-5);
<br>L = LT'</code>
</td></tr></code></table>
  </html>", revisions="<html><ul><li>J. A. Rossiter, <a href=\"http://www.mathworks.com/matlabcentral/fileexchange/3410-model-based-predictive-control-a-practical-approach\">http://www.mathworks.com/matlabcentral/fileexchange/3410-model-based-predictive-control-a-practical-approach</a>, accessed 2009/12/3:<br>Original example for MATLAB (example2_mimo.m)</li>
  <li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2009/12/9:<br>Adapted for use with Modelica</li></ul></html>"),

          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                  {100,100}}), graphics),
          experiment(StopTime=50));

      end RossiterExample2MPC;

      model RossiterExample2MPCNoRej "Example2_mimo.m in Rossiter (2003)"
        extends Modelica.Icons.Example;
        parameter Modelica.SIunits.Time samplePeriod(
          min=100*Modelica.Constants.eps,
          start=0.1) = 1 "Sample period of discrete species";
        FCSys.WorkInProgress.Blocks.Discrete.Plants.StateSpaceWNoise plant(
          samplePeriod=samplePeriod,
          A=[-0.0893, 0, 0.0993; 0.4083, -2.0003, 0.0001; 0, 0, -2.0003],
          B=[-0.0001, -0.0791; -0.0002, 0.3622; 2.0003, 0],
          C=[1.7993, 13.216, 0; 0.8233, 0, 0])
          annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
        FCSys.WorkInProgress.Blocks.Discrete.Observers.Observer observer(
          samplePeriod=samplePeriod,
          A=[0.9146, 0, 0.0405; 0.1665, 0.1353, 0.0058; 0, 0, 0.1353],
          B=[0.0544, -0.0757; 0.0053, 0.1477; 0.8647, 0],
          C=[1.7993, 13.216, 0; 0.8233, 0, 0],
          L=[0.0300465946139166, 0.307625044040746; 0.0144539216746499,
              0.0471237564746761; 1.23468336612022e-05, 0.000356017361987146])
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        FCSys.WorkInProgress.Blocks.Discrete.Controllers.MPC controller(
          samplePeriod=samplePeriod,
          A=[0.9146, 0, 0.0405; 0.1665, 0.1353, 0.0058; 0, 0, 0.1353],
          B=[0.0544, -0.0757; 0.0053, 0.1477; 0.8647, 0],
          C=[1.7993, 13.216, 0; 0.8233, 0, 0])
          annotation (Placement(transformation(extent={{-40,-40},{-20,-20}})));
        Modelica.Blocks.Sources.Step reference[2](height={2,1}, each startTime=
              5) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={-30,-60})));

      equation
        connect(observer.x, controller.x) annotation (Line(
            points={{6.10623e-16,-11},{6.10623e-16,-30},{-19,-30}},
            color={0,0,127},
            smooth=Smooth.None,
            thickness=0.5));
        connect(controller.ref, reference.y) annotation (Line(
            points={{-30,-41},{-30,-45},{-30,-49},{-30,-49}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        connect(controller.act, observer.act) annotation (Line(
            points={{-41,-30},{-50,-30},{-50,6.10623e-16},{-11,6.10623e-16}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        connect(plant.u, controller.act) annotation (Line(
            points={{-41,30},{-50,30},{-50,-30},{-41,-30}},
            color={0,0,127},
            smooth=Smooth.None,
            thickness=0.5));
        connect(plant.y, observer.sen) annotation (Line(
            points={{-19,30},{20,30},{20,6.10623e-16},{11,6.10623e-16}},
            color={0,0,127},
            smooth=Smooth.None,
            thickness=0.5));
        annotation (
          Documentation(info="<html>
    The matrices of the controller are the discretized version of the plant model in
    continuous-time. They can be calculated in MATLAB by:
   <table border=\"0\" bgcolor=\"lightgray\"><tr><td><code>
   %% Read results
 <code>csys = ss(A,B,C,D); % where A, B, C, D are the matrices of the continuous-time model
<br>T_s = 0.5; % sampling period [s]
<br>dsys = c2d(csys,'zoh',T_s);
<br>[A,B,C,D] = ssdata(dsys) % where A, B, C, D are now the matrices of the discrete-time model</code>
</td></tr></code></table>
 <p>The observer gain matrix, L, can be calculated in MATLAB via the following, where A and C are
 the system and output matrices of the plant model in discrete time:
   <table border=\"0\" bgcolor=\"lightgray\"><tr><td><code>
  LT = dlqr(A',C',eye(n_x),eye(n_sen)*1e-5);
<br>L = LT'</code>
</td></tr></code></table>
  </html>", revisions="<html><ul><li>J. A. Rossiter, <a href=\"http://www.mathworks.com/matlabcentral/fileexchange/3410-model-based-predictive-control-a-practical-approach\">http://www.mathworks.com/matlabcentral/fileexchange/3410-model-based-predictive-control-a-practical-approach</a>, accessed 2009/12/3:<br>Original example for MATLAB (example2_mimo.m)</li>
  <li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2009/12/9:<br>Adapted for use with Modelica</li></ul></html>"),

          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                  {100,100}}), graphics),
          experiment(StopTime=139));

      end RossiterExample2MPCNoRej;

      model PendulumMPC
        extends Modelica.Icons.Example;
        parameter Modelica.SIunits.Time samplePeriod(
          min=100*Modelica.Constants.eps,
          start=0.1) = 0.02 "Sample period of discrete species";
        Discrete.Plants.Pendulum pendulum(final samplePeriod=samplePeriod)
          annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
        FCSys.WorkInProgress.Blocks.Discrete.Controllers.MPC controller(
          A=[0, 1, 0, 0; 3912.30782269368, -92.9225052459515, 0, 0; 0, 0, 0, 1;
              1955.16183781234, -46.4541756173276, 0, 0],
          B=[0; 464.551618506448; 0; 233.240442071292],
          C=[1.00000000000474, 0, 0, 0; 0, 0, 1, 0],
          final samplePeriod=samplePeriod)
          annotation (Placement(transformation(extent={{-40,-40},{-20,-20}})));
        Discrete.Observers.Observer observer(
          final samplePeriod=samplePeriod,
          A=[0, 1, 0, 0; 3912.30782269368, -92.9225052459515, 0, 0; 0, 0, 0, 1;
              1955.16183781234, -46.4541756173276, 0, 0],
          B=[0; 464.551618506448; 0; 233.240442071292],
          C=[1.00000000000474, 0, 0, 0; 0, 0, 1, 0],
          L=ones(4, 2))
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Modelica.Blocks.Sources.Constant phi_ref(k=Constants.pi/2) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-50,-70})));
        Modelica.Blocks.Sources.Constant s_ref(k=0) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-10,-70})));

      equation
        connect(observer.x, controller.x) annotation (Line(
            points={{6.10623e-16,-11},{6.10623e-16,-30},{-19,-30}},
            color={0,0,127},
            smooth=Smooth.None,
            thickness=0.5));
        connect(pendulum.y, observer.sen) annotation (Line(
            points={{-19,30},{20,30},{20,6.10623e-16},{11,6.10623e-16}},
            color={0,0,127},
            smooth=Smooth.None,
            thickness=0.5));
        connect(controller.act, pendulum.u) annotation (Line(
            points={{-41,-30},{-50,-30},{-50,30},{-41,30}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        connect(observer.act, pendulum.u) annotation (Line(
            points={{-11,6.10623e-16},{-50,6.10623e-16},{-50,30},{-41,30}},
            color={0,0,127},
            thickness=0.5,
            smooth=Smooth.None));
        connect(phi_ref.y, controller.ref[1]) annotation (Line(
            points={{-50,-59},{-50,-54},{-30,-54},{-30,-41}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(s_ref.y, controller.ref[2]) annotation (Line(
            points={{-10,-59},{-10,-54},{-30,-54},{-30,-41}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (
          experiment(StopTime=5),
          Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics),
          Documentation(info="<html>
<p>This simple model demonstrates that by just dragging species
default animation is defined that shows the structure of the
assembled system.

<IMG src=\"modelica://Modelica/Resources/Images/MultiBody/Examples/Elementary/Pendulum.png\"
ALT=\"model Examples.Elementary.Pendulum\">
</html>"));

      end PendulumMPC;

    end Examples;

    package Continuous
      package Examples
        extends Modelica.Icons.ExamplesPackage;
        model RandomTest "Example of generating random sequences in Dymola"
          extends Modelica.Icons.Example;
          FCSys.WorkInProgress.Blocks.Continuous.Sources.RandomUniform
            randomUniform(T_end=10)
            annotation (Placement(transformation(extent={{-10,10},{10,30}})));
          FCSys.WorkInProgress.Blocks.Continuous.Sources.RandomNormal
            randomNormal(T_end=10)
            annotation (Placement(transformation(extent={{-10,-30},{10,-10}})));
          annotation (Documentation(info="<html><p>You can use the script below to analyze the results of this test in MATLAB:
  <table border=\"0\" bgcolor=\"lightgray\"><tr><td><code>%% Read results
<br>d = dymload('RandomTest.mat');
<br>x_u = dymget(d,'randomUniform.y[1]');
<br>x_min = dymget(d,'randomUniform.x_min[1]');  x_min = x_min(1);
<br>x_max = dymget(d,'randomUniform.x_max[1]');  x_max = x_max(1);
<br>x_n = dymget(d,'randomNormal.y[1]');
<br>mu = dymget(d,'randomNormal.mu[1]');  mu = mu(1);
<br>sigma = dymget(d,'randomNormal.sigma[1]');  sigma = sigma(1);
<br>n = length(x_u); % Number of samples
<br>
<br>%% Plot results
<br>n_bins = sqrt(n);
<br>hist([x_u,x_n],n_bins)
<br>title({'Distribution of Random Numbers',[num2str(n),' samples']})
<br>xlabel('Value')
<br>ylabel('Normalized number of occurrences')
<br>legend(['Uniform over [',num2str(x_min),', ',num2str(x_max),')'], ['Normal with \mu = ',num2str(mu),', \sigma = ',num2str(sigma)], 'Location', 'NorthEast')
<br>
<br>%% Analyze results
<br>display('Uniform Random Numbers----------')
<br>display('Parameter values:')
<br>display([' x_min = ',num2str(x_min)])
<br>display([' x_max = ',num2str(x_max)])
<br>display('Actual results:')
<br>display([' x_min = ',num2str(min(x_u))])
<br>display([' x_max = ',num2str(max(x_u))])
<br>display([' mu = ',num2str(mean(x_u))])
<br>display([' sigma = ',num2str(std(x_u))])
<br>display(' ')
<br>display('Normal Random Numbers----------')
<br>display('Parameter values:')
<br>display([' mu = ',num2str(mu)])
<br>display([' sigma = ',num2str(sigma)])
<br>display('Actual results:')
<br>display([' x_min = ',num2str(min(x_n))])
<br>display([' x_max = ',num2str(max(x_n))])
<br>display([' mu = ',num2str(mean(x_n))])
<br>display([' sigma = ',num2str(std(x_n))])</td></tr></code></table></html>"),
              experiment(
              StopTime=10,
              NumberOfIntervals=5000,
              Algorithm="Dassl"));

        end RandomTest;

        model Pendulum
          extends Modelica.Icons.Example;
          Modelica.Blocks.Sources.Sine ForceProfile(startTime=2)
            annotation (Placement(transformation(extent={{-30,-10},{-10,10}})));
          FCSys.WorkInProgress.Blocks.Continuous.Plants.Pendulum pendulum
            annotation (Placement(transformation(extent={{10,-10},{30,10}})));

        equation
          connect(ForceProfile.y, pendulum.u[1]) annotation (Line(
              points={{-9,6.10623e-16},{-4.5,6.10623e-16},{-4.5,1.16573e-15},{0,
                  1.16573e-15},{0,5.55112e-16},{9,5.55112e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          annotation (
            experiment(StopTime=5),
            Diagram(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics),
            Documentation(info="<html>
<p>This simple model demonstrates that by just dragging species
default animation is defined that shows the structure of the
assembled system.

<IMG src=\"modelica://Modelica/Resources/Images/MultiBody/Examples/Elementary/Pendulum.png\"
ALT=\"model Examples.Elementary.Pendulum\">
</html>"));

        end Pendulum;

      end Examples;
      extends Modelica.Icons.Package;
      package Controllers
        extends Modelica.Icons.Package;
        block Controller
          extends FCSys.BaseClasses.Icons.Blocks.Continuous;
          parameter Real A[:, size(A, 1)]
            "System gain of state space model (state to derivative of state)";
          parameter Real B[size(A, 1), :]
            "Input gain of state space model (actuation to derivative of state)";
          parameter Real C[:, n_x]
            "Output gain of state space model (state to measurement)";
          parameter Real L[size(A, 1), size(C, 1)]
            "Observer gain (measurement to derivative of estimated state)";
          // Can be calculated in MATLAB via the following, where A and C are the system and output matrices of the plant model in discrete time:
          // LT = dlqr(A',C',eye(n_x),eye(n_sen)*1e-5);
          // L = LT'
          parameter Real Nbar[n_act, n_x]
            "Reference gain (actuation to measurement)";
          parameter Real K[n_act, n_x]
            "Controller gain (estimated state to actuation)";
          final parameter Integer n_act=size(B, 2) "Number of actuators";
          final parameter Integer n_x=size(A, 1) "Number of states";
          final parameter Integer n_sen=size(C, 1) "Number of sensors";
          Connectors.RealOutput act[n_act] "Actuation" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-100,0}), iconTransformation(extent={{10,-10},{-10,10}},
                  origin={-110,0})));
          Connectors.RealInput ref[n_x] "Reference state" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={0,-100}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={0,-110})));
          Connectors.RealInput x[n_x] "State" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={100,0}), iconTransformation(extent={{120,-10},{100,10}})));
          Modelica.Blocks.Math.MatrixGain Kgain(final K=K)
            annotation (Placement(transformation(extent={{40,-10},{20,10}})));
          FCSys.WorkInProgress.Blocks.Math.AddSkipInclIncl addSkipInclIncl(
              final n=n_act, final isPos1=false) annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={0,0})));
          Modelica.Blocks.Math.MatrixGain NbarGain(final K=Nbar) annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={0,-30})));

        equation
          connect(NbarGain.u, ref) annotation (Line(
              points={{-2.90675e-16,-42},{5.55112e-16,-100}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(Kgain.u, x) annotation (Line(
              points={{42,6.66134e-16},{61.5,6.66134e-16},{61.5,1.77636e-15},{
                  81,1.77636e-15},{81,5.55112e-16},{100,5.55112e-16}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));
          connect(addSkipInclIncl.u_1, Kgain.y) annotation (Line(
              points={{9,6.10623e-16},{11.5,6.10623e-16},{11.5,1.22125e-15},{14,
                  1.22125e-15},{14,6.10623e-16},{19,6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl.y, act) annotation (Line(
              points={{-9,6.10623e-16},{-31.75,6.10623e-16},{-31.75,1.16573e-15},
                  {-54.5,1.16573e-15},{-54.5,5.55112e-16},{-100,5.55112e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(NbarGain.y, addSkipInclIncl.u_2) annotation (Line(
              points={{1.17313e-15,-19},{1.17313e-15,-14.5},{-6.10623e-16,-14.5},
                  {-6.10623e-16,-9}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics), Diagram(coordinateSystem(
                  preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                graphics));

        end Controller;

      end Controllers;

      package Observers
        extends Modelica.Icons.Package;
        block Observer
          extends FCSys.BaseClasses.Icons.Blocks.Continuous;
          parameter Real A[:, size(A, 1)]
            "System gain of state space model (state to derivative of state)";
          parameter Real B[size(A, 1), :]
            "Input gain of state space model (actuation to derivative of state)";
          parameter Real C[:, n_x]
            "Output gain of state space model (state to measurement)";
          parameter Real L[size(A, 1), size(C, 1)]
            "Observer gain (measurement to derivative of state)";
          // Can be calculated in MATLAB via the following, where A and C are the system and output matrices of the plant model in discrete time:
          // LT = dlqr(A',C',eye(n_x),eye(n_sen)*1e-5);
          // L = LT'
          final parameter Integer n_act=size(B, 2) "Number of actuators";
          final parameter Integer n_x=size(A, 1) "Number of states";
          final parameter Integer n_sen=size(C, 1) "Number of sensors";
          Connectors.RealInput act[n_act] "Actuator command" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-100,0}), iconTransformation(extent={{-10,-10},{10,10}},
                  origin={-110,0})));
          Connectors.RealOutput x[n_x] "Estimated state" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={10,-100}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={0,-110})));
          Connectors.RealInput sen[n_sen] "Sensor measurement" annotation (
              Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={100,0}), iconTransformation(extent={{120,-10},{100,10}})));
          FCSys.WorkInProgress.Blocks.Continuous.Integrator xInt(each final
              initType=Modelica.Blocks.Types.Init.InitialState, final n=size(A,
                1)) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={10,-30})));
          Modelica.Blocks.Math.MatrixGain Lgain(final K=L)
            annotation (Placement(transformation(extent={{50,-10},{30,10}})));
          Modelica.Blocks.Math.MatrixGain Bgain(final K=B)
            annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
          Modelica.Blocks.Math.MatrixGain Again(final K=A) annotation (
              Placement(transformation(extent={{-10,-70},{-30,-50}})));
          Modelica.Blocks.Math.MatrixGain Cgain(final K=C)
            annotation (Placement(transformation(extent={{30,-70},{50,-50}})));
          FCSys.WorkInProgress.Blocks.Math.AddSkipInclIncl addSkipInclIncl1(
              final n=n_x)
            annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));
          FCSys.WorkInProgress.Blocks.Math.AddInclSkipIncl addInclSkipIncl(
              final n=n_x) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={10,0})));
          FCSys.WorkInProgress.Blocks.Math.AddSkipInclIncl addSkipInclIncl2(
              final isPos2=false, final n=n_sen)
            annotation (Placement(transformation(extent={{80,-10},{60,10}})));

        equation
          connect(addInclSkipIncl.y, xInt.u) annotation (Line(
              points={{10,-9},{10,-13.5},{10,-19},{10,-19}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(xInt.y, Again.u) annotation (Line(
              points={{10,-41},{10,-60},{-8,-60},{-8,-60}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(xInt.y, Cgain.u) annotation (Line(
              points={{10,-41},{10,-60},{28,-60}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(Lgain.y, addInclSkipIncl.u_1) annotation (Line(
              points={{29,6.10623e-16},{24.5,6.10623e-16},{24.5,-1.15362e-15},{
                  19,-1.15362e-15}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl2.y, Lgain.u) annotation (Line(
              points={{61,6.10623e-16},{58.75,6.10623e-16},{58.75,1.27676e-15},
                  {56.5,1.27676e-15},{56.5,6.66134e-16},{52,6.66134e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl2.u_2, Cgain.y) annotation (Line(
              points={{70,-9},{70,-60},{51,-60}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl2.u_1, sen) annotation (Line(
              points={{79,6.10623e-16},{88.5,6.10623e-16},{88.5,1.77636e-15},{
                  99,1.77636e-15},{99,5.55112e-16},{100,5.55112e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addInclSkipIncl.u_2, addSkipInclIncl1.y) annotation (Line(
              points={{1,2.15282e-15},{-10,2.15282e-15},{-10,6.10623e-16},{-31,
                  6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));

          connect(addSkipInclIncl1.u_2, Again.y) annotation (Line(
              points={{-40,-9},{-40,-60},{-31,-60}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl1.u_1, Bgain.y) annotation (Line(
              points={{-49,6.10623e-16},{-50.75,6.10623e-16},{-50.75,
                  1.27676e-15},{-53.5,1.27676e-15},{-53.5,6.10623e-16},{-59,
                  6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(Bgain.u, act) annotation (Line(
              points={{-82,6.66134e-16},{-89,6.66134e-16},{-89,1.77636e-15},{-96,
                  1.77636e-15},{-96,5.55112e-16},{-100,5.55112e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(x, xInt.y) annotation (Line(
              points={{10,-100},{10,-70.5},{10,-41},{10,-41}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics), Diagram(coordinateSystem(
                  preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                graphics));

        end Observer;

      end Observers;

      package Plants
        extends Modelica.Icons.Package;
        block StateSpace "Linear state space system"
          import Modelica.Blocks.Types.Init;
          parameter Real A[:, size(A, 1)]
            "Matrix A of state space model (e.g. A=[1, 0; 0, 1])";
          parameter Real B[size(A, 1), :]
            "Matrix B of state space model (e.g. B=[1; 1])";
          parameter Real C[:, size(A, 1)]
            "Matrix C of state space model (e.g. C=[1, 1])";
          parameter Real D[size(C, 1), size(B, 2)]=zeros(size(C, 1), size(B, 2))
            "Matrix D of state space model";
          parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.NoInit
            "Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)"
            annotation (Evaluate=true, Dialog(group="Initial Conditions"));
          parameter Real x_0[n_x]=zeros(n_x)
            "Initial or guess values of states"
            annotation (Dialog(group="Initial Conditions"));
          parameter Real y_0[n_y]=zeros(n_y)
            "Initial values of outputs (remaining states are in steady state if possible)"
            annotation (Dialog(enable=initType == Init.InitialOutput,group=
                  "Initial Conditions"));
          extends
            FCSys.WorkInProgress.Blocks.Continuous.Plants.BaseClasses.PartialPlant(
              final n_in=size(B, 2), final n_out=size(C, 1));
          output Real x[size(A, 1)](start=x_0) "State vector";

        protected
          final parameter Integer n_x=size(A, 1) "number of states";
          final parameter Integer n_y=size(C, 1) "number of outputs";

        initial equation
          if initType == Init.SteadyState then
            der(x)/U.s = zeros(n_x);
          elseif initType == Init.InitialState then
            x = x_0;
          elseif initType == Init.InitialOutput then
            x = Modelica.Math.Matrices.equalityLeastSquares(
                      A,
                      -B*u,
                      C,
                      y_0 - D*u);
          end if;

        equation
          der(x)/U.s = A*x + B*u;
          y = C*x + D*u;
          annotation (Documentation(
              info="<html>
<p>The State Space block defines the relation
between the input u and the output
y in state space form:</p>
<pre>

    der(x) = A * x + B * u
        y  = C * x + D * u
</pre>
<p>The input is a vector of length n_u, the output is a vector
of length n_y and n_x is the number of states. Accordingly</p>
<pre>
        A has the dimension: A(n_x,n_x),
        B has the dimension: B(n_x,n_u),
        C has the dimension: 'C+'(n_y,n_x),
        D has the dimension: D(n_y,n_u)
</pre>
<p>Example:</p>
<pre>
     parameter: A = [0.12, 2;3, 1.5]
     parameter: B = [2, 7;3, 1]
     parameter: C = [0.1, 2]
     parameter: D = zeros(n_y,n_u)
results in the following equations:
  [der(x[1])]   [0.12  2.00] [x[1]]   [2.0  7.0] [u[1]]
  [         ] = [          ]*[    ] + [        ]*[    ]
  [der(x[2])]   [3.00  1.50] [x[2]]   [0.1  2.0] [u[2]]
                             [x[1]]            [u[1]]
       y[1]   = [0.1  2.0] * [    ] + [0  0] * [    ]
                             [x[2]]            [u[2]]
</pre>
</html>
",
              Icon(coordinateSystem(
                  preserveAspectRatio=true,
                  extent={{-100,-100},{100,100}},
                  grid={2,2}), graphics={Text(
                            extent={{-90,10},{-10,90}},
                            textString="A",
                            lineColor={0,0,127}),Text(
                            extent={{10,10},{90,90}},
                            textString="B",
                            lineColor={0,0,127}),Text(
                            extent={{-90,-10},{-10,-90}},
                            textString="C",
                            lineColor={0,0,127}),Text(
                            extent={{10,-10},{90,-90}},
                            textString="D",
                            lineColor={0,0,127}),Line(points={{0,-90},{0,90}},
                    color={192,192,192}),Line(points={{-90,0},{90,0}}, color={
                    192,192,192})}),
              Diagram(coordinateSystem(
                  preserveAspectRatio=true,
                  extent={{-100,-100},{100,100}},
                  grid={2,2}), graphics)));

        end StateSpace;

        model StateSpaceWNoise
          extends
            FCSys.WorkInProgress.Blocks.Continuous.Plants.BaseClasses.PartialPlant(
              final n_in=size(B, 2), final n_out=size(C, 1));
          parameter Real A[:, size(A, 1)]=identity(2)
            "System gain of continuous-time state space model (state to derivative of state)";
          parameter Real B[size(A, 1), :]=identity(2)
            "Input gain of continuous-time state space model (actuation to derivative of state)";
          parameter Real C[:, size(A, 1)]=identity(2)
            "Output gain of continuous-time state space model (state to measurement)";
          final parameter Integer n_x=size(A, 1) "Number of states";
          parameter Real act_min[n_out]=-act_max "Minimum actuator input";
          parameter Real act_max[n_in]=ones(n_in) "Maximum actuator input";
          parameter Real x_0[n_x]=zeros(n_x) "Initial states of the plant"
            annotation (Dialog(group="Initial Conditions"));
          StateSpace stateSpace(
            final initType=Modelica.Blocks.Types.Init.InitialState,
            final A=A,
            final B=B,
            final C=C,
            final x_0=x_0)
            annotation (Placement(transformation(extent={{10,-10},{30,10}})));
          Sources.RandomNormal noise(
            final n_out=n_in,
            T_s=0.1,
            T_end=140)
            annotation (Placement(transformation(extent={{-10,30},{10,50}})));
          Modelica.Blocks.Math.Gain noiseGain[n_out](each k=0.04)
            annotation (Placement(transformation(extent={{30,30},{50,50}})));
          Modelica.Blocks.Sources.Step disturbance[n_in](each height=-0.2,
              each startTime=60)
            annotation (Placement(transformation(extent={{-50,30},{-30,50}})));
          FCSys.WorkInProgress.Blocks.Math.Limiter saturation(
            final u_max=act_max,
            final u_min=act_min,
            final n=n_in)
            annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
          FCSys.WorkInProgress.Blocks.Math.AddInclInclSkip addDisturbance(
              final n=n_in) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-20,0})));
          FCSys.WorkInProgress.Blocks.Math.AddInclInclSkip addNoise(final n=
                n_out) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={60,0})));

        equation
          connect(addDisturbance.y, stateSpace.u) annotation (Line(
              points={{-11,6.10623e-16},{-6.25,6.10623e-16},{-6.25,1.27676e-15},
                  {-1.5,1.27676e-15},{-1.5,6.10623e-16},{9,6.10623e-16}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));
          connect(addDisturbance.u_2, saturation.y) annotation (Line(
              points={{-29,6.10623e-16},{-31.75,6.10623e-16},{-31.75,
                  1.27676e-15},{-37.5,1.27676e-15},{-37.5,6.10623e-16},{-49,
                  6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(disturbance.y, addDisturbance.u_1) annotation (Line(
              points={{-29,40},{-20,40},{-20,9}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addNoise.u_2, stateSpace.y) annotation (Line(
              points={{51,6.10623e-16},{48.25,6.10623e-16},{48.25,1.27676e-15},
                  {42.5,1.27676e-15},{42.5,6.10623e-16},{31,6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(noiseGain.y, addNoise.u_1) annotation (Line(
              points={{51,40},{60,40},{60,9}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(noise.y, noiseGain.u) annotation (Line(
              points={{11,40},{28,40}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(u, saturation.u) annotation (Line(
              points={{-100,5.55112e-16},{-92.75,5.55112e-16},{-92.75,
                  1.16573e-15},{-85.5,1.16573e-15},{-85.5,6.10623e-16},{-71,
                  6.10623e-16}},
              color={135,135,135},
              smooth=Smooth.None,
              thickness=0.5));
          connect(addNoise.y, y) annotation (Line(
              points={{69,6.10623e-16},{76.75,6.10623e-16},{76.75,1.16573e-15},
                  {84.5,1.16573e-15},{84.5,5.55112e-16},{100,5.55112e-16}},
              color={135,135,135},
              smooth=Smooth.None,
              thickness=0.5));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                graphics={Rectangle(
                          extent={{-100,-100},{100,100}},
                          lineColor={0,0,127},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid)}));

        end StateSpaceWNoise;

        model Pendulum "Simple pendulum with one revolute joint and one body"
          extends
            FCSys.WorkInProgress.Blocks.Continuous.Plants.BaseClasses.PartialPlant(
              n_in=1, final n_out=2);
          inner Modelica.Mechanics.MultiBody.World world annotation (Placement(
                transformation(extent={{-80,-90},{-60,-70}}, rotation=0)));
          Modelica.Mechanics.MultiBody.Joints.Revolute joint(
            n={0,0,1},
            useAxisFlange=true,
            phi(fixed=true, start=1.553343034275)) annotation (Placement(
                transformation(extent={{20,-90},{40,-70}}, rotation=0)));
          Modelica.Mechanics.Rotational.Species.Damper damper(w_rel(fixed=true),
              d=0.1) annotation (Placement(transformation(extent={{20,-50},{40,
                    -30}}, rotation=0)));
          Modelica.Mechanics.MultiBody.Parts.Body body(m=1.0, r_CM={0.5,0,0})
            annotation (Placement(transformation(extent={{50,-90},{70,-70}},
                  rotation=0)));
          Modelica.Mechanics.Rotational.Sensors.RelAngleSensor relAngleSensor
            annotation (Placement(transformation(extent={{20,0},{40,-20}})));
          Modelica.Mechanics.Translational.Sensors.RelPositionSensor
            relPositionSensor
            annotation (Placement(transformation(extent={{-40,30},{-20,10}})));
          Modelica.Mechanics.MultiBody.Joints.Prismatic base(
            s(fixed=true),
            v(fixed=true),
            final useAxisFlange=true,
            n(displayUnit="1") = {1,0,0}) annotation (Placement(transformation(
                  extent={{-40,-90},{-20,-70}})));
          Modelica.Mechanics.Translational.Sources.Force2 force annotation (
              Placement(transformation(extent={{-40,-30},{-20,-10}})));

        equation
          connect(damper.flange_b, joint.axis) annotation (Line(points={{40,-40},
                  {50,-40},{50,-60},{30,-60},{30,-70}}, color={0,0,0}));
          connect(joint.support, damper.flange_a) annotation (Line(points={{24,
                  -70},{24,-60},{10,-60},{10,-40},{20,-40}}, color={0,0,0}));
          connect(body.frame_a, joint.frame_b) annotation (Line(
              points={{50,-80},{40,-80}},
              color={95,95,95},
              thickness=0.5));
          connect(relAngleSensor.flange_b, damper.flange_b) annotation (Line(
              points={{40,-10},{50,-10},{50,-40},{40,-40}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(relAngleSensor.flange_a, damper.flange_a) annotation (Line(
              points={{20,-10},{10,-10},{10,-40},{20,-40}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(base.frame_b, joint.frame_a) annotation (Line(
              points={{-20,-80},{20,-80}},
              color={95,95,95},
              thickness=0.5,
              smooth=Smooth.None));
          connect(relAngleSensor.phi_rel, y[1]) annotation (Line(
              points={{30,1},{30,10},{60,10},{60,-4},{100,-4},{100,-5}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(force.flange_b, base.axis) annotation (Line(
              points={{-20,-20},{-10,-20},{-10,-40},{-22,-40},{-22,-74}},
              color={0,127,0},
              smooth=Smooth.None));
          connect(force.f, u[1]) annotation (Line(
              points={{-30,-16},{-30,0},{-100,0}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(y[2], relPositionSensor.s_rel) annotation (Line(
              points={{100,5},{70,5},{70,40},{-30,40},{-30,31}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(relPositionSensor.flange_a, force.flange_a) annotation (Line(
              points={{-40,20},{-50,20},{-50,-20},{-40,-20}},
              color={0,127,0},
              smooth=Smooth.None));
          connect(relPositionSensor.flange_b, force.flange_b) annotation (Line(
              points={{-20,20},{-10,20},{-10,-20},{-20,-20}},
              color={0,127,0},
              smooth=Smooth.None));
          connect(force.flange_a, base.support) annotation (Line(
              points={{-40,-20},{-50,-20},{-50,-40},{-34,-40},{-34,-74}},
              color={0,127,0},
              smooth=Smooth.None));
          connect(world.frame_b, base.frame_a) annotation (Line(
              points={{-60,-80},{-40,-80}},
              color={95,95,95},
              thickness=0.5,
              smooth=Smooth.None));
          annotation (
            experiment(StopTime=10, Algorithm="Dassl"),
            Diagram(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics),
            Documentation(info="<html>
<p>This simple model demonstrates that by just dragging species
default animation is defined that shows the structure of the
assembled system.

<IMG src=\"modelica://Modelica/Resources/Images/MultiBody/Examples/Elementary/Pendulum.png\"
ALT=\"model Examples.Elementary.Pendulum\">
</html>"),
            Icon(graphics={Ellipse(
                          extent={{10,80},{30,60}},
                          lineColor={215,215,215},
                          fillColor={0,0,0},
                          fillPattern=FillPattern.Sphere,
                          lineThickness=0.5),Line(
                          points={{20,70},{0,0}},
                          color={0,0,0},
                          smooth=Smooth.None,
                          thickness=0.5),Line(
                          points={{50,0},{-50,0}},
                          color={0,0,0},
                          smooth=Smooth.None,
                          origin={0,0},
                          rotation=180,
                          thickness=0.5),Polygon(
                          points={{-48,6},{-60,0},{-48,-6},{-48,6}},
                          smooth=Smooth.None,
                          fillColor={0,0,0},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.None),Polygon(
                          points={{6,6},{-6,0},{6,-6},{6,6}},
                          smooth=Smooth.None,
                          fillColor={0,0,0},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.None,
                          origin={54,0},
                          rotation=180),Ellipse(
                          extent={{-4,4},{4,-4}},
                          lineColor={0,0,0},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          lineThickness=0.5)}));

        end Pendulum;

        model PendulumDummy
          "Extension of the Pendulum model with an additional input so that the model has the same number of inputs and outputs"
          extends Pendulum(final n_in=2);
          /*
  Note:  The setup by Rossiter currently fails for FCSys.Blocks.Continuous.Plants.Pendulum
  because it has a different number of inputs and outputs.  The setup requires a system with
  the same number of inputs and outputs (see Rossiter (2003, p. 21)).  Here, a dummy input is
  added so that the Rossiter algorithm will complete without an error.  However, there is
  still a warning ("Warning:  Matrix is singular to working precision.") and many of the MPC
  matrices with have NaN entries that Dymola cannot handle.
  */
          annotation (Diagram(graphics));

        end PendulumDummy;

        package BaseClasses "Base classes (not generally for direct use)"
          extends Modelica.Icons.BasesPackage;
          partial block PartialPlant
            extends FCSys.BaseClasses.Icons.Blocks.Continuous;
            extends FCSys.WorkInProgress.Blocks.BaseClasses.MI;
            extends FCSys.WorkInProgress.Blocks.BaseClasses.MO;
            annotation (Diagram(coordinateSystem(preserveAspectRatio=true,
                    extent={{-100,-100},{100,100}}), graphics), Icon(
                  coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                      {100,100}}), graphics));

          end PartialPlant;

        end BaseClasses;

      end Plants;

      package Sources
        extends Modelica.Icons.SourcesPackage;
        model RandomNormal
          "Generate a continuous signal of normal (Gaussian) random numbers"
          extends FCSys.BaseClasses.Icons.Blocks.Continuous;
          extends FCSys.WorkInProgress.Blocks.BaseClasses.MO;
          parameter Real mu[:]=0*ones(n_out)
            "Mean or expected value(s) of the random signal(s)";
          parameter Real sigma[size(mu, 1)]=0.5*ones(n_out)
            "Standard deviation(s) of the random signal(s)"
            annotation (Evaluate=true);
          // Note KLD 1/8/10: without annotation(Evaluate=true), Dymola doesn't seem to recognize internal_twister_uniform() when sigma=ones(n_out)
          parameter SI.Time T_s=0.002 "Sample time (i.e., sample period)"
            annotation (Dialog(group="Advanced"));
          parameter SI.Time T_end=1 "End time (i.e., sequence period)"
            annotation (Dialog(group="Advanced"));
          parameter Modelica.Blocks.Types.Smoothness smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative
            "Smoothness of sample interpolation"
            annotation (Dialog(group="Advanced"));

        protected
          final parameter Real mu_internal[n_out]=(if size(mu, 1) == 1 then mu[
              1]*ones(n_out) else mu)
            "Mean or expected value(s) of random signal(s), with entries for every signal";
          final parameter Real sigma_internal[n_out]=(if size(sigma, 1) == 1
               then sigma[1]*ones(n_out) else sigma)
            "Standard deviation(s) of random signal(s), with entries for every signal";
          final parameter Integer n_s=integer(T_end/T_s) + 1
            "Number of samples";
          Real table[n_s, n_out + 1]
            "Matrix of normal random numbers (the first column is time /s)";
          Integer tableID "table identification number";

        public
          Connectors.RealOutput y[n_out] "Connector of Real output signals"
            annotation (Placement(transformation(extent={{90,-10},{110,10}},
                  rotation=0), iconTransformation(extent={{100,-10},{120,10}})));

        equation
          // Interpolate data from the table
          for i in 1:n_out loop
            y[i] =
              FCSys.WorkInProgress.Blocks.Continuous.Sources.BaseClasses.tableTimeIpo(
                      tableID=tableID,
                      icol=i + 1,
                      timeIn=time);
          end for;
          when initial() then
            // (Re)generate the table of random numbers
            table[:, 1] = 0:T_s:T_end "time column";
            for i in 1:n_out loop
              // random numbers
              table[:, i + 1] = FCSys.WorkInProgress.Blocks.BaseClasses.randn(
                        mu=mu_internal[i],
                        sigma=sigma_internal[i],
                        n=n_s);
            end for;
            // Initialize the table interpolation function
            tableID =
              FCSys.WorkInProgress.Blocks.Continuous.Sources.BaseClasses.tableTimeInit(
                      tableName="NoName",
                      fileName="NoName",
                      table=table,
                      startTime=0,
                      smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative,
                      extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic);
          end when;
          annotation (
            Documentation(info="<html><p>The values of the sequence are normally distributed with mean <code>mu</code> and standard deviation <code>sigma</code>. The random numbers are (re)generated at the start of every simulation.</p>

<p>Be sure to set <code>T_s</code> to be smaller than the smallest time step you expect during the simulation.  Otherwise, the output values will not be independent between the simulation time steps (i.e., the autocorrelation of the signal will be nonzero).</p>

<p>Be sure to set <code>T_end</code> to be greater than or equal to the stop time of the simulation.  Otherwise, the sequence will be periodic over the simulation (i.e., it will repeat).  Also, in general, the first derivative of the sequence will be discontinuous even if <code>smoothness = Modelica.Blocks.Types.Smoothness.ContinuousDerivative</code>.</p>

<p>The model uses the Box-Muller transform to generate normal random numbers from uniform random numbers.  It generates the uniform random numbers using <code>internal_twister_uniform()</code>.  This function uses the Mersenne twister pseudorandom number generator and its implementation is specific to Dymola (i.e., not general to Modelica).</p></html>",
                revisions="<html>
<p><ul>
<li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2010/1/6:<br/>Original version using the Box-Muller transform; copied and modified portions of code from Modelica.Blocks.Sources.CombiTimeTable</li>
</ul></p>
</html>"),
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}),graphics={Polygon(
                          points={{-80,98},{-88,76},{-72,76},{-80,98}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{-80,76},
                  {-80,20}}, color={192,192,192}),Line(points={{-90,50},{82,50}},
                  color={192,192,192}),Polygon(
                          points={{90,50},{68,58},{68,42},{90,50}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(
                          points={{-80,26},{-64,72},{-58,16},{-44,104},{-32,30},
                    {-20,56},{-12,14},{4,114},{6,-12},{18,94},{32,22},{40,90},{
                    56,38},{60,40}},
                          color={0,0,127},
                          smooth=Smooth.Bezier),Text(
                          extent={{68,42},{92,16}},
                          lineColor={175,175,175},
                          textString="t"),Polygon(
                          points={{0,8},{-8,-14},{8,-14},{0,8}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{0,-14},{
                  0,-70}}, color={192,192,192}),Polygon(
                          points={{90,-60},{68,-52},{68,-68},{90,-60}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Text(
                          extent={{68,-68},{92,-94}},
                          lineColor={175,175,175},
                          textString="x"),Polygon(
                          points={{-60,-60},{-30,-60},{-18,-54},{-12,-40},{-4,-18},
                    {4,-18},{12,-40},{18,-54},{30,-60},{60,-60},{-60,-60}},
                          lineColor={0,0,127},
                          smooth=Smooth.Bezier,
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{-90,-60},
                  {82,-60}}, color={192,192,192})}),
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics));

        end RandomNormal;

        model RandomUniform
          "Generate a continuous signal of uniform random numbers"
          extends FCSys.BaseClasses.Icons.Blocks.Continuous;
          extends FCSys.WorkInProgress.Blocks.BaseClasses.MO;
          parameter Real x_min[:]=-0.5*ones(n_out)
            "Lower bound(s) of the random signal(s)";
          parameter Real x_max[size(x_min, 1)]=0.5*ones(n_out)
            "Upper bound(s) of the random signal(s)";
          parameter SI.Time T_s=0.002 "Sample time (i.e., sample period)"
            annotation (Dialog(group="Advanced"));
          parameter SI.Time T_end=1 "End time (i.e., sequence period)"
            annotation (Dialog(group="Advanced"));
          parameter Modelica.Blocks.Types.Smoothness smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative
            "Smoothness of sample interpolation"
            annotation (Dialog(group="Advanced"));

        protected
          final parameter Real x_min_internal[n_out]=(if size(x_min, 1) == 1
               then ones(n_out)*x_min[1] else x_min)
            "Lower bound(s) of random signal(s), with entries for every signal";
          final parameter Real x_max_internal[n_out]=(if size(x_max, 1) == 1
               then ones(n_out)*x_max[1] else x_max)
            "Upper bound(s) of random signal(s), with entries for every signal";
          final parameter Integer n_s=integer(T_end/T_s) + 1
            "Number of samples";
          Real table[n_s, n_out + 1]
            "Matrix of uniform random numbers (the first column is time /s)";
          Integer tableID "table identification number";

        public
          Connectors.RealOutput y[n_out] "Connector of Real output signals"
            annotation (Placement(transformation(extent={{90,-10},{110,10}},
                  rotation=0), iconTransformation(extent={{100,-10},{120,10}})));

        equation
          // Interpolate data from the table
          for i in 1:n_out loop
            y[i] =
              FCSys.WorkInProgress.Blocks.Continuous.Sources.BaseClasses.tableTimeIpo(
                      tableID=tableID,
                      icol=i + 1,
                      timeIn=time);
          end for;
          when initial() then
            // Check the min/max range
            for i in 1:size(x_min, 1) loop
              assert(x_min[i] < x_max[i], "Entry " + String(i) +
                " of x_min is greater than that of x_max.");
            end for;
            // (Re)generate the table of random numbers
            table[:, 1] = 0:T_s:T_end "time column";
            for i in 1:n_out loop
              // random numbers
              table[:, i + 1] = FCSys.WorkInProgress.Blocks.BaseClasses.randu(
                        x_min=x_min_internal[i],
                        x_max=x_max_internal[i],
                        n=n_s);
            end for;
            // Initialize the table interpolation function
            tableID =
              FCSys.WorkInProgress.Blocks.Continuous.Sources.BaseClasses.tableTimeInit(
                      tableName="NoName",
                      fileName="NoName",
                      table=table,
                      startTime=0,
                      smoothness=smoothness,
                      extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic);
          end when;
          annotation (
            Documentation(info="<html><p>The values of the sequence are uniformly distributed over the range <code>[x_min, x_max)</code>. The random numbers are (re)generated at the start of every simulation.</p>

<p>Be sure to set <code>T_s</code> to be smaller than the smallest time step you expect during the simulation.  Otherwise, the output values will not be independent between the simulation time steps (i.e., the autocorrelation of the signal will be nonzero).</p>

<p>Be sure to set <code>T_end</code> to be greater than or equal to the stop time of the simulation.  Otherwise, the sequence will be periodic over the simulation (i.e., it will repeat).  Also, in general, the first derivative of the sequence will be discontinuous even if <code>smoothness = Modelica.Blocks.Types.Smoothness.ContinuousDerivative</code>.</p>

<p>The model generates uniform random numbers using <code>internal_twister_uniform()</code>.  This function uses the Mersenne twister pseudorandom number generator and its implementation is specific to Dymola (i.e., not general to Modelica).</p></html>",
                revisions="<html>
<p><ul>
<li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2009/12/15:<br/>Original version; extended from Modelica.Blocks.Sources.CombiTimeTable</li>
<li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2010/1/6:<br/>Copied and modified portions of code from Modelica.Blocks.Sources.CombiTimeTable</li>
</ul></p>
</html>"),
            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}),graphics={Polygon(
                          points={{-80,98},{-88,76},{-72,76},{-80,98}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{-80,76},
                  {-80,20}}, color={192,192,192}),Line(points={{-90,50},{82,50}},
                  color={192,192,192}),Polygon(
                          points={{90,50},{68,58},{68,42},{90,50}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(
                          points={{-80,26},{-64,72},{-58,16},{-44,104},{-32,30},
                    {-20,56},{-12,14},{4,114},{6,-12},{18,94},{32,22},{40,90},{
                    56,38},{60,40}},
                          color={0,0,127},
                          smooth=Smooth.Bezier),Text(
                          extent={{68,42},{92,16}},
                          lineColor={175,175,175},
                          textString="t"),Polygon(
                          points={{0,8},{-8,-14},{8,-14},{0,8}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{0,-14},{
                  0,-70}}, color={192,192,192}),Polygon(
                          points={{90,-60},{68,-52},{68,-68},{90,-60}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Text(
                          extent={{68,-68},{92,-94}},
                          lineColor={175,175,175},
                          textString="x"),Line(
                          points={{-60,-60},{-60,-36},{60,-36},{60,-60}},
                          color={0,0,127},
                          smooth=Smooth.None),Rectangle(
                          extent={{-60,-36},{60,-60}},
                          lineColor={0,0,127},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{-90,-60},
                  {82,-60}}, color={192,192,192})}),
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics));

        end RandomUniform;

        package BaseClasses "Base classes (not generally for direct use)"
          extends Modelica.Icons.BasesPackage;
          function tableTimeInit
            "Initialize 1D table where first column is time (for details see: Modelica/C-Sources/ModelicaTables.h)"
            extends Modelica.Icons.Function;
            input String tableName;
            input String fileName;
            input Real table[:, :];
            input Real startTime;
            input Modelica.Blocks.Types.Smoothness smoothness;
            input Modelica.Blocks.Types.Extrapolation extrapolation;
            output Integer tableID;
          external"C" tableID = ModelicaTables_CombiTimeTable_init(
                        tableName,
                        fileName,
                        table,
                        size(table, 1),
                        size(table, 2),
                        startTime,
                        smoothness,
                        extrapolation);
            annotation (Documentation(revisions="<html>
<p><ul>
<li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2009/1/7:<br/>Original version; copied from Modelica.Blocks.Sources.CombiTimeTable</li>
</ul></p>
</html>"), Library="ModelicaExternalC");

          end tableTimeInit;

          function tableTimeIpo
            "Interpolate 1D table where first column is time (for details see: Modelica/C-Sources/ModelicaTables.h)"
            extends Modelica.Icons.Function;
            input Integer tableID;
            input Integer icol;
            input Real timeIn;
            output Real value;
          external"C" value = ModelicaTables_CombiTimeTable_interpolate(
                        tableID,
                        icol,
                        timeIn);
            annotation (Documentation(revisions="<html>
<p><ul>
<li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2009/1/7:<br/>Original version; copied from Modelica.Blocks.Sources.CombiTimeTable</li>
</ul></p>
</html>"), Library="ModelicaExternalC");

          end tableTimeIpo;

          function tableTimeTmin
            "Return minimum time value of 1D table where first column is time (for details see: Modelica/C-Sources/ModelicaTables.h)"
            extends Modelica.Icons.Function;
            input Integer tableID;
            output Real Tmin "minimum time value in table";
          external"C" Tmin = ModelicaTables_CombiTimeTable_minimumTime(tableID);
            annotation (Documentation(revisions="<html>
<p><ul>
<li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2009/1/7:<br/>Original version; copied from Modelica.Blocks.Sources.CombiTimeTable</li>
</ul></p>
</html>"), Library="ModelicaExternalC");

          end tableTimeTmin;

          function tableTimeTmax
            "Return maximum time value of 1D table where first column is time (for details see: Modelica/C-Sources/ModelicaTables.h)"
            extends Modelica.Icons.Function;
            input Integer tableID;
            output Real Tmax "maximum time value in table";
          external"C" Tmax = ModelicaTables_CombiTimeTable_maximumTime(tableID);
            annotation (Documentation(revisions="<html>
<p><ul>
<li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2009/1/7:<br/>Original version; copied from Modelica.Blocks.Sources.CombiTimeTable</li>
</ul></p>
</html>"), Library="ModelicaExternalC");

          end tableTimeTmax;

        end BaseClasses;

        block Constant "Generate constant signal of type Real"
          extends FCSys.BaseClasses.Icons.Blocks.Continuous;
          parameter Real k[:] "Constant output value(s)";
          extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(final n_out=size(k,
                1));

        equation
          y = k;
          annotation (
            defaultComponentName="const",
            Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics={Line(points={{-80,68},{-80,-80}}, color=
                  {192,192,192}),Polygon(
                          points={{-80,90},{-88,68},{-72,68},{-80,90}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{-90,-70},
                  {82,-70}}, color={192,192,192}),Polygon(
                          points={{90,-70},{68,-62},{68,-78},{90,-70}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{-80,0},{
                  80,0}}, color={0,0,0}),Text(
                          extent={{-150,-150},{150,-110}},
                          lineColor={0,0,0},
                          textString="k=%k")}),
            Diagram(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics));

        end Constant;

      end Sources;

      block FirstOrder "First order transport function block (= 1 pole)"
        extends FCSys.BaseClasses.Icons.Blocks.Continuous;
        import Modelica.Blocks.Types.Init;
        parameter Integer n=1 "Number of signals";
        parameter Real k=1 "Gain";
        parameter SI.Time T(start=1) "Time Constant";
        parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.NoInit
          "Type of initialization (1: no init, 2: steady state, 3/4: initial output)"
          annotation (Evaluate=true, Dialog(group="Initial Conditions"));
        parameter Real y_0[n]=zeros(n)
          "Initial or guess value of output (= state)"
          annotation (Dialog(group="Initial Conditions"));
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MI(final n_in=n);
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(y(final start=y_0),
            final n_out=n);

      initial equation
        if initType == Init.SteadyState then
          der(y)/U.s = zeros(n);
        elseif initType == Init.InitialState or initType == Init.InitialOutput
             then
          y = y_0;
        end if;

      equation
        der(y)/U.s = (k*u - y)/T;
        annotation (Documentation(
            info="<html>
<p>This blocks defines the transport function between the input u
and the output y (element-wise) as <i>first order</i> system:</p>
<pre>
               k
     y = ------------ * u
            T * s + 1
</pre>
<p>If you would like to be able to change easily between different
transport functions (FirstOrder, SecondOrder, &hellip; ) by changing
parameters, use the general block <b>TransportFunction</b> instead
and model a first order SISO system with parameters<br>
b = {k}, a = {T, 1}.</p>
<pre>
Example:
   parameter: k = 0.3, T = 0.4
   results in:
             0.3
      y = ----------- * u
          0.4 s + 1.0
</pre>

</html>
",
            Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics={Line(points={{-80,78},{-80,-90}}, color=
                  {192,192,192}),Polygon(
                        points={{-80,90},{-88,68},{-72,68},{-80,88},{-80,90}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),Line(points={{-90,-80},{
                  82,-80}}, color={192,192,192}),Polygon(
                        points={{90,-80},{68,-72},{68,-88},{90,-80}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),Line(points={{-80,-80},{
                  -70,-45.11},{-60,-19.58},{-50,-0.9087},{-40,12.75},{-30,22.75},
                  {-20,30.06},{-10,35.41},{0,39.33},{10,42.19},{20,44.29},{30,
                  45.82},{40,46.94},{50,47.76},{60,48.36},{70,48.8},{80,49.12}},
                  color={0,0,127}),Text(
                        extent={{0,0},{60,-60}},
                        lineColor={192,192,192},
                        textString="PT1"),Text(
                        extent={{-150,-150},{150,-110}},
                        lineColor={135,135,135},
                        textString="T=%T")}),
            Diagram(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics={Text(
                        extent={{-48,52},{50,8}},
                        lineColor={0,0,0},
                        textString="k"),Text(
                        extent={{-54,-6},{56,-56}},
                        lineColor={0,0,0},
                        textString="T s + 1"),Line(points={{-50,0},{50,0}},
                  color={0,0,0}),Rectangle(extent={{-60,60},{60,-60}},
                  lineColor={0,0,255}),Line(points={{-100,0},{-60,0}}, color={0,
                  0,255}),Line(points={{60,0},{100,0}}, color={0,0,255})})));

      end FirstOrder;

      block Integrator "Output the integral of the input signal"
        extends FCSys.BaseClasses.Icons.Blocks.Continuous;
        import Modelica.Blocks.Types.Init;
        parameter Real k[n]=ones(n) "Integrator gain";
        /* InitialState is the default, because it was the default in Modelica 2.2
     and therefore this setting is backward compatible
  */
        parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.InitialState
          "Type of initialization (1: no init, 2: steady state, 3,4: initial output)"
          annotation (Evaluate=true, Dialog(group="Initial Conditions"));
        parameter Real y_0[n]=zeros(n)
          "Initial or guess value of output (= state)"
          annotation (Dialog(group="Initial Conditions"));
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MI(final n_in=n);
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(y(final start=y_0),
            final n_out=n);
        parameter Integer n=1 "Number of signals";

      initial equation
        if initType == Init.SteadyState then
          der(y)/U.s = zeros(n);
        elseif initType == Init.InitialState or initType == Init.InitialOutput
             then
          y = y_0;
        end if;

      equation
        der(y)/U.s = k .* u;
        annotation (Documentation(
            info="<html>
<p>This blocks computes output <b>y</b> (element-wise) as
<i>integral</i> of the input <b>u</b> multiplied with
the gain <i>k</i>:</p>
<pre>
         k
     y = - u
         s
</pre>

<p>It might be difficult to initialize the integrator in steady state.
This is discussed in the description of package
<a href=\"Modelica://Modelica.Blocks.Continuous#info\">Continuous</a>.</p>

</html>
",
            Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics={Line(points={{-80,78},{-80,-90}}, color=
                  {192,192,192}),Polygon(
                        points={{-80,90},{-88,68},{-72,68},{-80,90}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),Line(points={{-90,-80},{
                  82,-80}}, color={192,192,192}),Polygon(
                        points={{90,-80},{68,-72},{68,-88},{90,-80}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),Text(
                        extent={{0,-10},{60,-70}},
                        lineColor={192,192,192},
                        textString="I"),Text(
                        extent={{-150,-150},{150,-110}},
                        lineColor={135,135,135},
                        textString="k=%k"),Line(points={{-80,-80},{80,80}},
                  color={0,0,127})}),
            Diagram(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics={Rectangle(extent={{-60,60},{60,-60}},
                  lineColor={0,0,255}),Line(points={{-100,0},{-60,0}}, color={0,
                  0,255}),Line(points={{60,0},{100,0}}, color={0,0,255}),Text(
                        extent={{-36,60},{32,2}},
                        lineColor={0,0,0},
                        textString="k"),Text(
                        extent={{-32,0},{36,-58}},
                        lineColor={0,0,0},
                        textString="s"),Line(points={{-46,0},{46,0}}, color={0,
                  0,0})})));

      end Integrator;

    end Continuous;

    package Discrete
      package Examples
        extends Modelica.Icons.ExamplesPackage;
        model RandomTest "Example of generating random sequences in Dymola"
          extends Modelica.Icons.Example;
          Discrete.Sources.RandomUniform randomUniform(n_s=50000)
            annotation (Placement(transformation(extent={{-10,10},{10,30}})));
          Discrete.Sources.RandomNormal randomNormal(n_s=50000)
            annotation (Placement(transformation(extent={{-10,-30},{10,-10}})));
          annotation (Documentation(info="<html><p>You can use the script below to analyze the results of this test in MATLAB:
  <table border=\"0\" bgcolor=\"lightgray\"><tr><td><code>%% Read results
<br>d = dymload('RandomTest.mat');
<br>x_u = dymget(d,'randomUniform.y[1]');
<br>x_min = dymget(d,'randomUniform.x_min[1]');  x_min = x_min(1);
<br>x_max = dymget(d,'randomUniform.x_max[1]');  x_max = x_max(1);
<br>x_n = dymget(d,'randomNormal.y[1]');
<br>mu = dymget(d,'randomNormal.mu[1]');  mu = mu(1);
<br>sigma = dymget(d,'randomNormal.sigma[1]');  sigma = sigma(1);
<br>n = length(x_u); % Number of samples
<br>
<br>%% Plot results
<br>n_bins = sqrt(n);
<br>hist([x_u,x_n],n_bins)
<br>title({'Distribution of Random Numbers',[num2str(n),' samples']})
<br>xlabel('Value')
<br>ylabel('Normalized number of occurrences')
<br>legend(['Uniform over [',num2str(x_min),', ',num2str(x_max),')'], ['Normal with \mu = ',num2str(mu),', \sigma = ',num2str(sigma)], 'Location', 'NorthEast')
<br>
<br>%% Analyze results
<br>display('Uniform Random Numbers----------')
<br>display('Parameter values:')
<br>display([' x_min = ',num2str(x_min)])
<br>display([' x_max = ',num2str(x_max)])
<br>display('Actual results:')
<br>display([' x_min = ',num2str(min(x_u))])
<br>display([' x_max = ',num2str(max(x_u))])
<br>display([' mu = ',num2str(mean(x_u))])
<br>display([' sigma = ',num2str(std(x_u))])
<br>display(' ')
<br>display('Normal Random Numbers----------')
<br>display('Parameter values:')
<br>display([' mu = ',num2str(mu)])
<br>display([' sigma = ',num2str(sigma)])
<br>display('Actual results:')
<br>display([' x_min = ',num2str(min(x_n))])
<br>display([' x_max = ',num2str(max(x_n))])
<br>display([' mu = ',num2str(mean(x_n))])
<br>display([' sigma = ',num2str(std(x_n))])</td></tr></code></table></html>"),
              experiment(
              StopTime=100,
              NumberOfIntervals=50000,
              Algorithm="Dassl"));

        end RandomTest;

        model Sampler
          extends Modelica.Icons.Example;
          Modelica.Blocks.Discrete.Sampler sample(samplePeriod=1/40)
            annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
          Modelica.Blocks.Sources.Sine source(freqHz=10)
            annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
          Modelica.Blocks.Discrete.FirstOrderHold hold(samplePeriod=1/40)
            annotation (Placement(transformation(extent={{40,-10},{60,10}})));

        equation
          connect(source.y, sample.u) annotation (Line(
              points={{-59,6.10623e-16},{-49.75,6.10623e-16},{-49.75,
                  1.27676e-15},{-40.5,1.27676e-15},{-40.5,6.66134e-16},{-22,
                  6.66134e-16}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(hold.u, sample.y) annotation (Line(
              points={{38,6.66134e-16},{28.75,6.66134e-16},{28.75,1.27676e-15},
                  {19.5,1.27676e-15},{19.5,6.10623e-16},{1,6.10623e-16}},
              color={0,0,127},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}), graphics), experiment(Algorithm=
                  "Dassl"));

        end Sampler;

      end Examples;
      extends Modelica.Icons.Package;
      package Controllers
        extends Modelica.Icons.Package;
        package Examples
          extends Modelica.Icons.ExamplesPackage;
          model QPSolverMathworksExample
            "<html>Quadratic programming example from <a href=\"http://www.mathworks.com/access/helpdesk/help/toolbox/optim/ug/quadprog.html\">http://www.mathworks.com/access/helpdesk/help/toolbox/optim/ug/quadprog.html</a>, accessed 12/11/09</html>"
            extends Modelica.Icons.Example;
            FCSys.WorkInProgress.Blocks.Discrete.Controllers.BaseClasses.QPSolver
              qPSolver(
              samplePeriod=1,
              H=[1, -1; -1, 2],
              J={-2,-6},
              G=[1, 1; -1, 2; 2, 1],
              JAsParam=true,
              n_y=2,
              y_max=Modelica.Constants.inf*ones(2),
              Gx_min=-Modelica.Constants.inf*ones(3),
              y_min=zeros(2),
              Gx_max={2,2,3},
              AxMaxAsParam=true) annotation (Placement(transformation(extent={{
                      -10,-10},{10,10}})));
            annotation (Documentation(
                info=
                    "<html><p>This should give a solution of <code>qPSolver.y = {0.6667, 1.3333}</code>.</p></html>",

                experiment,
                Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                        -100},{100,100}}), graphics)));

          end QPSolverMathworksExample;

          model QPSolverFerreauExample
            "First and second quadratic programming problems in Section 3.3, \"A Tutorial Example\", p. 12 of Ferreau et al. (2009)"
            extends Modelica.Icons.Example;
            FCSys.WorkInProgress.Blocks.Discrete.Controllers.BaseClasses.QPSolver
              qPSolver(
              samplePeriod=1,
              H=[1, 0; 0, 0.5],
              G=[1, 1],
              n_y=2,
              JAsParam=false,
              yMinAsParam=false,
              yMaxAsParam=false,
              GxMinAsParam=false,
              AxMaxAsParam=false) annotation (Placement(transformation(extent={
                      {-10,-10},{10,10}})));
            Modelica.Blocks.Sources.Step J[2](
              each startTime=1,
              height={-0.5,0.5},
              offset={1.5,1})
              annotation (Placement(transformation(extent={{60,50},{40,70}})));
            Modelica.Blocks.Sources.Step y_min[2](
              each startTime=1,
              height={-0.5,1},
              offset={0.5,-2})
              annotation (Placement(transformation(extent={{60,20},{40,40}})));
            Modelica.Blocks.Sources.Step y_max[2](
              each startTime=1,
              height={0,-2.5},
              offset={5,2})
              annotation (Placement(transformation(extent={{60,-10},{40,10}})));
            Modelica.Blocks.Sources.Step Gx_max[1](
              each startTime=1,
              height={-1},
              offset={2}) annotation (Placement(transformation(extent={{60,-70},
                      {40,-50}})));
            Modelica.Blocks.Sources.Step Gx_min[1](
              each startTime=1,
              height={-1},
              offset={-1}) annotation (Placement(transformation(extent={{60,-40},
                      {40,-20}})));

          equation
            connect(J.y, qPSolver.J_set) annotation (Line(
                points={{39,60},{20,60},{20,8},{-11,8}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(y_min.y, qPSolver.y_min_set) annotation (Line(
                points={{39,30},{30,30},{30,4},{-11,4}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(y_max.y, qPSolver.y_max_set) annotation (Line(
                points={{39,6.10623e-16},{32.25,6.10623e-16},{32.25,1.27676e-15},
                    {25.5,1.27676e-15},{25.5,6.10623e-16},{-11,6.10623e-16}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(Gx_min.y, qPSolver.Gx_min_set) annotation (Line(
                points={{39,-30},{30,-30},{30,-4},{-11,-4}},
                color={0,0,127},
                smooth=Smooth.None));
            connect(Gx_max.y, qPSolver.Gx_max_set) annotation (Line(
                points={{39,-60},{20,-60},{20,-8},{-11,-8}},
                color={0,0,127},
                smooth=Smooth.None));
            annotation (
              Documentation(revisions=
                    "<html><ul><li>Implemented in Modelica by K. L. Davies, 12/11/09</li></ul></html>"),

              Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                      -100},{100,100}}), graphics),
              experiment(StopTime=2),
              Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                      -100},{100,100}}), graphics));

          end QPSolverFerreauExample;

        end Examples;

        block MPC "Model predictive controller"
          extends
            FCSys.WorkInProgress.Blocks.Discrete.BaseClasses.DiscreteBlock;
          Connectors.RealInput x[n_x] "State" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={140,0}), iconTransformation(extent={{120,-10},{100,10}})));
          Connectors.RealInput ref[n_sen] "Reference state" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={0,-100}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={0,-110})));
          Connectors.RealOutput act[n_act] "Actuation" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-140,0}),iconTransformation(extent={{-100,-10},{-120,10}})));
          parameter Real A[:, size(A, 1)]=[.24, 0, .1787, 0; -.3722, 1, .2703,
              0; -.9901, 0, .1389, 0; -48.9354, 64.1, 2.3992, 1]
            "System gain of discrete-time state space model (old state to new state)";
          parameter Real B[size(A, 1), :]=[-1.2346; -1.4383; -4.4828; -1.7999]
            "Input gain of discrete-time state space model (actuation to new state)";
          parameter Real C[:, size(A, 1)]=[0, 1, 0, 0; 0, 0, 0, 1; -128.2,
              128.2, 0, 0]
            "Output gain of discrete-time state space model (old state to measurement)";
          parameter Integer n_p=10 "Prediction horizon";
          constant Integer n_c=3 "Control horizon";
          parameter Real act_min[size(B, 2)]=-ones(size(B, 2))
            "Minimum actuation";
          parameter Real act_max[size(B, 2)]=ones(size(B, 2))
            "Maximum actuation";
          parameter Real[n_act] act_SS=zeros(n_act) "Steady state actuation";
          parameter Real[n_x] x_SS=zeros(n_x) "Steady states";
          parameter Real[n_sen] mea_SS=zeros(n_sen) "Steady state measurement";
          final parameter Integer n_act=size(B, 2) "Number of actuators";
          final parameter Integer n_x=size(A, 1) "Number of states";
          final parameter Integer n_sen=size(C, 1) "Number of sensors";
          final parameter Real[n_p*n_sen, n_x] L=
              BaseClasses.ObservabilityMatrix(
                      A=A,
                      C=C,
                      n_p=n_p);
          final parameter Real[n_p*n_sen, n_act] Y=
              BaseClasses.YPredictionMatrix(
                      A=A,
                      B=B,
                      C=C,
                      n_p=n_p);
          final parameter Real[n_p*n_sen, n_c*n_act] Theta=
              BaseClasses.ThetaPredictionMatrix(
                      Y=Y,
                      n_c=n_c,
                      n_p=n_p);
          final parameter Real[n_c*n_act, n_p*n_sen] G_part=2*transpose(Theta)*
              10;
          final parameter Real[n_c*n_act, n_c*n_act] H=G_part*Theta + 2*
              identity(n_c*n_act);
          FCSys.WorkInProgress.Blocks.Math.AddSkipInclIncl addSkipInclIncl3(
              final isPos2=false, final n=n_x)
            annotation (Placement(transformation(extent={{100,-10},{80,10}})));
          FCSys.WorkInProgress.Blocks.Continuous.Sources.Constant xConst(final
              k=x_SS) annotation (Placement(transformation(extent={{120,-40},{
                    100,-20}})));
          Modelica.Blocks.Math.MatrixGain LGain(final K=L)
            annotation (Placement(transformation(extent={{70,-10},{50,10}})));
          FCSys.WorkInProgress.Blocks.Math.AddInclInclIncl addInclInclIncl(
              final n=n_p*n_sen, final isPos3=false)
            annotation (Placement(transformation(extent={{40,-10},{20,10}})));
          Modelica.Blocks.Math.MatrixGain G_partGain(final K=G_part)
            annotation (Placement(transformation(extent={{10,-10},{-10,10}})));
          FCSys.WorkInProgress.Blocks.Discrete.Controllers.BaseClasses.QPSolver
            qPSolver(
            final y_min=-Modelica.Constants.inf*ones(n_act),
            final y_max=Modelica.Constants.inf*ones(n_act),
            final H=H,
            final G=zeros(0, size(H, 2)),
            final n_y=n_act,
            final samplePeriod=samplePeriod,
            final startTime=startTime)
            annotation (Placement(transformation(extent={{-30,-10},{-50,10}})));
          FCSys.WorkInProgress.Blocks.Math.AddSkipInclIncl addSkipInclIncl2(
              final isPos2=false, final n=n_sen) annotation (Placement(
                transformation(
                extent={{10,10},{-10,-10}},
                rotation=270,
                origin={30,-60})));
          FCSys.WorkInProgress.Blocks.Continuous.Sources.Constant meaConst(
              final k=mea_SS)
            annotation (Placement(transformation(extent={{70,-70},{50,-50}})));
          FCSys.WorkInProgress.Blocks.Routing.Duplicate duplicate(final n_in=
                n_sen, final n_dup=n_p) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={30,-30})));
          FCSys.WorkInProgress.Blocks.Discrete.UnitDelay unitDelay(
            final y_0=zeros(n_act),
            final samplePeriod=samplePeriod,
            final startTime=startTime)
            annotation (Placement(transformation(extent={{-100,30},{-80,50}})));
          Modelica.Blocks.Math.MatrixGain YGain(final K=Y)
            annotation (Placement(transformation(extent={{-10,30},{10,50}})));
          FCSys.WorkInProgress.Blocks.Math.AddInclInclSkip addSkipInclIncl1(
              final n=n_act)
            annotation (Placement(transformation(extent={{-60,-10},{-80,10}})));

        equation
          connect(addInclInclIncl.y, G_partGain.u) annotation (Line(
              points={{21,6.10623e-16},{18.75,6.10623e-16},{18.75,1.27676e-15},
                  {16.5,1.27676e-15},{16.5,6.66134e-16},{12,6.66134e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(YGain.y, addInclInclIncl.u_1) annotation (Line(
              points={{11,40},{30,40},{30,9}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl3.y, LGain.u) annotation (Line(
              points={{81,6.10623e-16},{78.75,6.10623e-16},{78.75,1.27676e-15},
                  {76.5,1.27676e-15},{76.5,6.66134e-16},{72,6.66134e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(xConst.y, addSkipInclIncl3.u_2) annotation (Line(
              points={{99,-30},{90,-30},{90,-9}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(duplicate.y, addInclInclIncl.u_3) annotation (Line(
              points={{30,-19},{30,-9}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));
          connect(addSkipInclIncl2.y, duplicate.u) annotation (Line(
              points={{30,-51},{30,-41}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));
          connect(meaConst.y, addSkipInclIncl2.u_2) annotation (Line(
              points={{49,-60},{39,-60}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(LGain.y, addInclInclIncl.u_2) annotation (Line(
              points={{49,6.10623e-16},{46.25,6.10623e-16},{46.25,1.27676e-15},
                  {43.5,1.27676e-15},{43.5,6.10623e-16},{39,6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(ref, addSkipInclIncl2.u_1) annotation (Line(
              points={{5.55112e-16,-100},{5.55112e-16,-80},{30,-80},{30,-69}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));
          connect(x, addSkipInclIncl3.u_1) annotation (Line(
              points={{140,5.55112e-16},{129.75,5.55112e-16},{129.75,
                  1.16573e-15},{119.5,1.16573e-15},{119.5,6.10623e-16},{99,
                  6.10623e-16}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));
          connect(qPSolver.J_set, G_partGain.y) annotation (Line(
              points={{-29,8},{-20,8},{-20,6.10623e-16},{-11,6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(unitDelay.y, YGain.u) annotation (Line(
              points={{-79,40},{-12,40}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));
          connect(addSkipInclIncl1.y, unitDelay.u) annotation (Line(
              points={{-79,6.10623e-16},{-110,6.10623e-16},{-110,40},{-101,40}},

              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));

          connect(addSkipInclIncl1.y, act) annotation (Line(
              points={{-79,6.10623e-16},{-94.25,6.10623e-16},{-94.25,
                  1.16573e-15},{-109.5,1.16573e-15},{-109.5,5.55112e-16},{-140,
                  5.55112e-16}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));

          connect(addSkipInclIncl1.u_2, qPSolver.y) annotation (Line(
              points={{-61,6.10623e-16},{-60.75,6.10623e-16},{-60.75,
                  1.27676e-15},{-57.5,1.27676e-15},{-57.5,6.10623e-16},{-51,
                  6.10623e-16}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));
          connect(unitDelay.y, addSkipInclIncl1.u_1) annotation (Line(
              points={{-79,40},{-70,40},{-70,9}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics={Text(
                          extent={{-100,40},{100,-40}},
                          lineColor={0,0,255},
                          textString="MPC")}), Diagram(coordinateSystem(
                  preserveAspectRatio=true, extent={{-140,-100},{140,100}}),
                graphics));

        end MPC;

        block MPCWRej "Model predictive controller with disturbance rejection"
          extends
            FCSys.WorkInProgress.Blocks.Discrete.BaseClasses.DiscreteBlock;
          parameter Real K_fb[:, :]=ones(1, 1)
            "Feedback gain (estimated state to actuation)";
          parameter Real K_ff[size(K_fb, 1), :]=ones(size(K_fb, 1), 1)
            "Feedforward gain (reference to actuation)";
          parameter Real K_opt[n_bG, size(K_fb, 2) + size(K_ff, 2)]=ones(n_bG,
              n_x + n_ref)
            "Optimizer gain ([estimated state; estimated disturbance; reference] to dynamic optimizer constraint)";
          parameter Real H[:, size(H, 1)]={if i == j then 1 else 0 for j in 1:5,
              i in 1:5} "Hessian matrix of the quadratic problem  (QP)";
          // If the default is identity(5) in Dymola 7.4, the parameter dialog doesn't allow the values
          // to be loaded from a MAT file, so the identity matrix is created by nested loops.
          parameter Real J[size(H, 1)] "Jacobian vector of the QP";
          parameter Real G[:, size(H, 1)]=zeros(1, size(H, 1))
            "<html>Matrix for constraints of type <b>Gx_min &le; G x &le; Gx_max</b> in the QP</html>";
          parameter Real Gx_max_const[size(G, 1)]=zeros(size(G, 1))
            "<html>Offset for constraints of type <b>Gx_min &le; G x &le; Gx_max</b> in the QP</html>";
          final parameter Integer n_act=size(K_fb, 1) "Number of actuators";
          final parameter Integer n_x=size(K_fb, 2) "Number of states";
          final parameter Integer n_c=integer(size(H, 1)/n_act)
            "Control horizon";
          final parameter Integer n_ref=size(K_ff, 2)
            "Number of reference signals";
          final parameter Integer n_DOF=n_c*n_act
            "Number of degrees of freedom in the quadratic programming problem";
          final parameter Integer n_bG=size(G, 1)
            "<html>Number of bounds of the form <b>Gx_min &le; G x &le; Gx_max</b></html>";
          Connectors.RealInput x[n_x] "State" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={100,0}), iconTransformation(extent={{120,-10},{100,10}})));
          Connectors.RealInput ref[n_ref] "Reference" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={0,-80}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={0,-110})));
          Connectors.RealOutput act[n_act] "Actuation" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-100,0}),iconTransformation(extent={{-100,-10},{-120,10}})));
          Modelica.Blocks.Routing.Multiplex2 concatenate(final n1=n_x,final n2=
                n_ref)
            annotation (Placement(transformation(extent={{70,-10},{50,10}})));
          Modelica.Blocks.Math.MatrixGain optimizerGain(final K=K_opt)
            annotation (Placement(transformation(extent={{30,-10},{10,10}})));
          FCSys.WorkInProgress.Blocks.Math.AddSkipInclIncl addSkipInclIncl1(
              final n=n_bG)
            annotation (Placement(transformation(extent={{0,-10},{-20,10}})));
          FCSys.WorkInProgress.Blocks.Continuous.Sources.Constant
            constConstraint(final k=Gx_max_const)
            annotation (Placement(transformation(extent={{30,-40},{10,-20}})));
          FCSys.WorkInProgress.Blocks.Discrete.Controllers.BaseClasses.QPSolver
            qPSolver(
            final H=H,
            final J=J,
            final G=G,
            final JAsParam=true,
            final n_y=n_act,
            final AxMaxAsParam=false,
            final Gx_min=-Modelica.Constants.inf*ones(size(G, 1)),
            final y_min=-Modelica.Constants.inf*ones(n_act),
            final y_max=Modelica.Constants.inf*ones(n_act),
            final samplePeriod=samplePeriod,
            final startTime=startTime)
            annotation (Placement(transformation(extent={{-30,-10},{-50,10}})));
          FCSys.WorkInProgress.Blocks.Math.AddInclInclIncl addSkipInclIncl(
              final n=n_act)
            annotation (Placement(transformation(extent={{-60,-10},{-80,10}})));
          Modelica.Blocks.Math.MatrixGain feedforwardGain(final K=K_ff)
            annotation (Placement(transformation(extent={{-30,-60},{-50,-40}})));
          Modelica.Blocks.Math.MatrixGain feedbackGain(final K=-K_fb)
            annotation (Placement(transformation(extent={{-30,40},{-50,60}})));

        equation
          connect(feedbackGain.u, x) annotation (Line(
              points={{-28,50},{80,50},{80,5.55112e-16},{100,5.55112e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(ref, feedforwardGain.u) annotation (Line(
              points={{5.55112e-16,-80},{5.55112e-16,-50},{-28,-50}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl.y, act) annotation (Line(
              points={{-79,6.10623e-16},{-94.25,6.10623e-16},{-94.25,
                  1.16573e-15},{-99.5,1.16573e-15},{-99.5,5.55112e-16},{-100,
                  5.55112e-16}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));
          connect(addSkipInclIncl.u_1, feedbackGain.y) annotation (Line(
              points={{-70,9},{-70,50},{-51,50}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));
          connect(concatenate.u1, x) annotation (Line(
              points={{72,6},{80,6},{80,5.55112e-16},{100,5.55112e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(ref, concatenate.u2) annotation (Line(
              points={{5.55112e-16,-80},{5.55112e-16,-50},{80,-50},{80,-6},{72,
                  -6}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));

          connect(optimizerGain.u, concatenate.y) annotation (Line(
              points={{32,6.66134e-16},{36.25,6.66134e-16},{36.25,1.27676e-15},
                  {40.5,1.27676e-15},{40.5,6.10623e-16},{49,6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl1.u_1, optimizerGain.y) annotation (Line(
              points={{-1,6.10623e-16},{0.75,6.10623e-16},{0.75,1.27676e-15},{
                  3.5,1.27676e-15},{3.5,6.10623e-16},{9,6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl1.u_2, constConstraint.y) annotation (Line(
              points={{-10,-9},{-10,-30},{9,-30}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(feedforwardGain.y, addSkipInclIncl.u_3) annotation (Line(
              points={{-51,-50},{-70,-50},{-70,-9}},
              color={0,0,127},
              smooth=Smooth.None,
              thickness=0.5));
          connect(qPSolver.Gx_max_set, addSkipInclIncl1.y) annotation (Line(
              points={{-29,-8},{-24,-8},{-24,6.10623e-16},{-19,6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl.u_2, qPSolver.y) annotation (Line(
              points={{-61,6.10623e-16},{-59.25,6.10623e-16},{-59.25,
                  1.27676e-15},{-56.5,1.27676e-15},{-56.5,6.10623e-16},{-51,
                  6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics={Text(
                          extent={{-100,40},{100,-40}},
                          lineColor={0,0,255},
                          textString="MPC")}), Diagram(coordinateSystem(
                  preserveAspectRatio=true, extent={{-100,-80},{100,80}}),
                graphics));

        end MPCWRej;

        package BaseClasses "Base classes (not generally for direct use)"
          extends Modelica.Icons.BasesPackage;
          block QPSolver "Dynamic quadratic programming problem solver"
            extends
              FCSys.WorkInProgress.Blocks.Discrete.BaseClasses.DiscreteBlock;
            parameter Real H[:, size(H, 1)] "Hessian matrix";
            parameter Integer n_y=1 "Length of the output vector";
            final parameter Integer n_x=size(H, 1)
              "<html>Number of degrees of freedom (i.e., length of <b>x</b> vector)</html>";
            parameter Boolean JAsParam=false "Use parameter for J" annotation (
                choices(__Dymola_checkBox=true), Dialog(
                joinNext=true,
                descriptionLabel=true,
                compact=true));
            parameter Real J[n_x]=zeros(n_x) "Jacobian vector"
              annotation (Dialog(enable=JAsParam));
            parameter Boolean yMinAsParam=true "Use parameter for y_min"
              annotation (choices(__Dymola_checkBox=true), Dialog(
                joinNext=true,
                descriptionLabel=true,
                compact=true));
            parameter Real y_min[n_y]=-ones(n_y) "Lower bound of output"
              annotation (Dialog(enable=yMinAsParam));
            parameter Boolean yMaxAsParam=true "Use parameter for y_max"
              annotation (choices(__Dymola_checkBox=true), Dialog(
                joinNext=true,
                descriptionLabel=true,
                compact=true));
            parameter Real y_max[n_y]=ones(n_y) "Upper bound of output"
              annotation (Dialog(enable=yMaxAsParam));
            parameter Real G[:, size(H, 1)] "Constraint matrix";
            final parameter Integer n_bG=size(G, 1);
            parameter Boolean GxMinAsParam=true
              "<html>Use parameter for Gx<sub>min</sub></html>" annotation (
                choices(__Dymola_checkBox=true), Dialog(
                joinNext=true,
                descriptionLabel=true,
                compact=true));
            parameter Real Gx_min[size(G, 1)]=-ones(size(G, 1))
              "<html>Lower bound of <b>G x</b></html>"
              annotation (Dialog(enable=GxMinAsParam));
            parameter Boolean AxMaxAsParam=true
              "<html>Use parameter for Gx<sub>max</sub></html>" annotation (
                choices(__Dymola_checkBox=true), Dialog(
                joinNext=true,
                descriptionLabel=true,
                compact=true));
            parameter Real Gx_max[size(G, 1)]=ones(size(G, 1))
              "<html>Upper bound of <b>G x</b></html>"
              annotation (Dialog(enable=AxMaxAsParam));
            Connectors.RealInput J_set[n_x] if (not JAsParam)
              "Jacobian vector of the quadratic programming problem"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-100,80}),iconTransformation(extent={{-120,70},{-100,
                      90}})));
            Connectors.RealInput y_min_set[n_y] if (not yMinAsParam)
              "Lower bound of output" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-100,40}), iconTransformation(extent={{-120,30},{-100,
                      50}})));
            Connectors.RealInput y_max_set[n_y] if (not yMaxAsParam)
              "Upper bound of output" annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-100,0}),iconTransformation(extent={{-120,-10},{-100,
                      10}})));
            Connectors.RealInput Gx_min_set[n_bG] if (not GxMinAsParam)
              "<html>Lower bound of <b>A x</b></html>" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-100,-40}),iconTransformation(extent={{-120,-50},{-100,
                      -30}})));
            Connectors.RealInput Gx_max_set[n_bG] if (not AxMaxAsParam)
              "<html>Upper bound of <b>A x</b></html>" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-100,-80}),iconTransformation(extent={{-120,-90},{-100,
                      -70}})));
            Connectors.RealOutput y[n_y] "Solution of the optimization"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={100,0}), iconTransformation(extent={{100,-10},{120,10}})));

          protected
            Real x_min[n_x] "<html>Lower bound of <b>x</b></html>";
            Real x_max[n_x] "<html>Upper bound of <b>x</b></html>";
            Real obj;
            Real x[n_x] "Solution of quadratic programming problem";
            Real z[n_x + n_bG];
            Integer n_WSR "Number of working set recalculations";
            Integer ret "Return status";
            FCSys.WorkInProgress.Blocks.Discrete.Controllers.BaseClasses.qpOASESmem
              mem=qpOASESmem(
                          mode=if n_bG == 0 then "Simple bounds" else "Normal",
                          n_x=n_x,
                          n_bG=n_bG)
              "Memory object for the quadratic programming problem";
            Connectors.RealInput J_internal[n_x]
              "Internal connector for the Jacobian vector of the quadratic problem"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-70,80}),iconTransformation(extent={{120,-20},{80,20}})));
            Connectors.RealInput y_min_internal[n_y]
              "Internal connector for lower bound of output" annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-70,40}), iconTransformation(extent={{120,-20},{80,20}})));
            Connectors.RealInput y_max_internal[n_y]
              "Internal connector for upper bound of output" annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-70,0}),iconTransformation(extent={{120,-20},{80,20}})));
            Connectors.RealInput Gx_min_internal[n_bG]
              "<html>Internal connector for lower bound of <b>A x</b></html>"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-70,-40}), iconTransformation(extent={{120,-20},{80,
                      20}})));
            Connectors.RealInput Gx_max_internal[n_bG]
              "<html>Internal connector for upper bound of <b>A x</b></html>"
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-70,-80}),iconTransformation(extent={{120,-20},{80,20}})));

          algorithm
            when (sampleTrigger) then
              for i in 1:integer(n_x/n_y) loop
                x_min[n_y*(i - 1) + 1:n_y*i] := y_min_internal;
                x_max[n_y*(i - 1) + 1:n_y*i] := y_max_internal;
              end for;
              if (firstTrigger) then
                FCSys.WorkInProgress.Blocks.Discrete.Controllers.BaseClasses.Init(
                            mem=mem,
                            H=H,
                            J=J_internal,
                            G=G,
                            x_min=x_min,
                            x_max=x_max,
                            Gx_min=Gx_min_internal,
                            Gx_max=Gx_max_internal);
              else
                FCSys.WorkInProgress.Blocks.Discrete.Controllers.BaseClasses.Hotstart(
                            mem=mem,
                            J=J_internal,
                            x_min=x_min,
                            x_max=x_max,
                            Gx_min=Gx_min_internal,
                            Gx_max=Gx_max_internal);
              end if;
              (obj,x,z,n_WSR,ret) :=
                FCSys.WorkInProgress.Blocks.Discrete.Controllers.BaseClasses.GetInfo(
                          mem=mem,
                          n_x=n_x,
                          n_bG=n_bG);
              y := x[1:n_y];
            end when;

          equation
            if JAsParam then
              J_internal = J;
            end if;
            if yMinAsParam then
              y_min_internal = y_min;
            end if;
            if yMaxAsParam then
              y_max_internal = y_max;
            end if;
            if GxMinAsParam then
              Gx_min_internal = Gx_min;
            end if;
            if AxMaxAsParam then
              Gx_max_internal = Gx_max;
            end if;
            connect(y_max_internal, y_max_set) annotation (Line(
                points={{-70,5.55112e-16},{-77.5,5.55112e-16},{-77.5,
                    1.11022e-15},{-85,1.11022e-15},{-85,5.55112e-16},{-100,
                    5.55112e-16}},
                color={0,0,127},
                thickness=0.5,
                smooth=Smooth.None));
            connect(y_min_internal, y_min_set) annotation (Line(
                points={{-70,40},{-100,40}},
                color={0,0,127},
                thickness=0.5,
                smooth=Smooth.None));
            connect(Gx_max_internal, Gx_max_set) annotation (Line(
                points={{-70,-80},{-100,-80}},
                color={0,0,127},
                thickness=0.5,
                smooth=Smooth.None));
            connect(Gx_min_internal, Gx_min_set) annotation (Line(
                points={{-70,-40},{-100,-40}},
                color={0,0,127},
                thickness=0.5,
                smooth=Smooth.None));
            connect(J_internal, J_set) annotation (Line(
                points={{-70,80},{-100,80}},
                color={0,0,127},
                thickness=0.5,
                smooth=Smooth.None));
            annotation (Documentation(
                info="<html><p>Dynamically solves a quadratic programming problem to find <b>x</b> that minimizes:
  <ul><li><b>0.5 x<sup>T</sup> H x + x<sup>T</sup> J</b></li></ul>
  <p>Subject to:
  <ul>
  <li><b>y_min &le; y &le; y_max</b></li>
  <li><b>xA_min &le; A x &le; xA_max</b></li>
  </ul>
  where <b>x</b> consists of <b>n_x/n_y</b> repetitions of <b>y</b> (<b>x = {y, y, &hellip;}</b>).  <b>n_y</b> is a parameter and <b>n_x</b> is determined by the size of <b>H</b>.
  <p><b>y</b> is a dynamic output.  <b>H</b> and <b>A</b> are parameters.  <b>J</b>, <b>y_min</b>, <b>y_max</b>, <b>xA_min</b>, and <b>xA_max</b> can be chosen as parameters or as dynamic inputs.</p></html>",

                Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                        -100},{100,100}}), graphics),
                experiment(StopTime=2),
                Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                        {100,100}}), graphics={Text(
                                extent={{-100,40},{100,-40}},
                                lineColor={0,0,255},
                                textString="QP")}),
                Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                        {100,100}}), graphics={Text(
                                extent={{-100,40},{100,-40}},
                                lineColor={0,0,255},
                                textString="QP")}),
                Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                        -100},{100,100}}), graphics)));

          end QPSolver;

          function GetInfo "<html>Get information about the solution of a quadratic programming problem to find <b>x</b> that minimizes:
  <ul><li><b>0.5 x<sup>T</sup> H x + x<sup>T</sup> J</b></li></ul>
  <p>Subject to:
  <ul>
  <li><b>x<sub>min</sub> &le; x &le; x<sub>max</sub></b></li>
  <li><b>Gx<sub>min</sub> &le; G x &le; Gx<sub>max</sub></b></li>
  </ul></html>"
            extends Modelica.Icons.Function;
            input qpOASESmem mem "Quadratic problem object";
            input Integer n_x
              "<html>Number of degrees of freedom (i.e., length of <b>x</b> vector)</html>";
            input Integer n_bG=0
              "<html>Number of bounds of the form <b>Gx<sub>min</sub> &le; G x &le; Gx<sub>max</sub></b></html>";
            output Real obj;
            output Real[n_x] x "Solution of problem";
            output Real[n_x + n_bG] y;
            output Integer n_WSR "Number of working set recalculations";
            output Integer ret "Return status";
          external"C" ret = qpoases_getInfo(
                        mem,
                        obj,
                        x,
                        y,
                        n_WSR);
            annotation (Include=
                  "#include \"FCSys/resources/source/C/qpOASES_C.h\"", Library=
                  "qpOASES");
            /*
   Note:  As of Dymola 7.4, may need to use this in Windows:
    Library="FCSys/bin/qpOASES"
   and this in Linux:
    Library="qpOASES"
  */

          end GetInfo;

          function Hotstart "<html>Restart a quadratic programming problem to find <b>x</b> that minimizes:
  <ul><li><b>0.5 x<sup>T</sup> H x + x<sup>T</sup> J</b></li></ul>
  <p>Subject to:
  <ul>
  <li><b>x<sub>min</sub> &le; x &le; x<sub>max</sub></b></li>
  <li><b>Gx<sub>min</sub> &le; G x &le; Gx<sub>max</sub></b></li>
  </ul></html>"
            extends Modelica.Icons.Function;
            input qpOASESmem mem "Quadratic problem object";
            input Real[:, :] H=zeros(0, 0)
              "Hessian matrix of the quadratic problem";
            input Real[:] J=zeros(0) "Jacobian vector of the quadratic problem";
            input Real[:, :] G=zeros(0, 0)
              "Constraint matrix of the quadratic problem";
            input Real[:] x_min=zeros(0) "<html>Lower bound of <b>x</b></html>";
            input Real[:] x_max=zeros(0) "<html>Upper bound of <b>x</b></html>";
            input Real[:] Gx_min=zeros(0)
              "<html>Lower bound of <b>G x</b></html>";
            input Real[:] Gx_max=zeros(0)
              "<html>Upper bound of <b>G x</b></html>";
            output Integer ret "Return status";
          external"C" ret = qpoases_hotstart(
                        mem,
                        H,
                        J,
                        G,
                        x_min,
                        x_max,
                        Gx_min,
                        Gx_max);
            annotation (Include=
                  "#include \"FCSys/resources/source/C/qpOASES_C.h\"", Library=
                  "qpOASES");
            /*
   Note:  As of Dymola 7.4, may need to use this in Windows:
    Library="FCSys/bin/qpOASES"
   and this in Linux:
    Library="qpOASES"
  */

          end Hotstart;

          function Init "<html>Initialize a quadratic programming problem to find <b>x</b> that minimizes:
  <ul><li><b>0.5 x<sup>T</sup> H x + x<sup>T</sup> J</b></li></ul>
  <p>Subject to:
  <ul>
  <li><b>x<sub>min</sub> &le; x &le; x<sub>max</sub></b></li>
  <li><b>Gx<sub>min</sub> &le; G x &le; Gx<sub>max</sub></b></li>
  </ul></html>"
            extends Modelica.Icons.Function;
            input qpOASESmem mem "Quadratic problem object";
            input Real[:, size(H, 1)] H
              "Hessian matrix of the quadratic problem";
            input Real[:] J "Jacobian vector of the quadratic problem";
            input Real[:, :] G=zeros(0, 0)
              "Constraint matrix of the quadratic problem";
            input Real[:] x_min=zeros(0) "<html>Lower bound of <b>x</b></html>";
            input Real[:] x_max=zeros(0) "<html>Upper bound of <b>x</b></html>";
            input Real[:] Gx_min=zeros(0)
              "<html>Lower bound of <b>G x</b></html>";
            input Real[:] Gx_max=zeros(0)
              "<html>Upper bound of <b>G x</b></html>";
            input Integer n_x=size(x_min, 1)
              "<html>Number of degrees of freedom (i.e., length of <b>x</b> vector)</html>";
            input Integer n_bG=size(Gx_min, 1)
              "<html>Number of bounds of the form <b>Gx<sub>min</sub> &le; G x &le; Gx<sub>max</sub></b></html>";
            input Integer n_WSR_max=10
              "Maximum number of working set recalculations";
            output Integer ret "Return status";
          external"C" ret = qpoases_init(
                        mem,
                        H,
                        J,
                        G,
                        x_min,
                        x_max,
                        Gx_min,
                        Gx_max,
                        n_x,
                        n_bG,
                        n_WSR_max);
            annotation (Include=
                  "#include \"FCSys/resources/source/C/qpOASES_C.h\"", Library=
                  "qpOASES");
            /*
   Note:  As of Dymola 7.4, may need to use this in Windows:
    Library="FCSys/bin/qpOASES"
   and this in Linux:
    Library="qpOASES"
  */

          end Init;

          class qpOASESmem
            "Construct/destruct a memory object for a quadratic programming problem"
            extends ExternalObject;
            function constructor "<html>Construct a memory object for a quadratic programming problem to find <b>x</b> that minimizes:
  <ul><li><b>0.5 x<sup>T</sup> H x + x<sup>T</sup> J</b></li></ul>
  <p>Subject to:
  <ul>
  <li><b>x<sub>min</sub> &le; x &le; x<sub>max</sub></b></li>
  <li><b>Gx<sub>min</sub> &le; G x &le; Gx<sub>max</sub></b></li>
  </ul></html>"
              extends Modelica.Icons.Function;
              input String mode="Normal"
                "<html>\"Simple bounds\" (when only bounds of type <b>x<sub>min</sub> &le; x &le; x<sub>max</sub></b>) are included or \"Normal\" (when bounds of type <b>Gx<sub>min</sub> &le; G*x &le; Gx<sub>max</sub></b> are also included) or **??</html>";
              input Integer n_x
                "<html>Number of degrees of freedom (i.e., length of <b>x</b> vector)</html>";
              input Integer n_bG=0
                "<html>Number of bounds of the form <b>Gx<sub>min</sub> &le; G x &le; Gx<sub>max</sub></b></html>";
              output qpOASESmem mem
                "Quadratic programming problem memory object";
            external"C" mem = qpoases_create(
                            mode,
                            n_x,
                            n_bG);
              annotation (Include=
                    "#include \"FCSys/resources/source/C/qpOASES_C.h\"",
                  Library="qpOASES");
              /*
   Note:  As of Dymola 7.4, may need to use this in Windows:
    Library="FCSys/bin/qpOASES"
   and this in Linux:
    Library="qpOASES"
  */

            end constructor;

            function destructor
              "Destruct a memory object for a quadratic programming problem"
              extends Modelica.Icons.Function;
              input qpOASESmem mem
                "Quadratic programming problem memory object";
            external"C" qpoases_free(mem);
              annotation (Include=
                    "#include \"FCSys/resources/source/C/qpOASES_C.h\"",
                  Library="qpOASES");
              /*
   Note:  As of Dymola 7.4, may need to use this in Windows:
    Library="FCSys/bin/qpOASES"
   and this in Linux:
    Library="qpOASES"
  */

            end destructor;

          end qpOASESmem;

          function ObservabilityMatrix "Calculate observability matrix"
            extends Modelica.Icons.Function;
            input Real[:, size(A, 1)] A "System matrix";
            input Real[:, size(A, 1)] C "Output matrix";
            input Integer n_p "Prediction horizon";
            output Real[n_p*size(C, 1), size(A, 1)] L "Observability matrix";

          protected
            constant Integer n_sen=size(C, 1) "Number of sensors";

          algorithm
            // Only suitable for stable plants, since numerical problems for computing A^i may/will arise for unstable systems
            // see Maciejowski, p. 56 (and [RWR98])
            L[1:n_sen, :] := C*A;
            for i in 2:n_p loop
              L[(i - 1)*n_sen + 1:i*n_sen, :] := L[(i - 2)*n_sen + 1:(i - 1)*
                n_sen, :]*A;
            end for;

          end ObservabilityMatrix;

          function ThetaPredictionMatrix "Calculate Theta prediction matrix"
            extends Modelica.Icons.Function;
            input Real[:, :] Y;
            input Integer n_c "Control horizon";
            input Integer n_p "Prediction horizon";
            output Real[size(Y, 1), n_c*size(Y, 2)] Theta;

          protected
            constant Integer n_act=size(Y, 2) "Number of actuators";
            constant Integer n_sen=integer(size(Y, 1)/n_p) "Number of sensors";

          algorithm
            Theta := zeros(size(Theta, 1), size(Theta, 2));
            for i in 1:n_c loop
              Theta[(i - 1)*n_sen + 1:size(Theta, 1), (i - 1)*n_act + 1:i*n_act]
                := Y[1:size(Y, 1) - (i - 1)*n_sen, :];
            end for;

          end ThetaPredictionMatrix;

          function YPredictionMatrix "Calculate Y prediction matrix"
            extends Modelica.Icons.Function;
            input Real[:, size(A, 1)] A "System matrix";
            input Real[size(A, 1), :] B "Input matrix";
            input Real[:, size(A, 1)] C "Output matrix";
            input Integer n_p "Prediction horizon";
            output Real[n_p*size(C, 1), size(B, 2)] Y;

          protected
            constant Integer n_act=size(B, 2) "Number of actuators";
            constant Integer n_x=size(A, 1) "Number of states";
            constant Integer n_sen=size(C, 1) "Number of sensors";
            Real[n_sen, n_act] Y_new_part=zeros(n_sen, n_act);
            Real[n_x, n_x] A_raised_i=identity(n_x);

          algorithm
            // Only suitable for stable plants, since numerical problems for computing A^i may/will arise for unstable systems
            // see Maciejowski, p. 56 (and [RWR98])
            for i in 0:n_p - 1 loop
              Y_new_part := Y_new_part + C*A_raised_i*B;
              Y[i*n_sen + 1:(i + 1)*n_sen, :] := Y_new_part;
              A_raised_i := A*A_raised_i;
            end for;

          end YPredictionMatrix;

        end BaseClasses;

      end Controllers;

      package Observers
        extends Modelica.Icons.Package;
        block Observer
          extends
            FCSys.WorkInProgress.Blocks.Discrete.BaseClasses.DiscreteBlock;
          parameter Real A[:, size(A, 1)]
            "System gain of state space model (old state to new state)";
          parameter Real B[size(A, 1), :]
            "Input gain of state space model (actuation to new state)";
          parameter Real C[:, n_x]
            "Output gain of state space model (old state to measurement)";
          parameter Real L[size(A, 1), size(C, 1)]
            "Observer gain (measurement to new state)";
          // Can be calculated in MATLAB via the following, where A and C are the system and output matrices of the plant model in discrete time:
          // LT = dlqr(A',C',eye(n_x),eye(n_sen)*1e-5);
          // L = LT'
          parameter Real x_0[n_x]=zeros(n_x) "Initial state";
          final parameter Integer n_act=size(B, 2) "Number of actuators";
          final parameter Integer n_x=size(A, 1) "Number of states";
          final parameter Integer n_sen=size(C, 1) "Number of sensors";
          Connectors.RealInput act[n_act] "Actuation" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-100,0}), iconTransformation(extent={{-120,-10},{-100,
                    10}})));
          Connectors.RealOutput x[n_x] "Estimated state" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={10,-100}), iconTransformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={0,-110})));
          Connectors.RealInput sen[n_sen] "Sensor measurement" annotation (
              Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={100,0}), iconTransformation(extent={{120,-10},{100,10}})));
          FCSys.WorkInProgress.Blocks.Discrete.UnitDelay xDelay(
            final samplePeriod=samplePeriod,
            final startTime=startTime,
            final y_0=x_0) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={10,-30})));
          Modelica.Blocks.Math.MatrixGain Lgain(final K=L)
            annotation (Placement(transformation(extent={{50,-10},{30,10}})));
          Modelica.Blocks.Math.MatrixGain Bgain(final K=B)
            annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
          Modelica.Blocks.Math.MatrixGain Again(final K=A) annotation (
              Placement(transformation(extent={{-10,-70},{-30,-50}})));
          Modelica.Blocks.Math.MatrixGain Cgain(final K=C)
            annotation (Placement(transformation(extent={{30,-70},{50,-50}})));
          FCSys.WorkInProgress.Blocks.Math.AddSkipInclIncl addSkipInclIncl1(
              final n=n_x)
            annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));
          FCSys.WorkInProgress.Blocks.Math.AddInclSkipIncl addInclSkipIncl(
              final n=n_x) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={10,0})));
          FCSys.WorkInProgress.Blocks.Math.AddSkipInclIncl addSkipInclIncl2(
              final isPos2=false, final n=n_sen)
            annotation (Placement(transformation(extent={{80,-10},{60,10}})));

        equation
          connect(addInclSkipIncl.y, xDelay.u) annotation (Line(
              points={{10,-9},{10,-14},{10,-19},{10,-19}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl2.y, Lgain.u) annotation (Line(
              points={{61,6.10623e-16},{58.75,6.10623e-16},{58.75,1.27676e-15},
                  {56.5,1.27676e-15},{56.5,6.66134e-16},{52,6.66134e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(Lgain.y, addInclSkipIncl.u_1) annotation (Line(
              points={{29,6.10623e-16},{23.5,6.10623e-16},{23.5,-1.15362e-15},{
                  19,-1.15362e-15}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addInclSkipIncl.u_2, addSkipInclIncl1.y) annotation (Line(
              points={{1,2.15282e-15},{-20,2.15282e-15},{-20,6.10623e-16},{-31,
                  6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));

          connect(addSkipInclIncl1.u_1, Bgain.y) annotation (Line(
              points={{-49,6.10623e-16},{-50.75,6.10623e-16},{-50.75,
                  1.27676e-15},{-53.5,1.27676e-15},{-53.5,6.10623e-16},{-59,
                  6.10623e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(Bgain.u, act) annotation (Line(
              points={{-82,6.66134e-16},{-99,6.66134e-16},{-99,1.77636e-15},{-98,
                  1.77636e-15},{-98,5.55112e-16},{-100,5.55112e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(Again.y, addSkipInclIncl1.u_2) annotation (Line(
              points={{-31,-60},{-40,-60},{-40,-9}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(Again.u, xDelay.y) annotation (Line(
              points={{-8,-60},{10,-60},{10,-41}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(Cgain.u, xDelay.y) annotation (Line(
              points={{28,-60},{10,-60},{10,-41}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(xDelay.y, x) annotation (Line(
              points={{10,-41},{10,-70.5},{10,-100},{10,-100}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl2.u_1, sen) annotation (Line(
              points={{79,6.10623e-16},{88.5,6.10623e-16},{88.5,1.77636e-15},{
                  99,1.77636e-15},{99,5.55112e-16},{100,5.55112e-16}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          connect(addSkipInclIncl2.u_2, Cgain.y) annotation (Line(
              points={{70,-9},{70,-60},{51,-60}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics), Diagram(coordinateSystem(
                  preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                graphics));

        end Observer;

      end Observers;

      package Plants
        extends Modelica.Icons.Package;
        block StateSpace "Discrete State Space block"
          parameter Real A[:, size(A, 1)] "Matrix A of state space model";
          parameter Real B[size(A, 1), :] "Matrix B of state space model";
          parameter Real C[:, size(A, 1)] "Matrix C of state space model";
          parameter Real D[size(C, 1), size(B, 2)]=zeros(size(C, 1), size(B, 2))
            "Matrix D of state space model";
          extends Modelica.Blocks.Interfaces.DiscreteMIMO(final nin=size(B, 2),
              final nout=size(C, 1));
          output Real x[size(A, 1)] "State vector";

        equation
          when sampleTrigger then
            x = A*pre(x) + B*u;
            y = C*pre(x) + D*u;
          end when;
          annotation (Documentation(
              info="<html>
<p>The <b>discrete state space</b> block defines the relation
between the input u=inPort.signal and the output
y=outPort.signal in state space form:</p>
<pre>
    x = A * pre(x) + B * u
    y = C * pre(x) + D * u
</pre>
<p>where pre(x) is the value of the discrete state x at
the previous sample time instant.
The input is a vector of length nu, the output is a vector
of length n_y and n_x is the number of states. Accordingly</p>
<pre>
        A has the dimension: A(n_x,n_x),
        B has the dimension: B(n_x,nu),
        C has the dimension: 'C+'(n_y,n_x),
        D has the dimension: D(n_y,nu)
</pre>
<p>Example:</p>
<pre>
     parameter: A = [0.12, 2;3, 1.5]
     parameter: B = [2, 7;3, 1]
     parameter: C = [0.1, 2]
     parameter: D = zeros(n_y,nu)

results in the following equations:
  [x[1]]   [0.12  2.00] [pre(x[1])]   [2.0  7.0] [u[1]]
  [    ] = [          ]*[         ] + [        ]*[    ]
  [x[2]]   [3.00  1.50] [pre(x[2])]   [0.1  2.0] [u[2]]
                             [pre(x[1])]            [u[1]]
       y[1]   = [0.1  2.0] * [         ] + [0  0] * [    ]
                             [pre(x[2])]            [u[2]]
</pre>
</html>
",
              Icon(coordinateSystem(
                  preserveAspectRatio=true,
                  extent={{-100,-100},{100,100}},
                  grid={2,2}), graphics={Text(
                            extent={{-90,15},{-15,90}},
                            textString="A",
                            lineColor={0,0,127}),Text(
                            extent={{15,15},{90,90}},
                            textString="B",
                            lineColor={0,0,127}),Text(
                            extent={{-52,28},{54,-20}},
                            textString="z",
                            lineColor={0,0,127}),Text(
                            extent={{-90,-15},{-15,-90}},
                            textString="C",
                            lineColor={0,0,127}),Text(
                            extent={{15,-15},{90,-90}},
                            textString="D",
                            lineColor={0,0,127})}),
              Diagram(coordinateSystem(
                  preserveAspectRatio=true,
                  extent={{-100,-100},{100,100}},
                  grid={2,2}), graphics)));

        end StateSpace;

        model StateSpaceWNoise
          extends
            FCSys.WorkInProgress.Blocks.Discrete.Plants.BaseClasses.PartialPlant(
              redeclare Continuous.Plants.StateSpace plant(
              A=A,
              B=B,
              C=C,
              x_0=x_0));
          parameter Real A[:, size(A, 1)]=identity(2)
            "System gain of continuous-time state space model (state to derivative of state)";
          parameter Real B[size(A, 1), :]=identity(2)
            "Input gain of continuous-time state space model (actuation to derivative of state)";
          parameter Real C[:, size(A, 1)]=identity(2)
            "Output gain of continuous-time state space model (state to measurement)";
          // final parameter Integer n_in=size(B, 2) "Number of actuators";
          final parameter Integer n_x=size(A, 1) "Number of states";
          // final parameter Integer n_out=size(C, 1) "Number of sensors";
          parameter Real x_0[n_x]=zeros(n_x) "Initial states of the plant"
            annotation (Dialog(group="Initial Conditions"));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                graphics));

        end StateSpaceWNoise;

        model Pendulum
          extends
            FCSys.WorkInProgress.Blocks.Discrete.Plants.BaseClasses.PartialPlant(
              redeclare Continuous.Plants.Pendulum plant);
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                graphics={Ellipse(
                          extent={{10,80},{30,60}},
                          lineColor={215,215,215},
                          fillColor={0,0,0},
                          fillPattern=FillPattern.Sphere,
                          lineThickness=0.5),Line(
                          points={{20,70},{0,0}},
                          color={0,0,0},
                          smooth=Smooth.None,
                          thickness=0.5),Line(
                          points={{50,0},{-50,0}},
                          color={0,0,0},
                          smooth=Smooth.None,
                          origin={0,0},
                          rotation=180,
                          thickness=0.5),Polygon(
                          points={{-48,6},{-60,0},{-48,-6},{-48,6}},
                          smooth=Smooth.None,
                          fillColor={0,0,0},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.None),Polygon(
                          points={{6,6},{-6,0},{6,-6},{6,6}},
                          smooth=Smooth.None,
                          fillColor={0,0,0},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.None,
                          origin={54,0},
                          rotation=180),Ellipse(
                          extent={{-4,4},{4,-4}},
                          lineColor={0,0,0},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          lineThickness=0.5)}));

        end Pendulum;

        package BaseClasses "Base classes (not generally for direct use)"
          extends Modelica.Icons.BasesPackage;
          partial model PartialPlant
            extends
              FCSys.WorkInProgress.Blocks.Discrete.BaseClasses.DiscreteBlock;
            extends FCSys.WorkInProgress.Blocks.BaseClasses.MI(final n_in=plant.n_in);
            extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(final n_out=
                  plant.n_out);
            // extends FCSys.Blocks.Discrete.BaseClasses.DiscreteBlock;
            FCSys.WorkInProgress.Blocks.Discrete.Sampler sample(
              each final samplePeriod=samplePeriod,
              final n=n_out,
              each final startTime=startTime)
              annotation (Placement(transformation(extent={{60,-10},{80,10}})));
            replaceable FCSys.WorkInProgress.Blocks.Discrete.ZeroOrderHold hold(
              each final samplePeriod=samplePeriod,
              y_0=zeros(n_in),
              each final startTime=startTime) constrainedby
              gas.H2.Data.Modelica.Blocks.Interfaces.DiscreteBlock annotation (
                choicesAllMatching=true, Placement(transformation(extent={{-80,
                      -10},{-60,10}})));
            replaceable Modelica.Blocks.Continuous.FirstOrder antiAliasing[
              n_out](each T=2*samplePeriod, each initType=Modelica.Blocks.Types.Init.SteadyState)
              constrainedby gas.H2.Data.Modelica.Blocks.Interfaces.BlockIcon
              annotation (choicesAllMatching=true, Placement(transformation(
                    extent={{20,-10},{40,10}})));
            replaceable
              FCSys.WorkInProgress.Blocks.Continuous.Plants.BaseClasses.PartialPlant
              plant constrainedby
              gas.H2.Data.zetaCSys.Blocks.Continuous.Plants.BaseClasses.PartialPlant
              annotation (choicesInPackage=true, Placement(transformation(
                    extent={{-40,-10},{-20,10}})));

          equation
            connect(antiAliasing.y, sample.u) annotation (Line(
                points={{41,6.10623e-16},{45.25,6.10623e-16},{45.25,1.27676e-15},
                    {49.5,1.27676e-15},{49.5,6.10623e-16},{59,6.10623e-16}},
                color={0,0,127},
                smooth=Smooth.None,
                thickness=0.5));
            connect(plant.y, antiAliasing.u) annotation (Line(
                points={{-19,6.10623e-16},{-9.75,6.10623e-16},{-9.75,
                    1.27676e-15},{-0.5,1.27676e-15},{-0.5,6.66134e-16},{18,
                    6.66134e-16}},
                color={0,0,127},
                smooth=Smooth.None,
                thickness=0.5));
            connect(hold.y, plant.u) annotation (Line(
                points={{-59,6.10623e-16},{-54.5,6.10623e-16},{-54.5,
                    1.22125e-15},{-50,1.22125e-15},{-50,6.10623e-16},{-41,
                    6.10623e-16}},
                color={0,0,127},
                smooth=Smooth.None,
                thickness=0.5));
            connect(sample.y, y) annotation (Line(
                points={{81,6.10623e-16},{85.75,6.10623e-16},{85.75,1.16573e-15},
                    {90.5,1.16573e-15},{90.5,5.55112e-16},{100,5.55112e-16}},
                color={0,0,127},
                thickness=0.5,
                smooth=Smooth.None));
            connect(u, hold.u) annotation (Line(
                points={{-100,5.55112e-16},{-95.25,5.55112e-16},{-95.25,
                    1.16573e-15},{-90.5,1.16573e-15},{-90.5,6.10623e-16},{-81,
                    6.10623e-16}},
                color={0,0,127},
                thickness=0.5,
                smooth=Smooth.None));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=true,
                    extent={{-100,-100},{100,100}}), graphics), Icon(
                  coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                      {100,100}}), graphics));

          end PartialPlant;

        end BaseClasses;

      end Plants;

      package Sources
        extends Modelica.Icons.SourcesPackage;
        model RandomNormal
          "Generate a sequence of normal (Gaussian) random numbers"
          extends FCSys.WorkInProgress.Blocks.BaseClasses.MO;
          extends
            FCSys.WorkInProgress.Blocks.Discrete.BaseClasses.DiscreteBlock(
              samplePeriod=0.002);
          parameter Real mu[:]=0*ones(n_out)
            "Mean or expected value(s) of the random signal(s)";
          parameter Real sigma[size(mu, 1)]=0.5*ones(n_out)
            "Standard deviation(s) of the random signal(s)"
            annotation (Evaluate=true);
          // Note KLD 1/8/10: without annotation(Evaluate=true), Dymola doesn't seem to recognize internal_twister_uniform() when sigma=ones(n_out)
          parameter Integer n_s=500 "Number of samples"
            annotation (Dialog(group="Advanced"));

        protected
          final parameter Real mu_internal[n_out]=(if size(mu, 1) == 1 then mu[
              1]*ones(n_out) else mu)
            "Mean or expected value(s) of random signal(s), with entries for every signal";
          final parameter Real sigma_internal[n_out]=(if size(sigma, 1) == 1
               then sigma[1]*ones(n_out) else sigma)
            "Standard deviation(s) of random signal(s), with entries for every signal";
          Real table[n_s, n_out](start=zeros(n_s, n_out), fixed=true)
            "Matrix of normal random numbers (the first column is time /s)";

        equation
          when firstTrigger then
            // (Re)generate the table of random numbers
            for i in 1:n_out loop
              // random numbers
              table[:, i] = FCSys.WorkInProgress.Blocks.BaseClasses.randn(
                        mu=mu_internal[i],
                        sigma=sigma_internal[i],
                        n=n_s);
            end for;
          end when;
          // Read data from table
          when sampleTrigger then
            y[:] = table[mod(integer(time/samplePeriod), n_s) + 1, :];
          end when;
          annotation (Documentation(info="<html><p>The values of the sequence are normally distributed with mean <code>mu</code> and standard deviation <code>sigma</code>. The random numbers are (re)generated at the start of every simulation.</p>

<p>Be sure to set <code>T_end</code> to be greater than or equal to the stop time of the simulation.  Otherwise, the sequence will be periodic over the simulation (i.e., it will repeat).</p>

<p>The model uses the Box-Muller transform to generate normal random numbers from uniform random numbers.  It generates the uniform random numbers using <code>internal_twister_uniform()</code>.  This function uses the Mersenne twister pseudorandom number generator and its implementation is specific to Dymola (i.e., not general to Modelica).</p></html>",
                revisions="<html>
<p><ul>
<li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2010/1/6:<br/>Original version using the Box-Muller transform; copied and modified portions of code from Modelica.Blocks.Sources.CombiTimeTable</li>
</ul></p>
</html>"), Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}),graphics={Polygon(
                          points={{0,8},{-8,-14},{8,-14},{0,8}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{0,-14},{
                  0,-70}}, color={192,192,192}),Polygon(
                          points={{90,-60},{68,-52},{68,-68},{90,-60}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Text(
                          extent={{68,-68},{92,-94}},
                          lineColor={175,175,175},
                          textString="x"),Polygon(
                          points={{-60,-60},{-30,-60},{-18,-54},{-12,-40},{-4,-18},
                    {4,-18},{12,-40},{18,-54},{30,-60},{60,-60},{-60,-60}},
                          lineColor={0,0,127},
                          smooth=Smooth.Bezier,
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{-90,-60},
                  {82,-60}}, color={192,192,192}),Polygon(
                          points={{-80,98},{-88,76},{-72,76},{-80,98}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{-80,76},
                  {-80,20}}, color={192,192,192}),Line(points={{-90,50},{82,50}},
                  color={192,192,192}),Polygon(
                          points={{90,50},{68,58},{68,42},{90,50}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Text(
                          extent={{68,42},{92,16}},
                          lineColor={175,175,175},
                          textString="t"),Line(
                          points={{-80,50},{-80,26}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-60,50},{-60,38}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-40,50},{-40,76}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-20,50},{-20,48}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{0,50},{0,82}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{20,50},{20,72}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{40,50},{40,74}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{60,50},{60,40}},
                          color={0,0,127},
                          smooth=Smooth.None),Ellipse(extent={{-44,80},{-36,72}},
                  lineColor={0,0,127}),Ellipse(extent={{-64,42},{-56,34}},
                  lineColor={0,0,127}),Ellipse(extent={{-84,30},{-76,22}},
                  lineColor={0,0,127}),Ellipse(extent={{-24,52},{-16,44}},
                  lineColor={0,0,127}),Ellipse(extent={{-4,86},{4,78}},
                  lineColor={0,0,127}),Ellipse(extent={{16,76},{24,68}},
                  lineColor={0,0,127}),Ellipse(extent={{36,78},{44,70}},
                  lineColor={0,0,127}),Ellipse(extent={{56,44},{64,36}},
                  lineColor={0,0,127})}));

        end RandomNormal;

        model RandomUniform "Generate a sequence of uniform random numbers"
          extends FCSys.WorkInProgress.Blocks.BaseClasses.MO;
          extends
            FCSys.WorkInProgress.Blocks.Discrete.BaseClasses.DiscreteBlock(
              samplePeriod=0.002);
          parameter Real x_min[:]=-0.5*ones(n_out)
            "Lower bound(s) of the random signal(s)";
          parameter Real x_max[size(x_min, 1)]=0.5*ones(n_out)
            "Upper bound(s) of the random signal(s)";
          parameter Integer n_s=500 "Number of samples"
            annotation (Dialog(group="Advanced"));

        protected
          final parameter Real x_min_internal[n_out]=(if size(x_min, 1) == 1
               then ones(n_out)*x_min[1] else x_min)
            "Lower bound(s) of random signal(s), with entries for every signal";
          final parameter Real x_max_internal[n_out]=(if size(x_max, 1) == 1
               then ones(n_out)*x_max[1] else x_max)
            "Upper bound(s) of random signal(s), with entries for every signal";
          Real table[n_s, n_out] "Matrix of uniform random numbers";

        equation
          when firstTrigger then
            // Check the min/max range
            for i in 1:size(x_min, 1) loop
              assert(x_min[i] < x_max[i], "Entry " + String(i) +
                " of x_min is greater than that of x_max.");
            end for;
            // (Re)generate the table of random numbers
            for i in 1:n_out loop
              // random numbers
              table[:, i] = FCSys.WorkInProgress.Blocks.BaseClasses.randu(
                        x_min=x_min_internal[i],
                        x_max=x_max_internal[i],
                        n=n_s);
            end for;
          end when;
          // Read data from table
          when sampleTrigger then
            y[:] = table[mod(integer(time/samplePeriod), n_s) + 1, :];
          end when;
          annotation (Documentation(info="<html><p>The values of the sequence are uniformly distributed over the range <code>[x_min, x_max)</code>. The random numbers are (re)generated at the start of every simulation.</p>

<p>Be sure to set <code>n_s</code> to be greater than or equal to the number of sample periods during the simulation.  Otherwise, the sequence will be periodic over the simulation (i.e., it will repeat).</p>

<p>The model generates uniform random numbers using <code>internal_twister_uniform()</code>.  This function uses the Mersenne twister pseudorandom number generator and its implementation is specific to Dymola (i.e., not general to Modelica).</p></html>",
                revisions="<html>
<p><ul>
<li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2009/12/15:<br/>Original version; extended from Modelica.Blocks.Sources.CombiTimeTable</li>
<li><a href=\"mailto:kdavies4@gmail.com\">Kevin Davies</a>, 2010/1/6:<br/>Copied and modified portions of code from Modelica.Blocks.Sources.CombiTimeTable</li>
</ul></p>
</html>"), Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}),graphics={Polygon(
                          points={{-80,98},{-88,76},{-72,76},{-80,98}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{-80,76},
                  {-80,20}}, color={192,192,192}),Line(points={{-90,50},{82,50}},
                  color={192,192,192}),Polygon(
                          points={{90,50},{68,58},{68,42},{90,50}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Text(
                          extent={{68,42},{92,16}},
                          lineColor={175,175,175},
                          textString="t"),Polygon(
                          points={{0,8},{-8,-14},{8,-14},{0,8}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{0,-14},{
                  0,-70}}, color={192,192,192}),Polygon(
                          points={{90,-60},{68,-52},{68,-68},{90,-60}},
                          lineColor={192,192,192},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Text(
                          extent={{68,-68},{92,-94}},
                          lineColor={175,175,175},
                          textString="x"),Line(
                          points={{-60,-60},{-60,-36},{60,-36},{60,-60}},
                          color={0,0,127},
                          smooth=Smooth.None),Rectangle(
                          extent={{-60,-36},{60,-60}},
                          lineColor={0,0,127},
                          fillColor={192,192,192},
                          fillPattern=FillPattern.Solid),Line(points={{-90,-60},
                  {82,-60}}, color={192,192,192}),Line(
                          points={{-80,50},{-80,26}},
                          color={0,0,127},
                          smooth=Smooth.None),Ellipse(extent={{-84,30},{-76,22}},
                  lineColor={0,0,127}),Line(
                          points={{-60,50},{-60,38}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-40,50},{-40,76}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-20,50},{-20,48}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{0,50},{0,82}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{20,50},{20,72}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{40,50},{40,74}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{60,50},{60,40}},
                          color={0,0,127},
                          smooth=Smooth.None),Ellipse(extent={{-64,42},{-56,34}},
                  lineColor={0,0,127}),Ellipse(extent={{-44,80},{-36,72}},
                  lineColor={0,0,127}),Ellipse(extent={{-24,52},{-16,44}},
                  lineColor={0,0,127}),Ellipse(extent={{-4,86},{4,78}},
                  lineColor={0,0,127}),Ellipse(extent={{16,76},{24,68}},
                  lineColor={0,0,127}),Ellipse(extent={{36,78},{44,70}},
                  lineColor={0,0,127}),Ellipse(extent={{56,44},{64,36}},
                  lineColor={0,0,127})}));

        end RandomUniform;

      end Sources;

      block ZeroOrderHold "Zero order hold of a sampled-data system"
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MI(final n_in=n);
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(final n_out=n);
        extends FCSys.WorkInProgress.Blocks.Discrete.BaseClasses.DiscreteBlock;
        output Real y_sample[n](start=y_0, fixed=true);
        parameter Real y_0[:]=zeros(1) "Initial value of output signal";
        final parameter Integer n=size(y_0, 1) "Number of signals";

      equation
        when {sampleTrigger,initial()} then
          y_sample = u;
        end when;
        /* Define y=y_sample with an infinitesimal delay to break potential
       algebraic loops if both the continuous and the discrete part have
       direct feedthrough
    */
        y = pre(y_sample);
        annotation (Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Line(points={{-78,-42},{-52,-42},{-52,0},{
                -26,0},{-26,24},{-6,24},{-6,64},{18,64},{18,20},{38,20},{38,0},
                {44,0},{44,0},{62,0}}, color={0,0,127})}), Documentation(info="<html>
<p>The output is identical to the sampled input signal at sample
time instants and holds the output at the value of the last
sample instant during the sample points.</p>
</html>
"));

      end ZeroOrderHold;

      block FirstOrderHold "First order hold of a sampled-data system"
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MI(final n_in=n);
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(final n_out=n);
        extends FCSys.WorkInProgress.Blocks.Discrete.BaseClasses.DiscreteBlock;
        parameter Integer n=1 "Number of signals";
        parameter Real y_0[n]=zeros(n) "Initial condition of input";
        parameter Real c0[n]=zeros(n) "Initial condition of Delta_y/Delta_t";

      protected
        Real y_sample[n](start=y_0,fixed=true);
        Modelica.SIunits.Time t_sample;
        Real c[n](start=c0,fixed=true) "Delta_y/Delta_t";

      equation
        when sampleTrigger then
          y_sample = u;
          t_sample = time;
          //    c = if firstTrigger then zeros(N) else (y_sample - pre(y_sample))/
          //      samplePeriod;
          c = (y_sample - pre(y_sample))/samplePeriod;
        end when;
        /* Use pre(y_sample) and pre(c) to break potential algebraic loops by an
       infinitesimal delay if both the continuous and the discrete part
       have direct feedthrough.
    */
        y = pre(y_sample) + pre(c)*(time - t_sample);
        annotation (Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Line(points={{-79,-41},{-59,-33},{-40,1},{
                -20,9},{0,63},{21,20},{41,10},{60,20}}, color={0,0,127}),Line(
                points={{60,19},{81,10}}, color={0,0,255})}), Documentation(
              info="<html>
<p>The output signal is the extrapolation through the
values of the last two sampled input signals.</p>
</html>
"));

      end FirstOrderHold;

      block TransportFunction "Discrete Transport Function block"
        parameter Real b[:]={1} "Numerator coefficients of transport function.";
        parameter Real a[:] "Denominator coefficients of transport function.";
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MI(final n_in=n);
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(final n_out=n);
        extends FCSys.WorkInProgress.Blocks.Discrete.BaseClasses.DiscreteBlock;
        output Real x[size(a, 1) - 1, n](each start=0,each fixed=true)
          "State of transport function from controller canonical form";
        parameter Integer n=1 "Number of signals";

      protected
        parameter Integer n_b=size(b, 1)
          "Size of Numerator of transport function";
        parameter Integer n_a=size(a, 1)
          "Size of Denominator of transport function";
        Real x_1[n];
        Real x_ext[size(a, 1), n];

      equation
        when sampleTrigger then
          /* State variables x are defined according to
       controller canonical form. */
          for i in 1:n loop
            x_1[i] = (u[i] - a[2:size(a, 1)]*pre(x[:, i]))/a[1];
            x_ext[:, i] = vector([x_1[i]; pre(x[:, i])]);
            x[:, i] = x_ext[1:size(x, 1), i];
            y[i] = vector([zeros(n_a - n_b, 1); b])*x_ext[:, i];
          end for;
        end when;
        /* This is a non-sampled equation and above there are two separate
       when-clauses. This breaks feedback loops without direct terms,
       since in that case y will be independent of x_1 (and only dependent
       on pre(x)).
    */
        /* Corresponding (simpler) version using when-semantics of Modelica 1.3:

   equation
     when sampleTrigger then
      [x; xn] = [x_1; pre(x)];
      [u] = transpose([a])*[x_1; pre(x)];
      [y] = transpose([zeros(n_a - n_b, 1); b])*[x_1; pre(x)];
     end when;
*/
        annotation (
          Documentation(info="<html>
<p>The <b>discrete transport function</b> block defines the
transport function between the input signal u and the output
signal y. The numerator has the order nb-1, the denominator
has the order na-1.</p>
<pre>          b(1)*z^(n_b-1) + b(2)*z^(n_b-2) + &hellip; + b(n_b)
   y(z) = -------------------------------------------- * u(z)
          a(1)*z^(na-1) + a(2)*z^(na-2) + &hellip; + a(na)
</pre>
<p>State variables <b>x</b> are defined according to
<b>controller canonical</b> form. Initial values of the
states can be set as start values of <b>x</b>.<p><p>Example:</p>
<pre>     Blocks.Discrete.TransportFunction g(b = {2,4}, a = {1,3});
</pre>
<p>results in the following transport function:</p>
<pre>        2*z + 4
   y = --------- * u
         z + 3
</pre>

</html>
", revisions="<html>
<p><b>Release Notes:</b></p>
<ul>
<li><i>November 15, 2000</i>
    by <a href=\"http://www.dynasim.se\">Hans Olsson</a>:<br>
    Converted to when-semantics of Modelica 1.4 with special
    care to avoid unnecessary algebraic loops.</li>
<li><i>June 18, 2000</i>
    by <a href=\"http://www.robotic.dlr.de/Martin.Otter/\">Martin Otter</a>:<br>
    Realized based on a corresponding model of Dieter Moormann
    and Hilding Elmqvist.</li>
</ul>
</html>"),
          Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Line(points={{82,0},{-84,0}}, color={0,0,
                127}),Text(
                      extent={{-92,92},{86,12}},
                      lineColor={0,0,127},
                      textString="b(z)"),Text(
                      extent={{-90,-12},{90,-90}},
                      lineColor={0,0,127},
                      textString="a(z)")}),
          Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Rectangle(extent={{-60,60},{60,-60}},
                lineColor={0,0,255}),Line(
                      points={{40,0},{-44,0}},
                      color={0,0,0},
                      thickness=0.5),Text(
                      extent={{-54,54},{54,4}},
                      lineColor={0,0,0},
                      textString="b(z)"),Text(
                      extent={{-54,-6},{56,-56}},
                      lineColor={0,0,0},
                      textString="a(z)"),Line(points={{-100,0},{-60,0}}, color=
                {0,0,255}),Line(points={{60,0},{100,0}}, color={0,0,255})}));

      end TransportFunction;

      block UnitDelay "Unit Delay Block"
        parameter Real y_0[:]=zeros(1) "Initial value of output signal";
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MI(final n_in=n, u(
              final start=y_0, each fixed=true));
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(final n_out=n);
        extends FCSys.WorkInProgress.Blocks.Discrete.BaseClasses.DiscreteBlock;
        final parameter Integer n=size(y_0, 1) "Number of signals";

      equation
        when sampleTrigger then
          y = pre(u);
        end when;

      initial equation
        //  y = y_0;
        annotation (Documentation(
            info="<html>
<p>This block describes a unit delay:</p>
<pre>
          1
     y = --- * u
          z
</pre>
<p>that is, the output signal y is the input signal u of the
previous sample instant. Before the second sample instant,
the output y is identical to parameter yStart.</p>

</html>
",
            Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics={Line(points={{-30,0},{30,0}}, color={0,0,
                  127}),Text(
                        extent={{-90,10},{90,90}},
                        textString="1",
                        lineColor={0,0,127}),Text(
                        extent={{-90,-10},{90,-90}},
                        textString="z",
                        lineColor={0,0,127})}),
            Diagram(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics={Rectangle(extent={{-60,60},{60,-60}},
                  lineColor={0,0,255}),Text(
                        extent={{-160,10},{-140,-10}},
                        textString="u",
                        lineColor={0,0,255}),Text(
                        extent={{115,10},{135,-10}},
                        textString="y",
                        lineColor={0,0,255}),Line(points={{-100,0},{-60,0}},
                  color={0,0,255}),Line(points={{60,0},{100,0}}, color={0,0,255}),
                  Line(points={{40,0},{-40,0}}, color={0,0,0}),Text(
                        extent={{-55,55},{55,5}},
                        lineColor={0,0,0},
                        textString="1"),Text(
                        extent={{-55,-5},{55,-55}},
                        lineColor={0,0,0},
                        textString="z")})));

      end UnitDelay;

      block Sampler "Ideal sampling of continuous signals"
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MI(final n_in=n);
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(final n_out=n);
        extends FCSys.WorkInProgress.Blocks.Discrete.BaseClasses.DiscreteBlock;
        parameter Integer n=1 "Number of signals";

      equation
        when {sampleTrigger,initial()} then
          y = u;
        end when;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={Ellipse(
                      extent={{-25,-10},{-45,10}},
                      lineColor={0,0,127},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),Ellipse(
                      extent={{45,-10},{25,10}},
                      lineColor={0,0,127},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),Line(points={{-100,0},{-45,
                0}}, color={0,0,127}),Line(points={{45,0},{100,0}}, color={0,0,
                127}),Line(points={{-35,0},{30,35}}, color={0,0,127})}),
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                  {100,100}}), graphics={Ellipse(
                      extent={{-25,-10},{-45,10}},
                      lineColor={0,0,255},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),Ellipse(
                      extent={{45,-10},{25,10}},
                      lineColor={0,0,255},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),Line(points={{-100,0},{-45,
                0}}, color={0,0,255}),Line(points={{45,0},{100,0}}, color={0,0,
                255}),Line(points={{-35,0},{30,35}}, color={0,0,255})}),
          Documentation(info="<html>
<p>Samples the continues input signal with a sampling rate defined
via parameter <b>samplePeriod</b>.</p>
</html>
"));

      end Sampler;

      package BaseClasses "Base classes (not generally for direct use)"
        extends Modelica.Icons.BasesPackage;
        partial block DiscreteBlock "Base class of discrete blocks"
          extends FCSys.BaseClasses.Icons.Blocks.Discrete;
          parameter SI.Time samplePeriod(min=100*Modelica.Constants.eps, start=
                0.1) "Sample period of species";
          parameter SI.Time startTime=0 "First sample time instant";

        protected
          output Boolean sampleTrigger "true, if sample time instant";
          output Boolean firstTrigger
            "Rising edge signals first sample instant";

        equation
          sampleTrigger = sample(startTime, samplePeriod);
          when sampleTrigger then
            firstTrigger = time <= startTime + samplePeriod/2;
          end when;

        end DiscreteBlock;

      end BaseClasses;

    end Discrete;

    package Math
      extends Modelica.Icons.Package;
      block Add2 "Output the weighted sum of two inputs"
        extends FCSys.BaseClasses.Icons.Blocks.Continuous;
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(final n_out=n);
        parameter Integer n=1 "Size of vector";
        parameter Real k_1=1 "Gain (i.e., weight) of upper input";
        parameter Real k_2=1 "Gain (i.e., weight) of middle input";
        input FCSys.Connectors.RealInput u_1[n]
          "Connector 1 of Real input signals" annotation (Placement(
              transformation(extent={{-110,50},{-90,70}}, rotation=0),
              iconTransformation(extent={{-120,50},{-100,70}})));
        input FCSys.Connectors.RealInput u_2[n]
          "Connector 2 of Real input signals" annotation (Placement(
              transformation(extent={{-110,-70},{-90,-50}}, rotation=0),
              iconTransformation(extent={{-120,-70},{-100,-50}})));

      equation
        y = k_1*u_1 + k_2*u_2;
        annotation (Documentation(
            info="
<html>
<p>This blocks computes output <b>y</b> as <i>sum</i> of the
three input signals <b>u_1</b>, <b>u_2</b> and <b>u_3</b>:
<pre>
    <b>y</b> = k_1*<b>u_1</b> + k_2*<b>u_2</b> + k_3*<b>u_3</b>;
</pre></p>

<p>Example:
<pre>
     parameter:   k_1= +2, k_2= -3, k_3=1;
</pre></p>

<p>results in the following equations:
<pre>
     y = 2 * u_1 - 3 * u_2 + u_3;
</pre></p>

</html>
",
            Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics={Text(
                        extent={{-100,40},{5,80}},
                        lineColor={0,0,0},
                        textString="(%k_1)"),Text(
                        extent={{-100,-80},{5,-40}},
                        lineColor={0,0,0},
                        textString="(%k_2)"),Text(
                        extent={{2,36},{100,-44}},
                        lineColor={0,0,0},
                        textString="+")}),
            Diagram(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics)));

      end Add2;

      block Add3 "Output the weighted sum of three inputs"
        extends FCSys.BaseClasses.Icons.Blocks.Continuous;
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(final n_out=n);
        parameter Integer n=1 "Size of vector";
        parameter Real k_1=1 "Gain (i.e., weight) of upper input";
        parameter Real k_2=1 "Gain (i.e., weight) of middle input";
        parameter Real k_3=1 "Gain (i.e., weight) of lower input";
        input FCSys.Connectors.RealInput u_1[n]
          "Connector 1 of Real input signals" annotation (Placement(
              transformation(extent={{-110,70},{-90,90}}, rotation=0),
              iconTransformation(extent={{-120,50},{-100,70}})));
        input FCSys.Connectors.RealInput u_2[n]
          "Connector 2 of Real input signals" annotation (Placement(
              transformation(extent={{-110,-10},{-90,10}}, rotation=0),
              iconTransformation(extent={{-120,-10},{-100,10}})));
        input FCSys.Connectors.RealInput u_3[n]
          "Connector 3 of Real input signals" annotation (Placement(
              transformation(extent={{-110,-90},{-90,-70}}, rotation=0),
              iconTransformation(extent={{-120,-70},{-100,-50}})));

      equation
        y = k_1*u_1 + k_2*u_2 + k_3*u_3;
        annotation (Documentation(
            info="
<html>
<p>This blocks computes output <b>y</b> as <i>sum</i> of the
three input signals <b>u_1</b>, <b>u_2</b> and <b>u_3</b>:</p>
<pre>
    <b>y</b> = k_1*<b>u_1</b> + k_2*<b>u_2</b> + k_3*<b>u_3</b>;
</pre>
<p>Example:</p>
<pre>
     parameter:   k_1= +2, k_2= -3, k_3=1;

  results in the following equations:

     y = 2 * u_1 - 3 * u_2 + u_3;
</pre>

</html>
",
            Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics={Text(
                        extent={{-100,40},{5,80}},
                        lineColor={0,0,0},
                        textString="(%k_1)"),Text(
                        extent={{-100,-20},{5,20}},
                        lineColor={0,0,0},
                        textString="(%k_2)"),Text(
                        extent={{-100,-40},{5,-80}},
                        lineColor={0,0,0},
                        textString="(%k_3)"),Text(
                        extent={{2,36},{100,-44}},
                        lineColor={0,0,0},
                        textString="+")}),
            Diagram(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics)));

      end Add3;

      block AddSkipInclIncl "Add or subtract two inputs"
        // extends FCSys.Blocks.BaseClasses.MO(final n_out=n);
        // TODO:  Fix the icon.
        parameter Boolean isPos1=true
          "true: 1st input is positive; false: negative"
          annotation (Dialog(enable=Include1));
        parameter Boolean isPos2=true
          "true: 2nd input is positive; false: negative"
          annotation (Dialog(enable=Include2));
        parameter Integer n=1 "Size of vector";
        input FCSys.Connectors.RealInput u_1[n] annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,0}), iconTransformation(extent={{-100,-10},{-80,10}})));
        input FCSys.Connectors.RealInput u_2[n] annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={0,-90}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={0,-90})));
        output FCSys.Connectors.RealOutput y[n] annotation (Placement(
              transformation(extent={{80,-10},{100,10}}, rotation=0),
              iconTransformation(extent={{80,-10},{100,10}})));

      equation
        y = (if isPos1 then u_1 else -u_1) + (if isPos2 then u_2 else -u_2);
        annotation (Documentation(info="
<html>
<p>This blocks computes output <b>y</b> as <i>difference</i> of the
commanded input <b>u_1</b> and the feedback
input <b>u_2</b>:</p>
<pre>
    <b>y</b> = <b>u_1</b> - <b>u_2</b>;
</pre>
<p>Example:</p>
<pre>
     parameter:   n = 2

  results in the following equations:

     y = u_1 - u_2
</pre>

</html>
"), Icon(graphics={Ellipse(
                      extent={{-20,20},{20,-20}},
                      lineColor={0,0,127},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),Text(
                      extent={{-80,60},{-20,0}},
                      lineColor={0,0,0},
                      textString="+",
                      visible=isPos1),Text(
                      extent={{-80,70},{-20,0}},
                      lineColor={0,0,0},
                      textString="-",
                      visible=not isPos1),Text(
                      extent={{-60,-20},{0,-80}},
                      lineColor={0,0,0},
                      textString="+",
                      visible=isPos2),Text(
                      extent={{-60,-10},{0,-80}},
                      lineColor={0,0,0},
                      textString="-",
                      visible=not isPos2),Line(
                      points={{-100,0},{-20,0}},
                      color={0,0,127},
                      thickness=0.5),Line(
                      points={{0,-20},{0,-100}},
                      color={0,0,127},
                      thickness=0.5),Line(
                      points={{20,0},{80,0}},
                      color={0,0,127},
                      thickness=0.5)}));

      end AddSkipInclIncl;

      block AddInclInclIncl "Add or subtract three inputs"
        // extends FCSys.Blocks.BaseClasses.MO(final n_out=n);
        // TODO:  Fix the icon.
        parameter Boolean isPos1=true
          "true: 1st input is positive; false: negative";
        parameter Boolean isPos2=true
          "true: 2nd input is positive; false: negative";
        parameter Boolean isPos3=true
          "true: 3rd input is positive; false: negative";
        parameter Integer n=1 "Size of vector";
        input FCSys.Connectors.RealInput u_1[n] annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={0,100}),iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={0,90})));
        input FCSys.Connectors.RealInput u_2[n] annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,0}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,0})));
        output FCSys.Connectors.RealOutput y[n] annotation (Placement(
              transformation(extent={{80,-10},{100,10}}, rotation=0),
              iconTransformation(extent={{80,-10},{100,10}})));
        input FCSys.Connectors.RealInput u_3[n] annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={0,-100}),iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={0,-90})));

      equation
        y = (if isPos1 then u_1 else -u_1) + (if isPos2 then u_2 else -u_2) + (
          if isPos3 then u_3 else -u_3);
        annotation (Documentation(info="
<html>
<p>This blocks computes output <b>y</b> as <i>difference</i> of the
commanded input <b>u_1</b> and the feedback
input <b>u_2</b>:</p>
<pre>
    <b>y</b> = <b>u_1</b> - <b>u_2</b>;
</pre>
<p>Example:</p>
<pre>
     parameter:   n = 2

  results in the following equations:

     y = u_1 - u_2
</pre>

</html>
"), Icon(graphics={Ellipse(
                      extent={{-20,20},{20,-20}},
                      lineColor={0,0,127},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),Text(
                      extent={{0,80},{60,20}},
                      lineColor={0,0,0},
                      textString="+",
                      visible=isPos1),Text(
                      extent={{0,80},{60,10}},
                      lineColor={0,0,0},
                      textString="-",
                      visible=not isPos1),Text(
                      extent={{-80,60},{-20,0}},
                      lineColor={0,0,0},
                      textString="+",
                      visible=isPos2),Text(
                      extent={{-80,70},{-20,0}},
                      lineColor={0,0,0},
                      textString="-",
                      visible=not isPos2),Line(
                      points={{20,0},{80,0}},
                      color={0,0,127},
                      thickness=0.5),Line(
                      points={{-20,0},{60,1.93341e-015}},
                      color={0,0,127},
                      thickness=0.5,
                      origin={0,40},
                      rotation=90),Line(
                      points={{0,-20},{0,-100}},
                      color={0,0,127},
                      thickness=0.5),Line(
                      points={{-100,0},{-20,0}},
                      color={0,0,127},
                      thickness=0.5),Text(
                      extent={{-60,-20},{0,-80}},
                      lineColor={0,0,0},
                      textString="+",
                      visible=isPos3),Text(
                      extent={{-60,-10},{0,-80}},
                      lineColor={0,0,0},
                      textString="-",
                      visible=not isPos3)}));

      end AddInclInclIncl;

      block AddInclInclSkip "Add or subtract two inputs"
        // extends FCSys.Blocks.BaseClasses.MO(final n_out=n);
        // TODO:  Fix the icon.
        parameter Boolean isPos1=true
          "true: 1st input is positive; false: negative"
          annotation (Dialog(enable=Include1));
        parameter Boolean isPos2=true
          "true: 2nd input is positive; false: negative"
          annotation (Dialog(enable=Include2));
        parameter Integer n=1 "Size of vector";
        input FCSys.Connectors.RealInput u_1[n] annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={0,90}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={0,90})));
        input FCSys.Connectors.RealInput u_2[n] annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-92,0}), iconTransformation(extent={{-100,-10},{-80,10}})));
        output FCSys.Connectors.RealOutput y[n] annotation (Placement(
              transformation(extent={{80,-10},{100,10}}, rotation=0),
              iconTransformation(extent={{80,-10},{100,10}})));

      equation
        y = (if isPos1 then u_1 else -u_1) + (if isPos2 then u_2 else -u_2);
        annotation (Documentation(info="
<html>
<p>This blocks computes output <b>y</b> as <i>difference</i> of the
commanded input <b>u_1</b> and the feedback
input <b>u_2</b>:</p>
<pre>
    <b>y</b> = <b>u_1</b> - <b>u_2</b>;
</pre>
<p>Example:</p>
<pre>
     parameter:   n = 2

  results in the following equations:

     y = u_1 - u_2
</pre>

</html>
"), Icon(graphics={Ellipse(
                      extent={{-20,20},{20,-20}},
                      lineColor={0,0,127},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),Text(
                      extent={{0,80},{60,20}},
                      lineColor={0,0,0},
                      textString="+",
                      visible=isPos1),Text(
                      extent={{0,80},{60,10}},
                      lineColor={0,0,0},
                      textString="-",
                      visible=not isPos1),Text(
                      extent={{-60,60},{0,0}},
                      lineColor={0,0,0},
                      textString="+",
                      visible=isPos2),Text(
                      extent={{-60,70},{0,0}},
                      lineColor={0,0,0},
                      textString="-",
                      visible=not isPos2),Line(
                      points={{-100,0},{-20,0}},
                      color={0,0,127},
                      thickness=0.5),Line(
                      points={{-20,0},{60,1.93341e-015}},
                      color={0,0,127},
                      thickness=0.5,
                      origin={0,40},
                      rotation=90),Line(
                      points={{20,0},{80,0}},
                      color={0,0,127},
                      thickness=0.5)}));

      end AddInclInclSkip;

      block AddInclSkipIncl "Add or subtract two inputs"
        // extends FCSys.Blocks.BaseClasses.MO(final n_out=n);
        // TODO:  Fix the icon.
        parameter Boolean isPos1=true
          "true: 1st input is positive; false: negative"
          annotation (Dialog(enable=Include1));
        parameter Boolean isPos2=true
          "true: 2nd input is positive; false: negative"
          annotation (Dialog(enable=Include2));
        parameter Integer n=1 "Size of vector";
        input FCSys.Connectors.RealInput u_1[n] annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={0,100}),iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={0,90})));
        input FCSys.Connectors.RealInput u_2[n] annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={0,-90}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={0,-90})));
        output FCSys.Connectors.RealOutput y[n] annotation (Placement(
              transformation(extent={{80,-10},{100,10}}, rotation=0),
              iconTransformation(extent={{80,-10},{100,10}})));

      equation
        y = (if isPos1 then u_1 else -u_1) + (if isPos2 then u_2 else -u_2);
        annotation (Documentation(info="
<html>
<p>This blocks computes output <b>y</b> as <i>difference</i> of the
commanded input <b>u_1</b> and the feedback
input <b>u_2</b>:</p>
<pre>
    <b>y</b> = <b>u_1</b> - <b>u_2</b>;
</pre>
<p>Example:</p>
<pre>
     parameter:   n = 2

  results in the following equations:

     y = u_1 - u_2
</pre>

</html>
"), Icon(graphics={Ellipse(
                      extent={{-20,20},{20,-20}},
                      lineColor={0,0,127},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),Text(
                      extent={{0,80},{60,20}},
                      lineColor={0,0,0},
                      textString="+",
                      visible=isPos1),Text(
                      extent={{-80,70},{-20,0}},
                      lineColor={0,0,0},
                      textString="-",
                      visible=not isPos1),Text(
                      extent={{-60,-20},{0,-80}},
                      lineColor={0,0,0},
                      textString="+",
                      visible=isPos2),Text(
                      extent={{-60,-10},{0,-80}},
                      lineColor={0,0,0},
                      textString="-",
                      visible=not isPos2),Line(
                      points={{-20,0},{60,1.93341e-015}},
                      color={0,0,127},
                      thickness=0.5,
                      origin={0,40},
                      rotation=90),Line(
                      points={{0,-20},{0,-100}},
                      color={0,0,127},
                      thickness=0.5),Line(
                      points={{20,0},{80,0}},
                      color={0,0,127},
                      thickness=0.5)}));

      end AddInclSkipIncl;

      block Limiter "Limit the range of a signal"
        parameter Integer n=1 "Number of signals";
        parameter Real u_max[n](start=ones(n)) "Upper limits of input signals";
        parameter Real u_min[n]=-u_max "Lower limits of input signals";
        parameter Boolean limitsAtInit=true
          "= false, if limits are ignored during initialization (i.e., y=u)";
        extends FCSys.BaseClasses.Icons.Blocks.Continuous;
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MI(final n_in=n);
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(final n_out=n);

      equation
        for i in 1:n loop
          assert(u_max[i] >= u_min[i],
            "Limiter: Limits must be consistent. However, u_max(" + String(i)
             + ") (=" + String(u_max[i]) + ") < u_min(" + String(i) + ") (=" +
            String(u_min[i]) + ")");
        end for;
        if initial() and not limitsAtInit then
          y = u;
          for i in 1:n loop
            assert(u[i] >= u_min[i] - 0.01*abs(u_min[i]) and u[i] <= u_max[i]
               + 0.01*abs(u_max[i]), "Limiter: During initialization the limits have been ignored.
However, the result is that the input u is not within the required limits:
  u(" + String(i) + ") = " + String(u[i]) + ", u_min(" + String(i) + ") = " +
              String(u_min[i]) + ", u_max(" + String(i) + ") = " + String(u_max[
              i]));
          end for;
        else
          for i in 1:n loop
            y[i] = smooth(0, if u[i] > u_max[i] then u_max[i] else if u[i] <
              u_min[i] then u_min[i] else u[i]);
          end for;
        end if;
        annotation (Documentation(
            info="
<html>
<p>The Limiter block passes its input signal as output signal
as long as the input is within the specified upper and lower
limits. If this is not the case, the corresponding limits are passed
as output.</p>
</html>
",
            Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics={Line(points={{0,-90},{0,68}}, color={192,
                  192,192}),Polygon(
                        points={{0,90},{-8,68},{8,68},{0,90}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),Line(points={{-90,0},{68,
                  0}}, color={192,192,192}),Polygon(
                        points={{90,0},{68,-8},{68,8},{90,0}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),Line(points={{-80,-70},{
                  -50,-70},{50,70},{80,70}}, color={0,0,0}),Text(
                        extent={{-150,-150},{150,-110}},
                        lineColor={135,135,135},
                        textString="u_max=%u_max")}),
            Diagram(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics)));

      end Limiter;

    end Math;

    package Routing
      extends Modelica.Icons.Package;
      block Duplicate "Duplicate a vector signal n_dup times"
        extends FCSys.BaseClasses.Icons.Blocks.Continuous;
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MI;
        extends FCSys.WorkInProgress.Blocks.BaseClasses.MO(final n_out=n_in*
              n_dup);
        parameter Integer n_dup=1 "Number of duplications";

      equation
        for i in 1:n_dup loop
          y[n_in*(i - 1) + 1:n_in*i] = u;
        end for;
        annotation (Documentation(
            info="<html>
<p>This blocks computes output <b>y</b> (element-wise) as
<i>integral</i> of the input <b>u</b> multiplied with
the gain <i>k</i>:</p>
<pre>
         k
     y = - u
         s
</pre>

<p>It might be difficult to initialize the integrator in steady state.
This is discussed in the description of package
<a href=\"Modelica://Modelica.Blocks.Continuous#info\">Continuous</a>.</p>

</html>
",
            Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics={Rectangle(extent={{-20,80},{0,40}},
                  lineColor={0,0,127}),Rectangle(extent={{-20,40},{0,0}},
                  lineColor={0,0,127}),Line(
                        points={{-14,54},{-6,66}},
                        color={0,0,127},
                        smooth=Smooth.None),Line(
                        points={{-14,14},{-6,26}},
                        color={0,0,127},
                        smooth=Smooth.None),Ellipse(
                        extent={{-12,-8},{-8,-12}},
                        lineThickness=0.5,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid,
                        pattern=LinePattern.None,
                        lineColor={0,0,127}),Ellipse(
                        extent={{-12,-28},{-8,-32}},
                        lineThickness=0.5,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid,
                        pattern=LinePattern.None,
                        lineColor={0,0,127}),Ellipse(
                        extent={{45,15},{75,-15}},
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid,
                        lineColor={0,0,127}),Line(points={{0,60},{20,60},{60,0}},
                  color={0,0,127}),Line(points={{0,20},{20,20},{60,0}}, color={
                  0,0,127}),Line(points={{60,0},{100,0}}, color={0,0,127}),Line(
                  points={{-100,0},{-80,0},{-40.0391,59.9414},{-20,60}}, color=
                  {0,0,127}),Text(
                        extent={{-100,-60},{80,-100}},
                        lineColor={0,0,0},
                        textString="%n_dup"),Ellipse(
                        extent={{-12,-48},{-8,-52}},
                        lineThickness=0.5,
                        fillColor={0,0,127},
                        fillPattern=FillPattern.Solid,
                        pattern=LinePattern.None,
                        lineColor={0,0,127})}),
            Diagram(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}},
                grid={2,2}), graphics)));

      end Duplicate;

    end Routing;

    package BaseClasses "Base classes (not generally for direct use)"
      extends Modelica.Icons.BasesPackage;
      partial block SI "Single Input block"

        Connectors.RealInput u "Connector for Real input signal" annotation (
            Placement(transformation(extent={{-110,-10},{-90,10}}, rotation=0),
              iconTransformation(extent={{-120,-10},{-100,10}})));
        annotation (Documentation(info="<html>
<p>Block has one continuous Real input and one continuous Real output signal.</p>
</html>", Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics)));

      end SI;

      partial block MI "Multiple Input block"
        parameter Integer n_in(min=1) = 1 "Number of inputs";
        Connectors.RealInput u[n_in] "Connector of Real input signals"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0), iconTransformation(extent={{-120,-10},{-100,10}})));
        annotation (Documentation(info="<html>
<p>Block has a continuous Real input and a continuous Real output signal vector.
The signal sizes of the input and output vector may be different.</p>
</html>
", Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,
                    100}}), graphics)));

      end MI;

      partial block SO "Single Output block"

        Connectors.RealOutput y "Connector for Real output signal" annotation (
            Placement(transformation(extent={{90,-10},{110,10}}, rotation=0),
              iconTransformation(extent={{100,-10},{120,10}})));
        annotation (Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics), Documentation(info="<html>
<p>Block has one continuous Real output signal.</p>
</html>"));

      end SO;

      partial block MO "Multiple Output block"
        parameter Integer n_out(min=1) = 1 "Number of outputs";
        Connectors.RealOutput y[n_out] "Connector of Real output signals"
          annotation (Placement(transformation(extent={{90,-10},{110,10}},
                rotation=0), iconTransformation(extent={{100,-10},{120,10}})));
        annotation (Documentation(info="<html>
<p>Block has one continuous Real output signal vector.</p>
</html>", Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                    {100,100}}), graphics)));

      end MO;

      function randu "Return a vector of uniform random numbers"
        extends Modelica.Icons.Function;
        input Real x_min=-0.5 "Lower bound of random number(s)";
        input Real x_max=0.5 "Upper bound of random number(s)";
        input Integer n=1 "Number of random numbers";
        output Real x[n] "Uniform random number(s)";

      protected
        Real Delta;
        Real Sigma;

      algorithm
        Delta := x_max - x_min;
        Sigma := x_max + x_min;
        x := {(Sigma/2 + Delta*(internal_twister_uniform() - 0.5)) for i in 1:n};
        annotation (Documentation(info="<html><p>This function uses <code>internal_twister_uniform()</code>
  to generate uniform random numbers, which in turn uses the Mersenne twister pseudorandom number
  generator and is specific to Dymola (i.e., not general to Modelica).</p></html>"));

      end randu;

      function randn "Return a vector of normal random numbers"
        import Modelica.Math.log;
        extends Modelica.Icons.Function;

        input Real mu=0 "Mean or expected value";
        input Real sigma=1 "Standard deviation";
        input Integer n=1 "Number of random numbers";
        output Real x[n] "Normal random number(s)";

      protected
        Real x_0[n];

      algorithm
        x_0 := sqrt(-2*log(FCSys.WorkInProgress.Blocks.BaseClasses.randu(
                x_min=0,
                x_max=1,
                n=n))) .* sin(FCSys.WorkInProgress.Blocks.BaseClasses.randu(
                x_min=0,
                x_max=2*Modelica.Constants.pi,
                n=n));
        x := mu*ones(n) + sigma*x_0;
        annotation (Documentation(info="<html><p>This function uses the Box-Muller transform to
  generate normal random numbers from uniform random numbers.
  It uses <code>internal_twister_uniform()</code> to generate uniform random numbers,
  which in turn uses the Mersenne twister pseudorandom number generator and is
  specific to Dymola (i.e., not general to Modelica).</p></html>"));

      end randn;

    end BaseClasses;
    annotation (Documentation(info="<html><p><b>Licensed by the Georgia Tech Research Corporation under the Modelica License 2</b><br>
Copyright 2007&ndash;2012, Georgia Tech Research Corporation.</p>

<p><i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>;
it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the
disclaimer of warranty) see <a href=\"modelica://FCSys.UsersGuide.ModelicaLicense2\">
FCSys.UsersGuide.ModelicaLicense2</a> or visit <a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">
http://www.modelica.org/licenses/ModelicaLicense2</a>.</i></p></html>"));

  end Blocks;

  package Systems
    "Models of systems containing both hardware devices and control blocks"

    extends Modelica.Icons.Package;
    package Examples "Examples"
      extends Modelica.Icons.ExamplesPackage;
      model FCPlantNoRecirc
        extends Modelica.Icons.Example;

        package Medium_an = FCSys.WorkInProgress.MolarBasis.H2O_H2_CO_Molar
          "Anode medium model";
        package Medium_ca = FCSys.WorkInProgress.MolarBasis.H2OAndO2_N2_Molar
          "Cathode medium model";

        replaceable Modelica.Blocks.Sources.Constant valveSetpoint(k=0.5)
          constrainedby Modelica.Blocks.Interfaces.SO annotation (
            choicesAllMatching=true, Placement(transformation(
              origin={-90,-60},
              extent={{10,-10},{-10,10}},
              rotation=180)));
        FCSys.WorkInProgress.Systems.FC.FCNoRecirc fCPlant annotation (
            Placement(transformation(extent={{0,-20},{40,20}}, rotation=0)));
        Modelica.Fluid.Sources.FixedBoundary_pTX ambientCa(
          redeclare replaceable Medium_ca Medium,
          T=ambient.default_T_ambient,
          flowDirection=Modelica.Fluid.Types.SourceFlowDirection.InToPort,
          p=ambient.p_default_ambient,
          X=Medium_ca.X_default) annotation (Placement(transformation(extent={{
                  100,20},{80,40}}, rotation=0)));
        Modelica.Fluid.Sources.FixedBoundary_pTX ambientAn(
          redeclare replaceable Medium_an Medium,
          T=ambient.default_T_ambient,
          flowDirection=Modelica.Fluid.Types.SourceFlowDirection.InToPort,
          p=ambient.p_default_ambient,
          X=Medium_an.X_default) annotation (Placement(transformation(extent={{
                  100,-40},{80,-20}}, rotation=0)));
        replaceable Modelica.Blocks.Sources.Constant fanSpeed(k=0.5)
          constrainedby Modelica.Blocks.Interfaces.SO annotation (
            choicesAllMatching=true, Placement(transformation(
              origin={-90,-30},
              extent={{10,-10},{-10,10}},
              rotation=180)));
        inner Modelica.Fluid.Ambient ambient(p_default_ambient=
              SI.Conversions.from_bar(1.01325), default_T_ambient=
              SI.Conversions.from_degC(20)) annotation (Placement(
              transformation(extent={{80,80},{100,100}}, rotation=0)));
        Modelica.Thermal.HeatTransport.Sources.FixedTemperature
          fixedTemperature(T=ambient.default_T_ambient) annotation (Placement(
              transformation(extent={{-100,60},{-80,80}}, rotation=0)));
        Modelica.Electrical.Analog.Basic.Resistor resistor(R=1) annotation (
            Placement(transformation(
              origin={-20,-80},
              extent={{-10,-10},{10,10}},
              rotation=270)));
        Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(
              transformation(extent={{0,-110},{20,-90}}, rotation=0)));
        Modelica.Fluid.Pipes.BaseClasses.PortVolume H2tank(
          redeclare FCSys.WorkInProgress.MolarBasis.H2O_H2_CO_Molar Medium,
          V=1e3,
          p_start=10e5,
          use_T_start=true,
          T_start=ambient.default_T_ambient,
          X_start={0,1,0},
          initType=Modelica.Fluid.Types.Init.NoInit) annotation (Placement(
              transformation(extent={{-70,-20},{-50,0}}, rotation=0)));

        Modelica.Thermal.HeatTransport.Species.ThermalConductor
          thermalConductor2(G=100) annotation (Placement(transformation(
              origin={-60,30},
              extent={{-10,-10},{10,10}},
              rotation=270)));
        Modelica.Fluid.Pipes.BaseClasses.PortVolume O2tank(
          V=1e3,
          p_start=10e5,
          use_T_start=true,
          T_start=ambient.default_T_ambient,
          X_start={0,1,0},
          redeclare FCSys.WorkInProgress.MolarBasis.H2OAndO2_N2_Molar Medium,
          initType=Modelica.Fluid.Types.Init.NoInit) annotation (Placement(
              transformation(extent={{-40,0},{-20,20}}, rotation=0)));

        Modelica.Thermal.HeatTransport.Species.ThermalConductor
          thermalConductor1(G=100) annotation (Placement(transformation(
              origin={-30,50},
              extent={{-10,-10},{10,10}},
              rotation=270)));

      equation
        connect(valveSetpoint.y, fCPlant.exitValvePosAn) annotation (Line(
              points={{-79,-60},{42,-60},{42,2}}, color={0,0,127}));
        connect(fCPlant.exitValvePosCa, valveSetpoint.y) annotation (Line(
              points={{42,18},{31.7,18},{31.7,-60},{-79,-60}}, color={0,0,127}));
        connect(fanSpeed.y, fCPlant.coolingFanSpeed) annotation (Line(points={{
                -79,-30},{10,-30},{10,-20.8}}, color={0,0,127}));
        connect(fCPlant.fluidPort_ca2, ambientCa.port) annotation (Line(points=
                {{40,10},{60,10},{60,30},{80,30}}, color={0,127,255}));
        connect(fCPlant.fluidPort_an2, ambientAn.port) annotation (Line(points=
                {{40,-10},{60,-10},{60,-30},{80,-30}}, color={0,127,255}));
        connect(fixedTemperature.port, fCPlant.port_a) annotation (Line(points=
                {{-80,70},{20,70},{20,20}}, color={191,0,0}));
        connect(resistor.n, fCPlant.n) annotation (Line(points={{-20,-90},{48,-90},
                {48,0},{40,0}}, color={0,0,255}));
        connect(resistor.p, fCPlant.p)
          annotation (Line(points={{-20,-70},{-20,0},{0,0}}, color={0,0,255}));
        connect(ground.p, resistor.n)
          annotation (Line(points={{10,-90},{-20,-90}}, color={0,0,255}));
        connect(H2tank.port, fCPlant.fluidPort_an1)
          annotation (Line(points={{-60,-10},{0,-10}}, color={0,127,255}));
        connect(thermalConductor2.port_b, H2tank.heatPort)
          annotation (Line(points={{-60,20},{-60,0}}, color={191,0,0}));
        connect(thermalConductor2.port_a, fixedTemperature.port) annotation (
            Line(points={{-60,40},{-60,70},{-80,70}}, color={191,0,0}));
        connect(thermalConductor1.port_a, fixedTemperature.port) annotation (
            Line(points={{-30,60},{-30,70},{-80,70}}, color={191,0,0}));
        connect(thermalConductor1.port_b, O2tank.heatPort) annotation (Line(
              points={{-30,40},{-30,30},{-30,30},{-30,20}}, color={191,0,0}));
        connect(O2tank.port, fCPlant.fluidPort_ca1)
          annotation (Line(points={{-30,10},{0,10}}, color={0,127,255}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={
                  {-100,-100},{100,100}}), graphics));

      end FCPlantNoRecirc;

    end Examples;

    package FC
      extends Modelica.Icons.Package;
      model FCNoRecirc
        "Fuel cell system with fuel cell stack, H2 and H2O tanks, DC/DC converter, valves, pumps, heat exchangers, actuators, and sensors"

        extends FCSys.WorkInProgress.FCSysPlant;
        SI.Voltage v "Voltage drop between the two pins (= pinP.v - pinP.v)";

        Connectors.FaceBus wireP
          "Positive pin Positive pin (potential pinP.v > pinP.v for positive voltage drop v)"
          annotation (Placement(transformation(extent={{170,110},{190,130}},
                rotation=0), iconTransformation(extent={{90,-50},{110,-70}})));
        Connectors.FaceBus wireN "Negative pin" annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={180,-120}), iconTransformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-100,-60})));

        FCSys.WorkInProgress.AssembliesStacksStack stack(
          T_start=ambient.default_T_ambient,
          p_start=ambient.p_default_ambient,
          redeclare replaceable Medium_an Medium_an,
          redeclare replaceable Medium_ca Medium_ca) "Fuel cell model"
          annotation (Placement(transformation(
              origin={20,-30},
              extent={{10,10},{-10,-10}},
              rotation=90)));

        // TODO:  Use inner/outer expandable connectors for control buses.
        FCSys.WorkInProgress.Systems.Humidifier.Humidifier anHumidifier
          annotation (Placement(transformation(extent={{-50,-14},{-30,6}},
                rotation=0)));
        Assemblies.ClosedTank tankH2 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-190,-10})));
        FCSys.WorkInProgress.Systems.Pump.Pump coolingPump annotation (
            Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-100,62})));
        FCSys.WorkInProgress.Systems.DCDC.DCDC dCDC annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={174,-12})));
        Assemblies.OpenTank H2OTank annotation (Placement(transformation(extent
                ={{-30,10},{-10,30}}, rotation=0)));
        FCSys.WorkInProgress.Systems.Pump.Pump compressor annotation (Placement(
              transformation(extent={{-110,-60},{-90,-40}}, rotation=0)));
        FCSys.WorkInProgress.Systems.Pump.Pump condensatePump annotation (
            Placement(transformation(extent={{-110,22},{-90,42}}, rotation=0)));
        Connectors.FaceBus ambientN annotation (Placement(transformation(extent
                ={{-210,70},{-190,90}}), iconTransformation(extent={{-110,50},{
                  -90,70}})));
        outer FCSys.WorkInProgress.Systems.FC.Interfaces.ActBusIn actBusIn
          annotation (Placement(transformation(extent={{-210,-90},{-190,-70}}),
              iconTransformation(extent={{-92,-10},{-72,10}})));
        outer FCSys.WorkInProgress.Systems.FC.Interfaces.SenBusOut senBusOut
          annotation (Placement(transformation(extent={{190,-90},{210,-70}}),
              iconTransformation(extent={{72,-10},{92,10}})));
        FCSys.WorkInProgress.Systems.Valve.Valve caExitValve annotation (
            Placement(transformation(extent={{110,-62},{130,-42}}, rotation=0)));
        FCSys.WorkInProgress.Systems.Valve.Valve anExitValve annotation (
            Placement(transformation(extent={{110,-20},{130,0}}, rotation=0)));
        FCSys.WorkInProgress.Systems.Valve.Valve anInletValve annotation (
            Placement(transformation(extent={{-180,-22},{-160,-2}}, rotation=0)));
        FCSys.WorkInProgress.Systems.FluidHeater.FluidHeater anPreheater
          annotation (Placement(transformation(extent={{-110,-24},{-90,-4}})));
        Assemblies.Condenser condenser
          annotation (Placement(transformation(extent={{70,-54},{90,-34}})));
        FCSys.WorkInProgress.Systems.Humidifier.Humidifier caHumidifier
          annotation (Placement(transformation(extent={{-50,-54},{-30,-34}})));
        FCSys.WorkInProgress.AssembliesHeatExchanger radiator
          annotation (Placement(transformation(extent={{-60,66},{-40,86}})));
        Connectors.FaceBus ambientP annotation (Placement(transformation(extent
                ={{190,70},{210,90}}), iconTransformation(extent={{-110,50},{-90,
                  70}})));

      equation
        v = pinP.v - pinP.v;

        connect(condensatePump.actBusIn, actBusIn);
        connect(actBusIn, compressor.actBusIn);
        connect(compressor.senBusOut, senBusOut);
        connect(condensatePump.senBusOut, senBusOut);
        connect(anInletValve.actBusIn, actBusIn);
        connect(anPreheater.actBusIn, actBusIn);
        connect(anInletValve.senBusOut, senBusOut);

        connect(anPreheater.senBusOut, senBusOut);
        connect(caExitValve.senBusOut, senBusOut);
        connect(anExitValve.senBusOut, senBusOut);
        connect(anExitValve.actBusIn, actBusIn);
        connect(caExitValve.actBusIn, actBusIn);
        connect(caHumidifier.actBusIn, actBusIn);
        connect(caHumidifier.actBusOut, senBusOut);
        connect(anHumidifier.actBusIn, actBusIn);
        connect(anHumidifier.actBusOut, senBusOut);
        connect(dCDC.actBusIn, actBusIn);

        connect(senBusOut, dCDC.senBusOut);
        connect(coolingPump.actBusIn, actBusIn);
        connect(coolingPump.senBusOut, senBusOut);

        connect(wireN, dCDC.matN2) annotation (Line(
            points={{180,-120},{180,-22}},
            color={0,200,0},
            smooth=Smooth.None));
        connect(dCDC.matP2, wireP) annotation (Line(
            points={{180,-2},{180,120}},
            color={0,200,0},
            smooth=Smooth.None));
        connect(radiator.pipeP2, ambientP) annotation (Line(
            points={{-40,80},{200,80}},
            color={0,128,255},
            smooth=Smooth.None));
        connect(radiator.pipe_N2, ambientN) annotation (Line(
            points={{-60,80},{-200,80}},
            color={0,128,255},
            smooth=Smooth.None));
        connect(compressor.pipeN, ambientN) annotation (Line(
            points={{-110,-50},{-150,-50},{-150,80},{-200,80}},
            color={0,128,255},
            smooth=Smooth.None));
        connect(caHumidifier.mixturePipeP, compressor.pipeP) annotation (Line(
            points={{-50,-50},{-90,-50}},
            color={0,128,255},
            smooth=Smooth.None));
        connect(coolingPump.pipeP, radiator.pipe_N1) annotation (Line(
            points={{-90,62},{-70,62},{-70,72},{-60,72}},
            color={192,0,192},
            smooth=Smooth.None));
        connect(condenser.mixturePipeP, caExitValve.pipeN) annotation (Line(
            points={{90,-50},{110,-50}},
            color={0,128,255},
            smooth=Smooth.None));
        connect(anExitValve.pipeP, ambientP) annotation (Line(
            points={{130,-8},{150,-8},{150,80},{200,80}},
            color={255,128,0},
            smooth=Smooth.None));

        connect(condensatePump.pipeP, H2OTank.matP) annotation (Line(
            points={{-90,32},{-20,32},{-20,24}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(H2OTank.matN, anHumidifier.H2OPipe) annotation (Line(
            points={{-20,16},{-20,2},{-40,2}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(caHumidifier.H2OPipe, H2OTank.matN) annotation (Line(
            points={{-40,-38},{-20,-38},{-20,16}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(condensatePump.wireP, coolingPump.wireP) annotation (Line(
            points={{-90,28},{-80,28},{-80,58},{-90,58}},
            color={0,200,0},
            smooth=Smooth.None));
        connect(compressor.wireP, condensatePump.wireP) annotation (Line(
            points={{-90,-54},{-80,-54},{-80,28},{-90,28}},
            color={0,200,0},
            smooth=Smooth.None));
        connect(condensatePump.wireN, compressor.wireN) annotation (Line(
            points={{-110,28},{-120,28},{-120,-54},{-110,-54}},
            color={0,200,0},
            smooth=Smooth.None));
        connect(coolingPump.wireN, compressor.wireN) annotation (Line(
            points={{-110,58},{-120,58},{-120,-54},{-110,-54}},
            color={0,200,0},
            smooth=Smooth.None));
        connect(anPreheater.wireP, compressor.wireP) annotation (Line(
            points={{-90,-18},{-80,-18},{-80,-54},{-90,-54}},
            color={0,200,0},
            smooth=Smooth.None));
        connect(anPreheater.wireN, compressor.wireN) annotation (Line(
            points={{-110,-18},{-120,-18},{-120,-54},{-110,-54}},
            color={0,200,0},
            smooth=Smooth.None));
        connect(tankH2.normal, anInletValve.pipeN) annotation (Line(
            points={{-190,-10},{-180,-10}},
            color={255,128,0},
            smooth=Smooth.None));
        connect(anHumidifier.mixturePipeN, stack.anPipeN) annotation (Line(
            points={{-30,-10},{0,-10},{0,-24},{10,-24}},
            color={255,128,0},
            smooth=Smooth.None));
        connect(stack.anPipeP, anExitValve.pipeN) annotation (Line(
            points={{30,-24},{40,-24},{40,-8},{110,-8}},
            color={255,128,0},
            smooth=Smooth.None));
        connect(stack.caPipeP, condenser.mixturePipeN) annotation (Line(
            points={{30,-36},{40,-36},{40,-50},{70,-50}},
            color={0,128,255},
            smooth=Smooth.None));
        connect(radiator.pipeP1, condenser.coolantPipeP) annotation (Line(
            points={{-40,72},{100,72},{100,-40},{90,-40}},
            color={192,0,192},
            smooth=Smooth.None));
        connect(condenser.coolantPipeN, stack.coolantPipeP) annotation (Line(
            points={{70,-40},{50,-40},{50,-30},{30,-30}},
            color={192,0,192},
            smooth=Smooth.None));
        connect(stack.coolantPipeN, coolingPump.pipeN) annotation (Line(
            points={{10,-30},{-10,-30},{-10,-70},{-140,-70},{-140,62},{-110,62}},

            color={192,0,192},
            smooth=Smooth.None));

        connect(caExitValve.pipeP, ambientP) annotation (Line(
            points={{130,-50},{150,-50},{150,80},{200,80}},
            color={0,128,255},
            smooth=Smooth.None));
        connect(stack.anWire, dCDC.wireP1) annotation (Line(
            points={{18,-20},{18,100},{168,100},{168,-2}},
            color={0,200,0},
            smooth=Smooth.None));
        connect(coolingPump.wireN, stack.anWire) annotation (Line(
            points={{-110,58},{-120,58},{-120,100},{18,100},{18,-20}},
            color={0,200,0},
            smooth=Smooth.None));
        connect(dCDC.wireN1, stack.caWire) annotation (Line(
            points={{168,-22},{168,-100},{18,-100},{18,-40}},
            color={0,200,0},
            smooth=Smooth.None));
        connect(condensatePump.pipeN, condenser.H2OPipe) annotation (Line(
            points={{-110,32},{-130,32},{-130,-84},{80,-84},{80,-54}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(compressor.wireN, stack.caWire) annotation (Line(
            points={{-110,-54},{-120,-54},{-120,-100},{18,-100},{18,-40}},
            color={0,200,0},
            smooth=Smooth.None));
        connect(anPreheater.pipeN, anInletValve.pipeP) annotation (Line(
            points={{-110,-10},{-160,-10}},
            color={255,128,0},
            smooth=Smooth.None));
        connect(caHumidifier.mixturePipeN, stack.caPipeN) annotation (Line(
            points={{-30,-50},{0,-50},{0,-36},{10,-36}},
            color={0,128,255},
            smooth=Smooth.None));
        connect(anHumidifier.mixturePipeP, anPreheater.pipeP) annotation (Line(
            points={{-50,-10},{-90,-10}},
            color={255,128,0},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-200,-120},{200,120}},
              initialScale=0.1), graphics),
          experiment(
            StopTime=2000,
            Tolerance=1e-005,
            Algorithm="Dassl"),
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics));

      end FCNoRecirc;

      package Interfaces
        extends Modelica.Icons.InterfacesPackage;

        expandable connector ActBusIn
          "Data bus for inputs to a plant's actuators"
          extends FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.In;
          input SI.Voltage v_ref;
          input Real valvePos_an_in;
          input Real valvePos_an_out;
          input Real valvePos_ca_out;
          input Real valvePos_humid_an;
          input Real valvePos_humid_ca;
          input Real qdot_compressor;
          input Real qdot_H2Opump;
          input Real qdot_coolingPump;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end ActBusIn;

        expandable connector ActBusOut
          "Data bus for inputs to a plant's actuators"
          extends
            FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.Out;
          output SI.Current current_ref;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end ActBusOut;

        expandable connector SenBusIn
          "Data bus for outputs from a plant's sensors"
          extends FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.In;
          input Q.Voltage current;
          input Q.Rotation angle;
          input Q.RotationalVelocity speed;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end SenBusIn;

        expandable connector SenBusOut
          "Data bus for outputs from a plant's sensors"
          extends
            FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.Out;
          output Q.Voltage current;
          output Q.Rotation angle;
          output Q.RotationalVelocity speed;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end SenBusOut;

        model ActArrayToBus

          FCSys.WorkInProgress.Systems.FC.Interfaces.ActBusOut actBusOut
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={100,0}),iconTransformation(
                extent={{-80,-20},{-40,20}},
                rotation=0,
                origin={100,0})));
          Connectors.RealInput actIN[1] annotation (Placement(transformation(
                  extent={{-110,-10},{-90,10}}), iconTransformation(extent={{-60,
                    -20},{-20,20}})));

        equation
          connect(actIN[1], actBusOut.current_ref) annotation (Line(
              points={{-100,0},{-4,0},{-4,5.55112e-16},{100,5.55112e-16}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-60,-40},{60,40}}),
                graphics={Rectangle(
                          extent={{-40,40},{40,-40}},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.Dash,
                          lineColor={0,0,0}),Line(
                          points={{-28,4},{28,4}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-28,-4},{34,-4}},
                          color={0,0,127},
                          smooth=Smooth.None)}));

        end ActArrayToBus;

        model SenBusToArray

          SenBusIn senBusIn annotation (Placement(transformation(extent={{-110,
                    -10},{-90,10}}), iconTransformation(extent={{-60,-20},{-20,
                    20}})));
          Connectors.RealOutput senOut[3] annotation (Placement(transformation(
                  extent={{90,-10},{110,10}}), iconTransformation(extent={{20,-20},
                    {60,20}})));

        equation
          connect(senBusIn.angle, senOut[3]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,6.66667},{100,
                  6.66667}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));

          connect(senBusIn.speed, senOut[2]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,0},{100,0}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
          connect(senBusIn.current, senOut[1]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,-6.66667},{100,-6.66667}},

              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-60,-40},{60,40}}),
                graphics={Rectangle(
                          extent={{-40,40},{40,-40}},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.Dash,
                          lineColor={0,0,0}),Line(
                          points={{-34,-4},{20,-4}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-28,4},{20,4}},
                          color={0,0,127},
                          smooth=Smooth.None)}));

        end SenBusToArray;

      end Interfaces;

    end FC;

    package Humidifier
      extends Modelica.Icons.Package;

      model Humidifier
        // TODO:  Complete this.

        extends FCSys.BaseClasses.Icons.Name.Top4;

        Connectors.FaceBus mixturePipeN annotation (Placement(transformation(
                extent={{90,-70},{110,-50}}), iconTransformation(extent={{90,-70},
                  {110,-50}})));
        FCSys.WorkInProgress.Systems.Humidifier.Interfaces.ActBusIn actBusIn
          annotation (Placement(transformation(extent={{-32,60},{-12,80}}),
              iconTransformation(extent={{-32,10},{-12,30}})));
        FCSys.WorkInProgress.Systems.Humidifier.Interfaces.ActBusOut actBusOut
          annotation (Placement(transformation(extent={{14,60},{34,80}}),
              iconTransformation(extent={{14,10},{34,30}})));
        FCSys.WorkInProgress.Systems.Valve.Valve valve annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={0,50})));
        Connectors.FaceBus H2OPipe annotation (Placement(transformation(extent=
                  {{-10,50},{10,70}}), iconTransformation(extent={{-10,50},{10,
                  70}})));
        Connectors.FaceBus mixturePipeP annotation (Placement(transformation(
                extent={{90,-10},{110,10}}), iconTransformation(extent={{-110,-70},
                  {-90,-50}})));
        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics={Line(
                      points={{10,-30},{0,-50}},
                      color={0,0,255},
                      thickness=0.5),Line(
                      points={{-10,-30},{0,-50}},
                      color={0,0,255},
                      thickness=0.5),Line(
                      points={{0,50},{0,-50}},
                      color={0,0,255},
                      thickness=0.5),Rectangle(
                      extent={{-10,0},{10,-20}},
                      lineColor={0,0,0},
                      lineThickness=0.5,
                      fillPattern=FillPattern.VerticalCylinder,
                      fillColor={135,135,135}),Rectangle(
                      extent={{-40,40},{40,0}},
                      lineThickness=0.5,
                      fillPattern=FillPattern.VerticalCylinder,
                      fillColor={0,0,0},
                      pattern=LinePattern.None),Rectangle(
                      extent={{-10,100},{10,-100}},
                      lineColor={0,0,0},
                      lineThickness=0.5,
                      fillPattern=FillPattern.VerticalCylinder,
                      fillColor={135,135,135},
                      origin={0,-60},
                      rotation=90)}), Diagram(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics));

      end Humidifier;

      package Interfaces
        extends Modelica.Icons.InterfacesPackage;

        expandable connector ActBusIn
          "Data bus for inputs to a plant's actuators"
          extends FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.In;
          input SI.Voltage v_ref;
          input Real valvePos_an_in;
          input Real valvePos_an_out;
          input Real valvePos_ca_out;
          input Real valvePos_humid_an;
          input Real valvePos_humid_ca;
          input Real qdot_compressor;
          input Real qdot_H2Opump;
          input Real qdot_coolingPump;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end ActBusIn;

        expandable connector ActBusOut
          "Data bus for inputs to a plant's actuators"
          extends
            FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.Out;
          output SI.Current current_ref;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end ActBusOut;

        expandable connector SenBusIn
          "Data bus for outputs from a plant's sensors"
          extends FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.In;
          input Q.Voltage current;
          input Q.Rotation angle;
          input Q.RotationalVelocity speed;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end SenBusIn;

        expandable connector SenBusOut
          "Data bus for outputs from a plant's sensors"
          extends
            FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.Out;
          output Q.Voltage current;
          output Q.Rotation angle;
          output Q.RotationalVelocity speed;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end SenBusOut;

        model ActArrayToBus

          FCSys.WorkInProgress.Systems.Humidifier.Interfaces.ActBusOut
            actBusOut annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={100,0}),iconTransformation(
                extent={{-80,-20},{-40,20}},
                rotation=0,
                origin={100,0})));
          Connectors.RealInput actIN[1] annotation (Placement(transformation(
                  extent={{-110,-10},{-90,10}}), iconTransformation(extent={{-60,
                    -20},{-20,20}})));

        equation
          connect(actIN[1], actBusOut.current_ref) annotation (Line(
              points={{-100,0},{-4,0},{-4,5.55112e-16},{100,5.55112e-16}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-60,-40},{60,40}}),
                graphics={Rectangle(
                          extent={{-40,40},{40,-40}},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.Dash,
                          lineColor={0,0,0}),Line(
                          points={{-28,4},{28,4}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-28,-4},{34,-4}},
                          color={0,0,127},
                          smooth=Smooth.None)}));

        end ActArrayToBus;

        model SenBusToArray

          SenBusIn senBusIn annotation (Placement(transformation(extent={{-110,
                    -10},{-90,10}}), iconTransformation(extent={{-60,-20},{-20,
                    20}})));
          Connectors.RealOutput senOut[3] annotation (Placement(transformation(
                  extent={{90,-10},{110,10}}), iconTransformation(extent={{20,-20},
                    {60,20}})));

        equation
          connect(senBusIn.angle, senOut[3]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,6.66667},{100,
                  6.66667}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));

          connect(senBusIn.speed, senOut[2]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,0},{100,0}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
          connect(senBusIn.current, senOut[1]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,-6.66667},{100,-6.66667}},

              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-60,-40},{60,40}}),
                graphics={Rectangle(
                          extent={{-40,40},{40,-40}},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.Dash,
                          lineColor={0,0,0}),Line(
                          points={{-34,-4},{20,-4}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-28,4},{20,4}},
                          color={0,0,127},
                          smooth=Smooth.None)}));

        end SenBusToArray;

      end Interfaces;

    end Humidifier;

    package DCDC
      extends Modelica.Icons.Package;

      model DCDC

        // TODO:  Complete this.

        extends FCSys.WorkInProgress.BaseClassesIconsTransformer;
        import DomainQ = FCSys.Domains.MagneticElectroMechanical.Quantities;

        parameter FCSys.WorkInProgress.Systems.BaseClasses.LHSchoice LHS=
            BaseClasses.LHSchoice.Delta_v1
          "Choice of variable for the left hand side (LHS) of the governing equation"
          annotation (Evaluate=true);
        parameter FCSys.WorkInProgress.Systems.BaseClasses.RHSchoice RHS=
            BaseClasses.RHSchoice.Delta_v2
          "Choice of variable for the right hand side (RHS) of the governing equation"
          annotation (Evaluate=true);
        parameter Boolean specAsParam=true
          "true: use a parameter to specify the governing equation; false: use dynamic input";

        parameter Q.Unity k_ratio=1 "Voltage or current ratio of side 1:side 2"
          annotation (Dialog(enable=((LHS == RHS) and specAsParam)));
        parameter FCSys.WorkInProgress.Magnetic.Conductance k_theta=U.ohm
          "Hall resistance across side 1 (Delta_v1/Delta_qdot2)" annotation (
            Dialog(enable=((LHS == 1) and (RHS == 2) and specAsParam)));
        parameter FCSys.WorkInProgress.Magnetic2.Conductance k_sigma=U.S
          "Hall conductance through side 1 (Delta_qdot1/Delta_v2)" annotation (
            Dialog(enable=((LHS == 2) and (RHS == 1) and specAsParam)));
        parameter FCSys.WorkInProgress.Magnetic2.Effort k_Delta_v1=U.V
          "Voltage across side 1" annotation (Dialog(enable=((LHS == 1) and (
                RHS == 3) and specAsParam)));
        parameter FCSys.WorkInProgress.Magnetic2.Flow k_Delta_qdot1=U.A
          "Total current through side 1" annotation (Dialog(enable=((LHS == 2)
                 and (RHS == 3) and specAsParam)));

        FCSys.WorkInProgress.Magnetic2.Effort Delta_v1
          "Electrical driving force (for net current positive from chargeP to chargeN)";
        FCSys.WorkInProgress.Magnetic2.Flow Delta_qdot1
          "Total current of both pins (positive by right hand rule from chargeP to chargeN)";
        FCSys.WorkInProgress.Magnetic2.Effort Sigma_v1
          "Electrical sink force (for net current into each flange)";
        FCSys.WorkInProgress.Magnetic2.Flow Sigma_qdot1
          "Net current stored or destroyed (positive into each pin)";

        FCSys.WorkInProgress.Magnetic2.Effort Delta_v2
          "Electrical driving force (for net current positive from chargeP to chargeN)";
        FCSys.WorkInProgress.Magnetic2.Flow Delta_qdot2
          "Total current of both pins (positive by right hand rule from chargeP to chargeN)";
        FCSys.WorkInProgress.Magnetic2.Effort Sigma_v2
          "Electrical sink force (for net current into each flange)";
        FCSys.WorkInProgress.Magnetic2.Flow Sigma_qdot2
          "Net current stored or destroyed (positive into each pin)";

        FCSys.WorkInProgress.Systems.DCDC.Interfaces.ActBusIn actBusIn
          annotation (Placement(transformation(extent={{-62,-10},{-42,10}}),
              iconTransformation(extent={{-52,-10},{-32,10}})));
        FCSys.WorkInProgress.Systems.DCDC.Interfaces.SenBusOut senBusOut
          annotation (Placement(transformation(extent={{42,-10},{62,10}}),
              iconTransformation(extent={{32,-10},{52,10}})));
        Connectors.FaceBus wireN2 annotation (Placement(transformation(extent={
                  {-106,54},{-94,66}}), iconTransformation(extent={{-110,50},{-90,
                  70}})));
        Connectors.FaceBus wireP2 annotation (Placement(transformation(extent={
                  {94,54},{106,66}}), iconTransformation(extent={{90,50},{110,
                  70}})));
        Connectors.FaceBus wireN1 annotation (Placement(transformation(extent={
                  {-106,-66},{-94,-54}}), iconTransformation(extent={{-110,-70},
                  {-90,-50}})));
        Connectors.FaceBus wireP1 annotation (Placement(transformation(extent={
                  {94,-66},{106,-54}}), iconTransformation(extent={{90,-70},{
                  110,-50}})));

      equation
        Delta_v1 = chargeP1.v - chargeN1.v;
        Delta_qdot1 = chargeP1.qdot - chargeN1.qdot;
        Sigma_v1 = chargeP1.v + chargeN1.v;
        Sigma_qdot1 = chargeP1.qdot + chargeN1.qdot;

        Delta_v2 = chargeP2.v - chargeN2.v;
        Delta_qdot2 = chargeP2.qdot - chargeN2.qdot;
        Sigma_v2 = chargeP2.v + chargeN2.v;
        Sigma_qdot2 = chargeP2.qdot + chargeN2.qdot;

        // Steady state charge balance (no current destroyed or stored)
        0 = Sigma_qdot1;
        0 = Sigma_qdot2;

        // Steady state energy balance
        0 = Delta_v1*Delta_qdot1 + Delta_v2*Delta_qdot2 + Sigma_v1*Sigma_qdot1
           + Sigma_v2*Sigma_qdot2;

        // Internal connector
        if specAsParam then
          if (LHS == RHS) then
            k_internal = k_ratio;
          elseif (LHS == 1 and RHS == 2) then
            k_internal = k_theta;
          elseif (LHS == 2 and RHS == 1) then
            k_internal = k_sigma;
          elseif (LHS == 1 and RHS == 3) then
            k_internal = k_Delta_v1;
          elseif (LHS == 2 and RHS == 3) then
            k_internal = k_Delta_qdot1;
          end if;
        end if;

        // Governing linear equation
        if (LHS == BaseClasses.LHSchoice.Delta_v1 and RHS == BaseClasses.RHSchoice.Delta_v2)
             then
          Delta_v1 = k_internal*Delta_v2;
        elseif (LHS == BaseClasses.LHSchoice.Delta_v1 and RHS == BaseClasses.RHSchoice.Delta_qdot2)
             then
          Delta_v1 = k_internal*Delta_qdot2;
        elseif (LHS == BaseClasses.LHSchoice.Delta_qdot1 and RHS == BaseClasses.RHSchoice.Delta_v2)
             then
          Delta_qdot1 = k_internal*Delta_v2;
        elseif (LHS == BaseClasses.LHSchoice.Delta_qdot1 and RHS == BaseClasses.RHSchoice.Delta_qdot2)
             then
          Delta_qdot1 = k_internal*Delta_qdot2;
        elseif (LHS == BaseClasses.LHSchoice.Delta_v1 and RHS == BaseClasses.RHSchoice.unity)
             then
          Delta_v1 = k_internal;
        elseif (LHS == BaseClasses.LHSchoice.Delta_qdot1 and RHS == BaseClasses.RHSchoice.unity)
             then
          Delta_qdot1 = k_internal;
        end if;
        annotation (Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Rectangle(
                      extent={{-60,20},{60,-20}},
                      fillColor={0,0,0},
                      fillPattern=FillPattern.Solid,
                      pattern=LinePattern.None,
                      lineColor={0,0,0}),Polygon(
                      points={{-40,20},{80,20},{20,-40},{-40,20}},
                      lineColor={0,192,0},
                      smooth=Smooth.None,
                      origin={20,-40},
                      rotation=180),Polygon(
                      points={{-40,20},{80,20},{20,-40},{-40,20}},
                      lineColor={0,192,0},
                      smooth=Smooth.None,
                      origin={-20,40},
                      rotation=360),Line(
                      points={{-90,60},{90,60}},
                      color={0,192,0},
                      smooth=Smooth.None),Line(
                      points={{-90,-60},{90,-60}},
                      color={0,192,0},
                      smooth=Smooth.None),Polygon(
                      points={{-20,0},{100,0},{40,-60},{-20,0}},
                      lineColor={0,192,0},
                      smooth=Smooth.None,
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid,
                      origin={-40,60},
                      rotation=360),Polygon(
                      points={{-40,-6.89683e-15},{80,7.13232e-15},{20,-60},{-40,
                  -6.89683e-15}},
                      lineColor={0,192,0},
                      smooth=Smooth.None,
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid,
                      origin={20,-60},
                      rotation=180)}), Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics));

      end DCDC;

      model IdealDCDC
        extends FCSys.WorkInProgress.Systems.DCDC.ElecElec(
          final LHS=BaseClasses.LHSchoice.Delta_v1,
          final RHS=BaseClasses.RHSchoice.unity,
          final specAsParam=false,
          final k_ratio=1,
          final k_theta=1,
          final k_sigma=1,
          final k_Delta_v1=1,
          final k_Delta_qdot1=1);
        annotation (Icon(graphics));

      end IdealDCDC;

      model ElecElec
        extends FCSys.WorkInProgress.TwoElecStreams;
        extends FCSys.WorkInProgress.BaseClassesIconsTransformer;

        parameter FCSys.WorkInProgress.Systems.BaseClasses.LHSchoice LHS=
            BaseClasses.LHSchoice.Delta_v1
          "Choice of variable for the left hand side (LHS) of the governing equation"
          annotation (Evaluate=true);
        parameter FCSys.WorkInProgress.Systems.BaseClasses.RHSchoice RHS=
            BaseClasses.RHSchoice.Delta_v2
          "Choice of variable for the right hand side (RHS) of the governing equation"
          annotation (Evaluate=true);
        parameter Boolean specAsParam=true
          "true: use a parameter to specify the governing equation; false: use dynamic input";

        parameter Q.Unity k_ratio=1 "Voltage or current ratio of side 1:side 2"
          annotation (Dialog(enable=((LHS == RHS) and specAsParam)));
        parameter FCSys.WorkInProgress.Magnetic.Conductance k_theta=U.ohm
          "Hall resistance across side 1 (Delta_v1/Delta_qdot2)" annotation (
            Dialog(enable=((LHS == 1) and (RHS == 2) and specAsParam)));
        parameter FCSys.WorkInProgress.Magnetic2.Conductance k_sigma=U.S
          "Hall conductance through side 1 (Delta_qdot1/Delta_v2)" annotation (
            Dialog(enable=((LHS == 2) and (RHS == 1) and specAsParam)));
        parameter FCSys.WorkInProgress.Magnetic2.Effort k_Delta_v1=U.V
          "Voltage across side 1" annotation (Dialog(enable=((LHS == 1) and (
                RHS == 3) and specAsParam)));
        parameter FCSys.WorkInProgress.Magnetic2.QuantumRate k_Delta_qdot1=U.A
          "Total current through side 1" annotation (Dialog(enable=((LHS == 2)
                 and (RHS == 3) and specAsParam)));

        FCSys.WorkInProgress.Magnetic2.Effort Delta_v1
          "Electrical driving force (for net current positive from elecP to elecN)";
        FCSys.WorkInProgress.Magnetic2.QuantumRate Delta_qdot1
          "Total current of both interfaces (positive by right hand rule from elecP to elecN)";
        FCSys.WorkInProgress.Magnetic2.Effort Sigma_v1
          "Electrical sink force (for net current into each interface)";
        FCSys.WorkInProgress.Magnetic2.QuantumRate Sigma_qdot1
          "Net current stored or destroyed (positive into each interface)";

        FCSys.WorkInProgress.Magnetic2.Effort Delta_v2
          "Electrical driving force (for net current positive from elecP to elecN)";
        FCSys.WorkInProgress.Magnetic2.QuantumRate Delta_qdot2
          "Total current of both interfaces (positive by right hand rule from elecP to elecN)";
        FCSys.WorkInProgress.Magnetic2.Effort Sigma_v2
          "Electrical sink force (for net current into each interface)";
        FCSys.WorkInProgress.Magnetic2.QuantumRate Sigma_qdot2
          "Net current stored or destroyed (positive into each interface)";

        Connectors.RealInput k_set(final unit=if (LHS == RHS) then "1" else if
              (LHS == 1 and RHS == 2) then "1/Q2" else if (LHS == 2 and RHS ==
              1) then "Q2" else if (LHS == 1 and RHS == 3) then "1/(Q.T)" else
              "Q/T", displayUnit=if (LHS == RHS) then "1" else if (LHS == 1
               and RHS == 2) then "ohm" else if (LHS == 2 and RHS == 1) then
              "S" else if (LHS == 1 and RHS == 3) then "V" else "A") if (not
          specAsParam)
          "Coefficient for the RHS of the governing equation as an input"
          annotation (Placement(transformation(
              origin={0,-120},
              extent={{-20,-20},{20,20}},
              rotation=90), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-80})));

      protected
        Connectors.RealInput k_internal(final unit=if (LHS == RHS) then "1"
               else if (LHS == 1 and RHS == 2) then "1/Q2" else if (LHS == 2
               and RHS == 1) then "Q2" else if (LHS == 1 and RHS == 3) then
              "1/(Q.T)" else "Q/T", displayUnit=if (LHS == RHS) then "1" else
              if (LHS == 1 and RHS == 2) then "ohm" else if (LHS == 2 and RHS
               == 1) then "S" else if (LHS == 1 and RHS == 3) then "V" else "A")
          "Coefficient for the RHS of the governing equation as an internal connector"
          annotation (Placement(transformation(
              origin={0,-80},
              extent={{-20,-20},{20,20}},
              rotation=90)));

      equation
        Delta_v1 = elecP1.Phidot_d - elecN1.Phidot_d;
        Delta_qdot1 = elecP1.qdot_t - elecN1.qdot_t;
        Sigma_v1 = elecP1.Phidot_d + elecN1.Phidot_d;
        Sigma_qdot1 = elecP1.qdot_t + elecN1.qdot_t;

        Delta_v2 = elecP2.Phidot_d - elecN2.Phidot_d;
        Delta_qdot2 = elecP2.qdot_t - elecN2.qdot_t;
        Sigma_v2 = elecP2.Phidot_d + elecN2.Phidot_d;
        Sigma_qdot2 = elecP2.qdot_t + elecN2.qdot_t;

        // Steady state charge balance (no current destroyed or stored)
        0 = Sigma_qdot1;
        0 = Sigma_qdot2;

        // Steady state energy balance
        0 = Delta_v1*Delta_qdot1 + Delta_v2*Delta_qdot2 + Sigma_v1*Sigma_qdot1
           + Sigma_v2*Sigma_qdot2;

        // Internal connector
        if specAsParam then
          if (LHS == RHS) then
            k_internal = k_ratio;
          elseif (LHS == 1 and RHS == 2) then
            k_internal = k_theta;
          elseif (LHS == 2 and RHS == 1) then
            k_internal = k_sigma;
          elseif (LHS == 1 and RHS == 3) then
            k_internal = k_Delta_v1;
          elseif (LHS == 2 and RHS == 3) then
            k_internal = k_Delta_qdot1;
          end if;
        end if;

        // Governing linear equation
        if (LHS == BaseClasses.LHSchoice.Delta_v1 and RHS == BaseClasses.RHSchoice.Delta_v2)
             then
          Delta_v1 = k_internal*Delta_v2;
        elseif (LHS == BaseClasses.LHSchoice.Delta_v1 and RHS == BaseClasses.RHSchoice.Delta_qdot2)
             then
          Delta_v1 = k_internal*Delta_qdot2;
        elseif (LHS == BaseClasses.LHSchoice.Delta_qdot1 and RHS == BaseClasses.RHSchoice.Delta_v2)
             then
          Delta_qdot1 = k_internal*Delta_v2;
        elseif (LHS == BaseClasses.LHSchoice.Delta_qdot1 and RHS == BaseClasses.RHSchoice.Delta_qdot2)
             then
          Delta_qdot1 = k_internal*Delta_qdot2;
        elseif (LHS == BaseClasses.LHSchoice.Delta_v1 and RHS == BaseClasses.RHSchoice.unity)
             then
          Delta_v1 = k_internal;
        elseif (LHS == BaseClasses.LHSchoice.Delta_qdot1 and RHS == BaseClasses.RHSchoice.unity)
             then
          Delta_qdot1 = k_internal;
        end if;

        connect(k_set, k_internal) annotation (Line(
            points={{1.11022e-15,-120},{1.11022e-15,-110},{1.11022e-15,-110},{
                1.11022e-15,-100},{1.11022e-15,-80},{1.11022e-15,-80}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Polygon(
                      points={{-40,20},{80,20},{20,-40},{-40,20}},
                      lineColor={0,192,0},
                      smooth=Smooth.None,
                      origin={20,-40},
                      rotation=180),Polygon(
                      points={{-40,20},{80,20},{20,-40},{-40,20}},
                      lineColor={0,192,0},
                      smooth=Smooth.None,
                      origin={-20,40},
                      rotation=360),Line(
                      points={{-90,60},{90,60}},
                      color={0,192,0},
                      smooth=Smooth.None),Line(
                      points={{-90,-60},{90,-60}},
                      color={0,192,0},
                      smooth=Smooth.None)}), Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics));

      end ElecElec;

      package Interfaces
        extends Modelica.Icons.InterfacesPackage;

        expandable connector ActBusIn
          "Data bus for inputs to a plant's actuators"
          extends FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.In;
          input SI.Voltage v_ref;
          input Real valvePos_an_in;
          input Real valvePos_an_out;
          input Real valvePos_ca_out;
          input Real valvePos_humid_an;
          input Real valvePos_humid_ca;
          input Real qdot_compressor;
          input Real qdot_H2Opump;
          input Real qdot_coolingPump;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end ActBusIn;

        expandable connector ActBusOut
          "Data bus for inputs to a plant's actuators"
          extends
            FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.Out;
          output SI.Current current_ref;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end ActBusOut;

        expandable connector SenBusIn
          "Data bus for outputs from a plant's sensors"
          extends FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.In;
          input Q.Voltage current;
          input Q.Rotation angle;
          input Q.RotationalVelocity speed;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end SenBusIn;

        expandable connector SenBusOut
          "Data bus for outputs from a plant's sensors"
          extends
            FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.Out;
          output Q.Voltage current;
          output Q.Rotation angle;
          output Q.RotationalVelocity speed;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end SenBusOut;

        model ActArrayToBus

          FCSys.WorkInProgress.Systems.DCDC.Interfaces.ActBusOut actBusOut
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={100,0}),iconTransformation(
                extent={{-80,-20},{-40,20}},
                rotation=0,
                origin={100,0})));
          Connectors.RealInput actIN[1] annotation (Placement(transformation(
                  extent={{-110,-10},{-90,10}}), iconTransformation(extent={{-60,
                    -20},{-20,20}})));

        equation
          connect(actIN[1], actBusOut.current_ref) annotation (Line(
              points={{-100,0},{-4,0},{-4,5.55112e-16},{100,5.55112e-16}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-60,-40},{60,40}}),
                graphics={Rectangle(
                          extent={{-40,40},{40,-40}},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.Dash,
                          lineColor={0,0,0}),Line(
                          points={{-28,4},{28,4}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-28,-4},{34,-4}},
                          color={0,0,127},
                          smooth=Smooth.None)}));

        end ActArrayToBus;

        model SenBusToArray

          SenBusIn senBusIn annotation (Placement(transformation(extent={{-110,
                    -10},{-90,10}}), iconTransformation(extent={{-60,-20},{-20,
                    20}})));
          Connectors.RealOutput senOut[3] annotation (Placement(transformation(
                  extent={{90,-10},{110,10}}), iconTransformation(extent={{20,-20},
                    {60,20}})));

        equation
          connect(senBusIn.angle, senOut[3]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,6.66667},{100,
                  6.66667}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));

          connect(senBusIn.speed, senOut[2]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,0},{100,0}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
          connect(senBusIn.current, senOut[1]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,-6.66667},{100,-6.66667}},

              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-60,-40},{60,40}}),
                graphics={Rectangle(
                          extent={{-40,40},{40,-40}},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.Dash,
                          lineColor={0,0,0}),Line(
                          points={{-34,-4},{20,-4}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-28,4},{20,4}},
                          color={0,0,127},
                          smooth=Smooth.None)}));

        end SenBusToArray;

      end Interfaces;

    end DCDC;

    package Pump
      extends Modelica.Icons.Package;
      model Pump
        // TODO:  Complete this.

        extends FCSys.WorkInProgress.BaseClassesIconsPump;
        // extends FCSys.Processes.BaseClasses.PartialTransport.Middle;
        // extends FCSys.Processes.BaseClasses.PartialTransport.Bottom2;

        Connectors.FaceBus wireN annotation (Placement(transformation(extent={{
                  -30,-10},{-10,10}}), iconTransformation(extent={{-110,-50},{-90,
                  -30}})));
        Connectors.FaceBus wireP annotation (Placement(transformation(extent={{
                  10,-10},{30,10}}), iconTransformation(extent={{90,-50},{110,-30}})));
        FCSys.WorkInProgress.Systems.Pump.Interfaces.ActBusIn actBusIn
          annotation (Placement(transformation(extent={{-42,-70},{-22,-50}}),
              iconTransformation(extent={{-32,-90},{-12,-70}})));
        FCSys.WorkInProgress.Systems.Pump.Interfaces.SenBusOut senBusOut
          annotation (Placement(transformation(extent={{2,-70},{22,-50}}),
              iconTransformation(extent={{10,-90},{30,-70}})));
        Connectors.FaceBus pipeP annotation (Placement(transformation(extent={{
                  94,-6},{106,6}}), iconTransformation(extent={{90,-10},{110,10}})));
        Connectors.FaceBus pipeN annotation (Placement(transformation(extent={{
                  -106,-6},{-94,6}}), iconTransformation(extent={{-110,-10},{-90,
                  10}})));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={
                  {-100,-100},{100,100}}), graphics), Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={Line(
                      points={{-90,-40},{-30,-40}},
                      color={0,200,0},
                      smooth=Smooth.None),Line(
                      points={{30,-40},{90,-40}},
                      color={0,200,0},
                      smooth=Smooth.None),Line(
                      points={{20,0},{90,0}},
                      color={0,0,0},
                      smooth=Smooth.None),Line(
                      points={{-90,0},{-20,0}},
                      color={0,0,0},
                      smooth=Smooth.None)}));

      end Pump;

      package Interfaces
        extends Modelica.Icons.InterfacesPackage;
        expandable connector ActBusIn
          "Data bus for inputs to a plant's actuators"
          extends FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.In;
          input SI.Current current_ref;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end ActBusIn;

        expandable connector ActBusOut
          "Data bus for inputs to a plant's actuators"
          extends
            FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.Out;
          output SI.Current current_ref;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end ActBusOut;

        expandable connector SenBusIn
          "Data bus for outputs from a plant's sensors"
          extends FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.In;
          input Q.Voltage current;
          input Q.Rotation angle;
          input Q.RotationalVelocity speed;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end SenBusIn;

        expandable connector SenBusOut
          "Data bus for outputs from a plant's sensors"
          extends
            FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.Out;
          output Q.Voltage current;
          output Q.Rotation angle;
          output Q.RotationalVelocity speed;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end SenBusOut;

        model ActArrayToBus

          FCSys.WorkInProgress.Systems.Pump.Interfaces.ActBusOut actBusOut
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={100,0}),iconTransformation(
                extent={{-80,-20},{-40,20}},
                rotation=0,
                origin={100,0})));
          Connectors.RealInput actIN[1] annotation (Placement(transformation(
                  extent={{-110,-10},{-90,10}}), iconTransformation(extent={{-60,
                    -20},{-20,20}})));

        equation
          connect(actIN[1], actBusOut.current_ref) annotation (Line(
              points={{-100,0},{-4,0},{-4,5.55112e-16},{100,5.55112e-16}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}),graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-60,-40},{60,40}}),
                graphics={Rectangle(
                          extent={{-40,40},{40,-40}},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.Dash,
                          lineColor={0,0,0}),Line(
                          points={{-28,4},{28,4}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-28,-4},{34,-4}},
                          color={0,0,127},
                          smooth=Smooth.None)}));

        end ActArrayToBus;

        model SenBusToArray

          SenBusIn senBusIn annotation (Placement(transformation(extent={{-110,
                    -10},{-90,10}}), iconTransformation(extent={{-60,-20},{-20,
                    20}})));
          Connectors.RealOutput senOut[3] annotation (Placement(transformation(
                  extent={{90,-10},{110,10}}), iconTransformation(extent={{20,-20},
                    {60,20}})));

        equation
          connect(senBusIn.angle, senOut[3]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,6.66667},{100,
                  6.66667}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));

          connect(senBusIn.speed, senOut[2]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,0},{100,0}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
          connect(senBusIn.current, senOut[1]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,-6.66667},{100,-6.66667}},

              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}),graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-60,-40},{60,40}}),
                graphics={Rectangle(
                          extent={{-40,40},{40,-40}},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.Dash,
                          lineColor={0,0,0}),Line(
                          points={{-34,-4},{20,-4}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-28,4},{20,4}},
                          color={0,0,127},
                          smooth=Smooth.None)}));

        end SenBusToArray;

      end Interfaces;

    end Pump;

    package Valve
      extends Modelica.Icons.Package;
      model Valve "Valve for water/steam flows with linear pressure drop"
        // TODO:  Complete this.

        //  extends FCSys.Processes.BaseClasses.PartialTransport.Top1;
        extends FCSys.BaseClasses.Icons.Name.Top3;

        FCSys.WorkInProgress.Systems.Valve.Interfaces.ActBusIn actBusIn
          annotation (Placement(transformation(extent={{-50,-70},{-30,-50}}),
              iconTransformation(extent={{-32,-30},{-12,-10}})));
        FCSys.WorkInProgress.Systems.Valve.Interfaces.SenBusOut senBusOut
          annotation (Placement(transformation(extent={{30,-70},{50,-50}}),
              iconTransformation(extent={{12,-30},{32,-10}})));
        Connectors.FaceBus pipeN annotation (Placement(transformation(extent={{
                  -106,14},{-94,26}}), iconTransformation(extent={{-110,10},{-90,
                  30}})));
        Connectors.FaceBus pipeP annotation (Placement(transformation(extent={{
                  94,14},{106,26}}), iconTransformation(extent={{90,10},{110,30}})));
        annotation (
          Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics={Line(points={{0,20},{0,-30}}, color={0,0,0}),
                Rectangle(
                      extent={{-40,0},{40,-40}},
                      lineColor={0,0,0},
                      fillColor={0,0,0},
                      fillPattern=FillPattern.Solid),Polygon(
                      points={{-40,40},{40,0},{40,40},{0,20},{-40,0},{-40,40}},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),Line(
                      points={{-90,20},{-40,20}},
                      color={0,0,0},
                      smooth=Smooth.None),Line(
                      points={{40,20},{90,20}},
                      color={0,0,0},
                      smooth=Smooth.None)}),
          Diagram(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100,-100},{100,100}},
              grid={2,2}), graphics),
          Documentation(info="<html>
<p>This very simple model provides a pressure drop which is proportional to the flow rate and to the <code>face</code> input, without computing any fluid property. It can be used for testing purposes, when
a simple model of a variable pressure loss is needed.</p>

<p>A medium model must be nevertheless be specified, so that the fluid ports can be connected to other species using the same medium model.</p>

<p>The model is adiabatic (no heat losses to the ambient) and neglects changes in kinetic energy from the inlet to the outlet.</p>
</html>", revisions="<html>
<ul>
<li><i>2 Nov 2005</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco Casella</a>:<br>
       Adapted from the ThermoPower library.</li>
</ul>
</html>"));

      end Valve;

      package Interfaces
        // TODO:  Complete this.

        extends Modelica.Icons.InterfacesPackage;
        expandable connector ActBusIn
          "Data bus for inputs to a plant's actuators"
          extends FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.In;
          input SI.Voltage v_ref;
          input Real valvePos_an_in;
          input Real valvePos_an_out;
          input Real valvePos_ca_out;
          input Real valvePos_humid_an;
          input Real valvePos_humid_ca;
          input Real qdot_compressor;
          input Real qdot_H2Opump;
          input Real qdot_coolingPump;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end ActBusIn;

        expandable connector ActBusOut
          "Data bus for inputs to a plant's actuators"
          extends
            FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.Out;
          output SI.Current current_ref;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end ActBusOut;

        expandable connector SenBusIn
          "Data bus for outputs from a plant's sensors"
          extends FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.In;
          input Q.Voltage current;
          input Q.Rotation angle;
          input Q.RotationalVelocity speed;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end SenBusIn;

        expandable connector SenBusOut
          "Data bus for outputs from a plant's sensors"
          extends
            FCSys.WorkInProgress.Systems.BaseClasses.Icons.SignalBuses.Out;
          output Q.Voltage current;
          output Q.Rotation angle;
          output Q.RotationalVelocity speed;
          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{
                    -100,-100},{100,100}}), graphics));

        end SenBusOut;

        model ActArrayToBus

          FCSys.WorkInProgress.Systems.Valve.Interfaces.ActBusOut actBusOut
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={100,0}),iconTransformation(
                extent={{-80,-20},{-40,20}},
                rotation=0,
                origin={100,0})));
          Connectors.RealInput actIN[1] annotation (Placement(transformation(
                  extent={{-110,-10},{-90,10}}), iconTransformation(extent={{-60,
                    -20},{-20,20}})));

        equation
          connect(actIN[1], actBusOut.current_ref) annotation (Line(
              points={{-100,0},{-4,0},{-4,5.55112e-16},{100,5.55112e-16}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-60,-40},{60,40}}),
                graphics={Rectangle(
                          extent={{-40,40},{40,-40}},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.Dash,
                          lineColor={0,0,0}),Line(
                          points={{-28,4},{28,4}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-28,-4},{34,-4}},
                          color={0,0,127},
                          smooth=Smooth.None)}));

        end ActArrayToBus;

        model SenBusToArray

          SenBusIn senBusIn annotation (Placement(transformation(extent={{-110,
                    -10},{-90,10}}), iconTransformation(extent={{-60,-20},{-20,
                    20}})));
          Connectors.RealOutput senOut[3] annotation (Placement(transformation(
                  extent={{90,-10},{110,10}}), iconTransformation(extent={{20,-20},
                    {60,20}})));

        equation
          connect(senBusIn.angle, senOut[3]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,6.66667},{100,
                  6.66667}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));

          connect(senBusIn.speed, senOut[2]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,0},{100,0}},
              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
          connect(senBusIn.current, senOut[1]) annotation (Line(
              points={{-100,5.55112e-16},{0,5.55112e-16},{0,-6.66667},{100,-6.66667}},

              color={0,0,127},
              smooth=Smooth.None), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent
                  ={{-100,-100},{100,100}}), graphics), Icon(coordinateSystem(
                  preserveAspectRatio=true, extent={{-60,-40},{60,40}}),
                graphics={Rectangle(
                          extent={{-40,40},{40,-40}},
                          fillColor={255,255,255},
                          fillPattern=FillPattern.Solid,
                          pattern=LinePattern.Dash,
                          lineColor={0,0,0}),Line(
                          points={{-34,-4},{20,-4}},
                          color={0,0,127},
                          smooth=Smooth.None),Line(
                          points={{-28,4},{20,4}},
                          color={0,0,127},
                          smooth=Smooth.None)}));

        end SenBusToArray;

      end Interfaces;

    end Valve;

    package FluidHeater
      extends Modelica.Icons.Package;
      model FluidHeater
        // TODO:  Complete this.

        extends FCSys.BaseClasses.Icons.Name.Top4;

        Subregions.HeatExchanger fCConvection annotation (Placement(
              transformation(extent={{90,116},{110,136}}, rotation=0)));
        Connectors.FaceBus wireN annotation (Placement(transformation(extent={{
                  -110,-50},{-90,-30}}), iconTransformation(extent={{-110,-50},
                  {-90,-30}})));
        Connectors.FaceBus wireP annotation (Placement(transformation(extent={{
                  90,-50},{110,-30}}), iconTransformation(extent={{90,-50},{110,
                  -30}})));
        Connectors.FaceBus pipeP annotation (Placement(transformation(extent={{
                  90,30},{110,50}}), iconTransformation(extent={{90,30},{110,50}})));
        Connectors.FaceBus pipeN annotation (Placement(transformation(extent={{
                  -110,30},{-90,50}}), iconTransformation(extent={{-110,30},{-90,
                  50}})));
        FCSys.WorkInProgress.Systems.Valve.Interfaces.ActBusIn actBusIn
          annotation (Placement(transformation(extent={{-50,-70},{-30,-50}}),
              iconTransformation(extent={{-34,-90},{-14,-70}})));
        FCSys.WorkInProgress.Systems.Valve.Interfaces.SenBusOut senBusOut
          annotation (Placement(transformation(extent={{30,-70},{50,-50}}),
              iconTransformation(extent={{10,-90},{30,-70}})));

      equation
        connect(fCConvection.matN1, fCConvection.matP1) annotation (Line(
            points={{90,122},{110,122}},
            color={0,200,0},
            smooth=Smooth.None,
            thickness=0.5));
        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics={Rectangle(
                      extent={{-72,-20},{72,-60}},
                      lineColor={215,215,215},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),Rectangle(
                      extent={{-72,60},{72,20}},
                      lineColor={215,215,215},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),Line(
                      points={{-90,40},{-72,40},{-60,60},{-36,20},{-12,60},{12,
                  20},{36,60},{60,20},{72,40},{90,40}},
                      color={0,0,0},
                      smooth=Smooth.None),Rectangle(
                      extent={{-40,-60},{40,-100}},
                      fillColor={0,0,0},
                      fillPattern=FillPattern.Solid,
                      pattern=LinePattern.None),Line(
                      points={{-38,-24},{-38,-24},{-38,-24},{-12,20},{12,-20},{
                  36,20},{60,-20},{72,0}},
                      color={191,0,0},
                      smooth=Smooth.Bezier,
                      origin={0,-2},
                      rotation=90),Line(
                      points={{0,70},{4,56}},
                      color={191,0,0},
                      smooth=Smooth.Bezier),Line(
                      points={{0,70},{16,70}},
                      color={191,0,0},
                      smooth=Smooth.Bezier),Line(
                      points={{-90,-40},{-72,-40},{-60,-20},{-36,-60},{-12,-20},
                  {12,-60},{36,-20},{60,-60},{72,-40},{90,-40}},
                      color={0,200,0},
                      smooth=Smooth.None)}), Diagram(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics));

      end FluidHeater;

    end FluidHeater;

    package BaseClasses "Base classes (not generally for direct use)"
      extends Modelica.Icons.BasesPackage;

      type LHSchoice = enumeration(
          Delta_v1 "Voltage across side 1",
          Delta_qdot1 "Total current through side 1")
        "Enumeration defining the left hand side (LHS) variable of an electrical-electrical transformer"
        annotation (Evaluate=true);
      type RHSchoice = enumeration(
          Delta_v2 "Voltage across side 2",
          Delta_qdot2 "Total current through side 2",
          unity "Unity (independent of side 2)")
        "Enumeration defining the right hand side (RHS) variable of an electrical-electrical transformer"
        annotation (Evaluate=true);

      package Icons
        extends Modelica.Icons.Package;
        package SignalBuses
          "Icons for buses of signals (expandable connectors)"
          extends Modelica.Icons.Package;
          partial class Bidirectional "Icon for a signal bus"
            annotation (
              Icon(coordinateSystem(
                  preserveAspectRatio=true,
                  extent={{-100,-100},{100,100}},
                  grid={2,2},
                  initialScale=0.2), graphics={Rectangle(
                              extent={{-20,2},{20,-2}},
                              lineColor={255,204,51},
                              lineThickness=0.5),Polygon(
                              points={{-80,50},{80,50},{100,30},{80,-40},{60,-50},
                      {-60,-50},{-80,-40},{-100,30},{-80,50}},
                              lineColor={0,0,0},
                              fillColor={255,204,51},
                              fillPattern=FillPattern.Solid),Ellipse(
                              extent={{-65,25},{-55,15}},
                              lineColor={0,0,0},
                              fillColor={0,0,0},
                              fillPattern=FillPattern.Solid),Ellipse(
                              extent={{-5,25},{5,15}},
                              lineColor={0,0,0},
                              fillColor={0,0,0},
                              fillPattern=FillPattern.Solid),Ellipse(
                              extent={{55,25},{65,15}},
                              lineColor={0,0,0},
                              fillColor={0,0,0},
                              fillPattern=FillPattern.Solid),Ellipse(
                              extent={{-35,-15},{-25,-25}},
                              lineColor={0,0,0},
                              fillColor={0,0,0},
                              fillPattern=FillPattern.Solid),Ellipse(
                              extent={{25,-15},{35,-25}},
                              lineColor={0,0,0},
                              fillColor={0,0,0},
                              fillPattern=FillPattern.Solid)}),
              Diagram(coordinateSystem(
                  preserveAspectRatio=true,
                  extent={{-100,-100},{100,100}},
                  grid={2,2},
                  initialScale=0.2), graphics={Polygon(
                              points={{-40,25},{40,25},{50,15},{40,-20},{30,-25},
                      {-30,-25},{-40,-20},{-50,15},{-40,25}},
                              lineColor={0,0,0},
                              fillColor={255,204,51},
                              fillPattern=FillPattern.Solid),Ellipse(
                              extent={{-32.5,7.5},{-27.5,12.5}},
                              lineColor={0,0,0},
                              fillColor={0,0,0},
                              fillPattern=FillPattern.Solid),Ellipse(
                              extent={{-2.5,12.5},{2.5,7.5}},
                              lineColor={0,0,0},
                              fillColor={0,0,0},
                              fillPattern=FillPattern.Solid),Ellipse(
                              extent={{27.5,12.5},{32.5,7.5}},
                              lineColor={0,0,0},
                              fillColor={0,0,0},
                              fillPattern=FillPattern.Solid),Ellipse(
                              extent={{-17.5,-7.5},{-12.5,-12.5}},
                              lineColor={0,0,0},
                              fillColor={0,0,0},
                              fillPattern=FillPattern.Solid),Ellipse(
                              extent={{12.5,-7.5},{17.5,-12.5}},
                              lineColor={0,0,0},
                              fillColor={0,0,0},
                              fillPattern=FillPattern.Solid),Text(
                              extent={{-150,50},{150,90}},
                              textString="%name",
                              lineColor={0,0,0})}),
              Documentation(info="<html>
<p>This icon is designed for a <b>signal bus</b> connector.</p>
</html>"));

          end Bidirectional;

          partial class In "Icon for a bus input"
            extends Bidirectional;
            annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent=
                      {{-100,-100},{100,100}}), graphics={Polygon(
                              points={{-160,40},{40,40},{-60,-160},{-160,40}},
                              smooth=Smooth.None,
                              fillColor={255,255,255},
                              fillPattern=FillPattern.Solid,
                              origin={-240,60},
                              rotation=90,
                              lineColor={255,204,51}),Rectangle(
                              extent={{-20,2},{20,-2}},
                              lineColor={255,204,51},
                              lineThickness=0.5)}), Diagram(coordinateSystem(
                    preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
                  graphics={Polygon(
                              points={{-42,40},{58,40},{8,-60},{-42,40}},
                              smooth=Smooth.None,
                              fillColor={255,204,51},
                              fillPattern=FillPattern.Solid,
                              origin={80,-8},
                              rotation=90,
                              lineColor={255,204,51})}));

          end In;

          partial class Out "Icon for a bus output"
            extends Bidirectional;
            annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent=
                      {{-100,-100},{100,100}}), graphics={Rectangle(
                              extent={{-20,2},{20,-2}},
                              lineColor={255,204,51},
                              lineThickness=0.5),Polygon(
                              points={{-160,40},{40,40},{-60,-160},{-160,40}},
                              smooth=Smooth.None,
                              fillColor={255,204,51},
                              fillPattern=FillPattern.Solid,
                              origin={120,60},
                              rotation=90,
                              lineColor={255,204,51})}), Diagram(
                  coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                      {100,100}}), graphics={Polygon(
                              points={{-10,40},{90,40},{40,140},{-10,40}},
                              lineColor={255,204,51},
                              smooth=Smooth.None,
                              origin={-178,40},
                              rotation=270,
                              fillColor={255,255,255},
                              fillPattern=FillPattern.Solid)}));

          end Out;

        end SignalBuses;

      end Icons;

    end BaseClasses;
    annotation (Documentation(info="<html><p><b>Licensed by the Georgia Tech Research Corporation under the Modelica License 2</b><br>
Copyright 2007&ndash;2013, Georgia Tech Research Corporation.</p>

<p><i>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>;
it can be redistributed and/or modified under the terms of the Modelica License 2. For license conditions (including the
disclaimer of warranty) see <a href=\"modelica://FCSys.UsersGuide.ModelicaLicense2\">
FCSys.UsersGuide.ModelicaLicense2</a> or visit <a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">
http://www.modelica.org/licenses/ModelicaLicense2</a>.</i></p></html>"));

  end Systems;

  model ConditionsAdaptersSpeciesFluid
    "<html>Adapter to connect a single fluid species between <a href=\"modelica://FCSys\">FCSys</a> and <a href=\"modelica://Modelica\">Modelica</a></html>"

    extends Conditions.Adapters.Species.FluidNonionic;
    extends Modelica.Icons.UnderConstruction;

    Modelica.Electrical.Analog.Interfaces.NegativePin pin if Data.z <> 0
      "Modelica electrical pin" annotation (Placement(transformation(extent={{
              70,30},{90,50}}), iconTransformation(extent={{70,30},{90,50}})));

  equation
    // **Add electrical equations.
    annotation (Documentation(info="<html><p>The electrical connector (<code>pin</code>) is only included
    if the species is ionic.</p>

<p>For additional information, see the
    <a href=\"modelica://FCSys.Conditions.Adapters.Species.BaseClasses.PartialSpecies\">
    PartialSpecies</a> model.</p>
    </html>"), Icon(graphics={Line(
              points={{0,40},{80,40}},
              color={0,0,255},
              smooth=Smooth.None),Line(
              points={{0,60},{0,20}},
              color={0,0,0},
              smooth=Smooth.None,
              pattern=LinePattern.Dash)}));

  end ConditionsAdaptersSpeciesFluid;

  model ConditionsAdaptersPhasesIonomer
    "<html>Adapter for ionomer between <a href=\"modelica://FCSys\">FCSys</a> and <a href=\"modelica://Modelica\">Modelica</a></html>"
    extends Conditions.Adapters.Phases.BaseClasses.PartialPhase;
    extends Modelica.Icons.UnderConstruction;

    Conditions.Adapters.Species.Solid 'C19HF37O5S-';
    FCSys.WorkInProgress.ConditionsAdaptersSpeciesFluid 'H+'(redeclare package
        Data = FCSys.Characteristics.'H+'.Ionomer, redeclare package Medium =
          Modelica.Media.IdealGases.SingleGases.H2)
      annotation (Placement(transformation(extent={{-10,-30},{10,-10}})));
    // **Use model for H instead.

    Conditions.Adapters.Species.FluidNonionic H2O(redeclare package Data =
          Characteristics.H2O.Ionomer, redeclare package Medium =
          Modelica.Media.IdealGases.SingleGases.H2O)
      annotation (Placement(transformation(extent={{-10,-50},{10,-30}})));
    Conditions.Adapters.Junctions.Junction2 junction2
      annotation (Placement(transformation(extent={{60,-50},{40,-30}})));
    Modelica.Fluid.Interfaces.FluidPort_b fluidPort(redeclare final package
        Medium = Medium) "Modelica fluid port" annotation (Placement(
          transformation(extent={{70,-50},{90,-30}}), iconTransformation(extent
            ={{70,-50},{90,-30}})));
    Modelica.Electrical.Analog.Interfaces.NegativePin pin
      "Modelica electrical pin" annotation (Placement(transformation(extent={{
              70,30},{90,50}}), iconTransformation(extent={{70,30},{90,50}})));

  equation
    connect('C19HF37O5S-'.face.thermal, face.'C19HF37O5S-'.thermal) annotation
      (Line(
        points={{-8,20},{-40,20},{-40,5.55112e-16},{-80,5.55112e-16}},
        color={127,127,127},
        smooth=Smooth.None));

    connect('H+'.face.normal, face.'H+'.normal) annotation (Line(
        points={{-8,-20},{-40,-20},{-40,5.55112e-16},{-80,5.55112e-16}},
        color={127,127,127},
        smooth=Smooth.None));

    connect('H+'.face.thermal, face.'H+'.thermal) annotation (Line(
        points={{-8,-20},{-40,-20},{-40,5.55112e-16},{-80,5.55112e-16}},
        color={127,127,127},
        smooth=Smooth.None));

    connect('H+'.pin, pin) annotation (Line(
        points={{8,-16},{60,-16},{60,40},{80,40}},
        color={0,0,255},
        smooth=Smooth.None));

    connect('H+'.heatPort, heatPort) annotation (Line(
        points={{8,-20},{40,-20},{40,5.55112e-16},{80,5.55112e-16}},
        color={191,0,0},
        smooth=Smooth.None));
    connect('C19HF37O5S-'.heatPort, heatPort) annotation (Line(
        points={{8,20},{40,20},{40,5.55112e-16},{80,5.55112e-16}},
        color={191,0,0},
        smooth=Smooth.None));
    connect(junction2.mixturePort, fluidPort) annotation (Line(
        points={{58,-40},{80,-40}},
        color={0,127,255},
        smooth=Smooth.None));
    annotation (Placement(transformation(extent={{-10,10},{10,30}})), Icon(
          graphics={Line(
              points={{0,60},{0,-60}},
              color={0,0,0},
              smooth=Smooth.None,
              pattern=LinePattern.Dash,
              thickness=0.5),Line(
              points={{0,0},{-80,0}},
              color={127,127,127},
              smooth=Smooth.None,
              thickness=0.5),Line(
              points={{0,40},{80,40}},
              color={0,0,255},
              smooth=Smooth.None),Line(
              points={{0,0},{80,0}},
              color={191,0,0},
              smooth=Smooth.None),Line(
              points={{0,-40},{80,-40}},
              color={0,127,255},
              smooth=Smooth.None)}));

  end ConditionsAdaptersPhasesIonomer;

public
  function Characteristics_BaseClasses_Characteristic_kappa_T
    "<html>Isothermal compressibility as a function of temperature and pressure (&kappa;<sub><i>T</i></sub>)</html>"
    extends Modelica.Icons.Function;

    input Q.TemperatureAbsolute T=298.15*U.K "Temperature";
    input Q.PressureAbsolute p=U.atm "Pressure";
    output Q.PressureReciprocal beta_T "Isothermal compressibility";

  algorithm
    beta_T := -Characteristics.BaseClasses.Characteristic.dv_Tp(
        T=T,
        p=p,
        dT=0,
        dp=1)/Characteristics.BaseClasses.Characteristic.v_Tp(T, p)
      annotation (Inline=true);
    annotation (Documentation(info="<html>
  <p>Note that the compressibility given by this function is static&mdash;unique
  from the dynamic compressibility given by
  <a href=\"modelica://FCSys.Characteristics.BaseClasses.Characteristic.Xi\">Xi</a>().</p>

  <p>For an ideal gas, this function is independent of temperature
  (although temperature remains as a valid input).</p>
  </html>"));

  end Characteristics_BaseClasses_Characteristic_kappa_T;
  annotation (Commands(file="resources/scripts/units-values.mos"
        "Establish the constants and units in the workspace (first translate a model besides Units.Evaluate).",
        file="test/check.mos"
        "Check all of FCSys using Dymola's check function."));

end WorkInProgress;
