// Strings identifying the models to be tested (in Modelica dot notation)
models = {"FCSys.BCs.Examples.Environment",
          "FCSys.BCs.Examples.FaceBC",
          "FCSys.BCs.Examples.FaceBCMixtures",
          "FCSys.BCs.Examples.Router",
          "FCSys.BCs.Examples.Adapteminus",
          //"FCSys.BCs.Examples.AdaptFluid",
          "FCSys.Subassemblies.Examples.Cell",
          "FCSys.Subassemblies.Examples.CellProfile",
          "FCSys.Subassemblies.Examples.CellProfileIO",
          //"FCSys.Subassemblies.Examples.CellModelica",
          // 11
          "FCSys.Regions.Examples.FPToFP",
          "FCSys.Regions.Examples.GDLToGDL",
          "FCSys.Regions.Examples.CLToCL",
          "FCSys.Regions.Examples.AnFP",
          "FCSys.Regions.Examples.AnGDL",
          "FCSys.Regions.Examples.AnCL",
          "FCSys.Regions.Examples.PEM",
          "FCSys.Regions.Examples.CaCL",
          "FCSys.Regions.Examples.CaGDL",
          "FCSys.Regions.Examples.CaFP",
          // 21
          "FCSys.Subregions.Examples.SubregionH2",
          "FCSys.Subregions.Examples.SubregionCAndH2",
          "FCSys.Subregions.Examples.SubregionsH2",
          "FCSys.Subregions.Examples.SubregionsCAndH2",
          "FCSys.Subregions.Examples.SubregionsCAndH2AndH2O",
          "FCSys.Subregions.Examples.SubregionsCAndH2O",
          "FCSys.Subregions.Examples.SubregionsCAndN2",
          "FCSys.Subregions.Examples.SubregionsCAndO2",
          "FCSys.Subregions.Examples.SubregionsC19HF37O5SAndH2OAndHplus",
          "FCSys.Subregions.Examples.Subregionseminus",
          // 31
          "FCSys.Subregions.Examples.ThermalConduction",
          "FCSys.Subregions.Examples.ThermalConductionConvection",
          "FCSys.Subregions.Examples.ReactionRamp",
          "FCSys.Subregions.Examples.ReactionDynamic",
          "FCSys.Subregions.Examples.Cell",
          "FCSys.Subregions.Examples.Reaction",
          "FCSys.Characteristics.Examples.TestCorrelations",
          "FCSys.Units.Evaluate",
          "FCSys.Quantities.Examples.TestQuantities",
          "FCSys.BaseClasses.Utilities.Examples.TranslatePoly"
         };

// Stop times of the simulations
stopTimes = {1,
             1,
             1,
             1,
             1,
             //1,
             1,
             1e-24,
             1e-24,
             //1e-24,
             // 11
             10,
             10,
             0.001,
             10,
             3.8e-08,
             10,
             10,
             10,
             0.025,
             0.015,
             // 21
             2,
             7,
             10,
             6,
             6,
             1e-05,
             1.2e-08,
             500,
             36000,
             0.1,
             // 31
             360000,
             360000,
             1,
             1,
             1,
             1,
             1,
             1,
             1,
             1
            };

// Test the functions.
FCSys.BaseClasses.Utilities.Examples.TestFunctions();

// Test the models (low to high level).
for i in size(models,1):-1:1 loop
    Modelica.Utilities.Streams.print("Testing " + models[i] + " (" + String(size(models,1) - i + 1) + " of " + String(size(models,1)) + ")...");
    ""; // This is necessary to flush the print buffer.
    assert(simulateModel(models[i], stopTime=stopTimes[i]), "Model " + models[i] + " failed.");
end for;
