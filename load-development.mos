// Script to load the FCSys library in Dymola, with custom settings

// ------------
// Settings
// ------------

// Note:  Dymola's list() function lists all possible settings.
// The settings below are all the non-default ones.  Comment the lines to use
// the defaults.

// Options to (possibly) increase simulation performance
Advanced.GuardedSqrt = false "Generate error for sqrt of negative numbers";
Advanced.ImprovedPackageConstants = true "Improved code generation for package constants";
Advanced.IncludeLibrariesForSimulink = false "Also link with libraries in Simulink";
Advanced.SubstituteVariablesUsedOnce = true "Substitute variables used only once";
//Advanced.AllowNumericDifferentiation = true "Allow numeric differentiation for computing Jacobian for non-linear solver";
//Advanced.CancelFactors = true "Try to eliminate possible divisions by zero when solving equations";
//  Warning:  This makes translation very, very slow in Dymola 2014!
//Advanced.CompileWith64 = 0 "Compile the model as 64-bit; 0 only for dll/server if executable is 64-bit, 1 never, 2 always.";
//Advanced.Define.AutoRemoveAuxiliaries = true "Automatically remove code to compute auxilaries that are not needed";
//  Warning:  Don't use this in Dymola 2014.  Modelica.Blocks.Sources.Ramp 
//  doesn't run correctly with it!
//Advanced.EvaluateParametersDuringSimulation = true "Generate code for evaluation of parameters during simulations";
//Advanced.GenerateAnalyticJacobian = true "Generate analytic Jacobian for the ODE problem";
//Advanced.ParameterExpressionTearing = true "Assume parameter expressions being non-zero at tearing";
//Advanced.ParameterTearing = true "Assume parameters being non-zero at tearing";
//Advanced.SmoothEvent = 0 "How smooth generates events (0 - never, 1 - smart, 2 always)";
//Evaluate = true "Evaluate parameters to reduce models (improves simulation speed).";

// Debugging and development options
LogStateSelection = true "List continuous time states selected";
OutputCPUtime = true "Include a variable for elapsed CPU time during simulation";
LogDefaultInitialConditions = true "Log selected default initial conditions";
Advanced.OutputModelicaCode = true "Output dsmodel in Modelica style";
Advanced.StoreProtectedVariables = true "Store protected variables when simulating";
Advanced.HighlightReplaceable = false "Highlight replaceable and redeclared components in diagram";
Advanced.Legend.Horizontal = false "Horizontal layout of plot legend by default";
Advanced.Legend.Location = 5 "Default location of plot legend (1-7)";
Advanced.OutputModelicaCodeWithAliasVariables = true "List eliminated alias variables when outputting dsmodel in Modelica style";
Advanced.AutoFormatting = true "Automatic indentation of code. Can be changed without new translation of model";
Advanced.TranslationInCommandLog = true "Also include translation log in command log";
Advanced.IncludeProtectedInBrowser = true "Include protected classes in package browser";
Advanced.SmartConnect = false "Create connection automatically if connector over connector.";
//   Note:  Smart connect sometimes crashes Dymola 2014. 
//Advanced.EnableAnnotationCheck = true "Can set to enable annotation check for Modelica 3.1 and later";
//Advanced.PedanticModelica = true "Pedantic mode for checking Modelica semantics (turn warnings into errors)";
//Advanced.AssertAllInsideMinMax = true "Generate asserts that all variables are inside min/max";
//Advanced.AssertNonLinearInsideMinMax = true "Generate asserts that variables in non-linear systems are inside min/max";
//Advanced.LogDefaultInitialConditionsForDiscreteNonStates = true "Log selected default initial conditions for discrete non-states";
//Advanced.LogStartValuesForIterationVariables = true "Logs start values for iteration variables";
//Advanced.LogStructuredEvaluation = true "Log evaluation of structural parameters";
//Advanced.OutputModelicaCodeWithAliasVariables = true "List eliminated alias variables when outputting dsmodel in Modelica style";
//Advanced.OutputModelicaCodeWithJacobians = true "Include Jacobians for algebraic loops when outputting dsmodel in Modelica style";
//LogDefaultInitialConditions = true "Log selected default initial conditions";
//LogDifferentiatedEquations = true "Output information when differentiating for index reduction";

// Other options
//Advanced.DefaultSteadyStateInitialization = true "Initialize in steady state as default.";

// ------------
// Startup
// ------------
// Load the FCSys package.
Advanced.CheckUnits = false "Check unit consistency of equations";
openModel("FCSys/package.mo");
cd("..");

// Establish the unit system.
FCSys.Units.setup();

// Work in the directory above the FCSys package.
cd("..")

// Save a static, translated copy of the values of all the constants and units.
// The constants and units will be available in the workspace, but only until
// the next model is simulated.  To load the and retain the variables until
// Dymola is closed, translate a model besides Units.Evaluate and then run
// "units.mos" as a script.
translateModel("FCSys.Units.Examples.Evaluate");
Modelica.Utilities.Files.copy("dsmodel.mof", "units.mos", true);
