%%% Integrator in state-space plus uncertainty%%%   [K,L,Ao,Bo,Co,Do,K_fb,K_ff] = ssmpc_observer(A,B,C,D,Q,R);%%%%%% Add integrator to state-space MPC via disturbance model%%% Disturbance on output only%%%%%% Also require estimate of steady-state values of x and u to meet desired%%% set point based on model%%%   x = A*x + B*u%%%   y = C*x + d       %%%   let state  d(k) = d(k+1)  be estimate of disturbance%%%   z is given as [x_hat; d_hat]%%%  %%% Observer is   z = Ao*z +Bo*u + L*(y - Co*z);%%%%%% Estimate steady-state values%%%   [A-I  B]*[x] = [0]%%%   [C    0]*[u] = [r-d]      %%%   [x_SS; u_SS] = M(r - d_hat)%%%%%% Control law:%%%   u = -K(x_hat-x_SS) + u_SS%%%   OR%%%   u = -K_fb*z + K_ff*r%%%%%%   where%%%   K:    underlying control law is within K_fb%%%   Q, R: weighting matrices used to find underlying optimal feedback K%%%   L:    observer design is arbitrary (could be improved)%%%%%% Revision history:%%%   J.A. Rossiter (email: J.A.Rossiter@shef.ac.uk), original version, observor.m%%%   K.L. Davies, 12/3/09, renamed the file and some variablesfunction [K,L,Ao,Bo,Co,Do,K_fb,K_ff] = ssmpc_observer(A,B,C,D,Q,R)n_x = size(A,1);   % Number of statesn_act = size(B,2); % Number of actuatorsn_sen = size(C,1); % Number of sensors%% Design control based on simple model.K = dlqr(A,B,Q,R);%% Add extra states d to observer mode---equivalent to output disturbance.%  d(k+1) = d(k)%  y(k) = C*x + D*u + d % Can instead assume state disturbance.  See Rossister (2003) p. 21.Ao = [A,zeros(n_x,n_sen);zeros(n_sen,n_x),eye(n_sen)];Bo = [B;zeros(n_sen,n_act)]; Co = [C,eye(n_sen)];Do = D;%% Design observer based on augmented model.% Note the arbitratry design---could be replaced by Kalman if more information% is available on the statistics of noise.L = dlqr(Ao',Co',eye(n_x+n_sen),eye(n_sen)*1e-5);L = L';%% Matrix to estimate steady-state values of u and xM = [A-eye(n_x),B;C,D];N = [zeros(n_x,n_sen);eye(n_sen)];M = M\N;M_x = M(1:n_x,:);M_u = M(n_x+1:n_x+n_sen,:);Cde = [zeros(n_sen,n_x),eye(n_sen)];%% Control law%  u = -K_fb*z + K_ff*ref%  K_fb = [K,zeros(n_sen,n_sen)] + K*M_x*Cde + M_sen*Cde;K_ff = K*M_x + M_u;K_fb = [K,zeros(n_sen,n_sen)] + K_ff*Cde;